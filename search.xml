<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>go应用开发框架：beego</title>
    <url>/posts/post/2020/08/202008222257.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ go get -u github.com&#x2F;astaxie&#x2F;beego      &#x2F;&#x2F;下载beego框架</span><br><span class="line">$ go get -u github.com&#x2F;beego&#x2F;bee          &#x2F;&#x2F;下载bee工具</span><br></pre></td></tr></table></figure>

<p>bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。</p>
<p>如果在下载过程中发现很慢，那应该是GOPROXY使用的默认值，下载速度会很慢。可以设置使用以下加速的代理：</p>
<p><strong>国内七牛云代理</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ go env -w GO111MODULE&#x3D;on</span><br><span class="line">$ go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>全球CDN加速</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go env -w GO111MODULE&#x3D;on</span><br><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct</span><br></pre></td></tr></table></figure>

<p>选择一个就行，下载速度的问题就解决了。当下载完之后，bee的bee.exe便会生成在go的bin目录下和beego框架的源码就被下载到设置了的POPATH执行的目录。如果GOPATH和go的src目录不一致，就把下载好的复制到go的src目录，编写程序时就可以引用了。</p>
<h1 id="bee工具的命令"><a href="#bee工具的命令" class="headerlink" title="bee工具的命令"></a>bee工具的命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bee help</span><br><span class="line">Bee is a Fast and Flexible tool for managing your Beego Web Application.</span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line">    bee command [arguments]</span><br><span class="line"></span><br><span class="line">AVAILABLE COMMANDS</span><br><span class="line"></span><br><span class="line">    version     Prints the current Bee version</span><br><span class="line">    migrate     Runs database migrations</span><br><span class="line">    api         Creates a Beego API application</span><br><span class="line">    bale        Transforms non-Go files to Go source files</span><br><span class="line">    fix         Fixes your application by making it compatible with newer versions of Beego</span><br><span class="line">    dlv         Start a debugging session using Delve</span><br><span class="line">    dockerize   Generates a Dockerfile for your Beego application</span><br><span class="line">    generate    Source code generator</span><br><span class="line">    hprose      Creates an RPC application based on Hprose and Beego frameworks</span><br><span class="line">    new         Creates a Beego application</span><br><span class="line">    pack        Compresses a Beego application into a single file</span><br><span class="line">    rs          Run customized scripts</span><br><span class="line">    run         Run the application by starting a local development server</span><br><span class="line">    server      serving static content over HTTP on port</span><br><span class="line"></span><br><span class="line">Use bee help [command] for more information about a command.</span><br><span class="line"></span><br><span class="line">ADDITIONAL HELP TOPICS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use bee help [topic] for more information about that topic.</span><br><span class="line">bee: Too many arguments.</span><br><span class="line">Use bee help for more information.</span><br></pre></td></tr></table></figure>

<h2 id="bee-new创建项目"><a href="#bee-new创建项目" class="headerlink" title="bee new创建项目"></a>bee new创建项目</h2><p>使用bee工具创建一个web项目，bee new是新建一个web项目。后面接的是想要命名的项目名称。E:\Go\go_project是我自己电脑的GOPATH路径。可见bee新建的项目是存放在GOPATH目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bee new beedemo</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_&#x2F; &#x2F;  ___   ___</span><br><span class="line">| ___ \ &#x2F; _ \ &#x2F; _ \</span><br><span class="line">| |_&#x2F; &#x2F;|  __&#x2F;|  __&#x2F;</span><br><span class="line">\____&#x2F;  \___| \___| v1.10.0</span><br><span class="line">2020&#x2F;08&#x2F;22 22:50:04 INFO     ▶ 0001 Creating application...</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\conf\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\controllers\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\models\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\routers\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\tests\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\js\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\css\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\img\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\views\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\conf\app.conf</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\controllers\default.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\views\index.tpl</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\routers\router.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\tests\default_test.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\main.go</span><br><span class="line">2020&#x2F;08&#x2F;22 22:50:04 SUCCESS  ▶ 0002 New application successfully created!</span><br></pre></td></tr></table></figure>

<p>bee新建的web项目的结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beedemo</span><br><span class="line">├── conf        &#x2F;&#x2F;存放配置文件</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers &#x2F;&#x2F;存放控制器</span><br><span class="line">│   └── default.go</span><br><span class="line">├── main.go    &#x2F;&#x2F;程序入口</span><br><span class="line">├── models     &#x2F;&#x2F;存放模型，即与数据库表关联的数据模型</span><br><span class="line">├── routers    &#x2F;&#x2F;存放路由，通过编写程序将请求路径路由到对应的控制器下的方法就行处理</span><br><span class="line">│   └── router.go</span><br><span class="line">├── static     &#x2F;&#x2F;存放静态文件，如css文件,图片,js文件</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">├── tests      &#x2F;&#x2F;测试</span><br><span class="line">│   └── default_test.go</span><br><span class="line">└── views      &#x2F;&#x2F;视图模板</span><br><span class="line">    └── index.tpl</span><br></pre></td></tr></table></figure>

<h2 id="bee-run运行项目"><a href="#bee-run运行项目" class="headerlink" title="bee run运行项目"></a>bee run运行项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\Go\go_project\src\beedemo&gt;bee run</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_&#x2F; &#x2F;  ___   ___</span><br><span class="line">| ___ \ &#x2F; _ \ &#x2F; _ \</span><br><span class="line">| |_&#x2F; &#x2F;|  __&#x2F;|  __&#x2F;</span><br><span class="line">\____&#x2F;  \___| \___| v1.10.0</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:09 INFO     ▶ 0001 Using &#39;beedemo&#39; as &#39;appname&#39;</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:09 INFO     ▶ 0002 Initializing watcher...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 SUCCESS  ▶ 0003 Built Successfully!</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 INFO     ▶ 0004 Restarting &#39;beedemo.exe&#39;...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 SUCCESS  ▶ 0005 &#39;.&#x2F;beedemo.exe&#39; is running...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12.494 [I] [asm_amd64.s:1357]  http server Running on http:&#x2F;&#x2F;:8080</span><br></pre></td></tr></table></figure>

<p>然后再去访问<a href="http://localhost:8080。就可以看到beego的欢迎页了。">http://localhost:8080。就可以看到beego的欢迎页了。</a></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/beego-welcome.jpg" alt=""></p>
<p>如果报错：missing dot in first path element。在项目下执行：go mod init。再去运行项目</p>
<h1 id="beego快速入门"><a href="#beego快速入门" class="headerlink" title="beego快速入门"></a>beego快速入门</h1><h2 id="项目路由设置"><a href="#项目路由设置" class="headerlink" title="项目路由设置"></a>项目路由设置</h2><p>main.go是整个项目的入口，那么就从main.go开始看</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	_ <span class="string">"beedemo/routers"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main函数是入口函数，go的执行流程又如下图所示：</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/init.png" alt=""></p>
<p>在通过bee生成的<code>main.go</code>文件中，导入了<code>routers</code>包，在<code>routers</code>包下有一个<code>router.go</code>文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"beedemo/controllers"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>init()</code>函数中注册了一个路由：<code>/</code>。路由包里面我们看到执行了路由注册 <code>beego.Router</code>, 这个函数的功能是映射 URL 到 controller，第一个参数是 URL (用户请求的地址)，这里我们注册的是 <code>/</code>，也就是我们访问的不带任何参数的 URL，第二个参数是对应的 Controller，也就是我们即将把请求分发到那个控制器来执行相应的逻辑，我们可以执行类似的方式注册如下路由：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">beego.Router(<span class="string">"/index"</span>,&amp;controller.IndexController&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>这样用户就可以通过访问 <code>/index</code> 去执行 <code>IndexController</code> 的逻辑。这就是我们所谓的路由，后面会介绍更多更复杂的路由规则。</p>
<p>再回来看看 main 函数里面的 <code>beego.Run</code>， <code>beego.Run</code> 执行之后，我们看到的效果好像只是监听服务端口这个过程，但是它内部做了很多事情：</p>
<ul>
<li><p>解析配置文件</p>
<p>beego 会自动解析在 conf 目录下面的配置文件 <code>app.conf</code>，通过修改配置文件相关的属性，我们可以定义：开启的端口，是否开启 session，应用名称等信息。</p>
</li>
<li><p>执行用户的 hookfunc</p>
<p>beego 会执行用户注册的 hookfunc，默认的已经存在了注册 mime，用户可以通过函数 <code>AddAPPStartHook</code> 注册自己的启动函数。</p>
</li>
<li><p>是否开启 session</p>
<p>会根据上面配置文件的分析之后判断是否开启 session，如果开启的话就初始化全局的 session。</p>
</li>
<li><p>是否编译模板</p>
<p>beego 会在启动的时候根据配置把 views 目录下的所有模板进行预编译，然后存在 map 里面，这样可以有效的提高模板运行的效率，无需进行多次编译。</p>
</li>
<li><p>是否开启文档功能</p>
<p>根据 EnableDocs 配置判断是否开启内置的文档路由功能</p>
</li>
<li><p>是否启动管理模块</p>
<p>beego 目前做了一个很酷的模块，应用内监控模块，会在 8088 端口做一个内部监听，我们可以通过这个端口查询到 QPS、CPU、内存、GC、goroutine、thread 等统计信息。</p>
</li>
<li><p>监听服务端口</p>
<p>这是最后一步也就是我们看到的访问 8080 看到的网页端口，内部其实调用了 <code>ListenAndServe</code>，充分利用了 goroutine 的优势</p>
</li>
</ul>
<p>一旦 run 起来之后，我们的服务就监听在两个端口了，一个服务端口 8080 作为对外服务，另一个 8088 端口实行对内监控。</p>
<p>通过这个代码的分析我们了解了 beego 运行起来的过程，以及内部的一些机制。接下来让我们去剥离 Controller 如何来处理逻辑的。</p>
<h2 id="controller控制器执行逻辑"><a href="#controller控制器执行逻辑" class="headerlink" title="controller控制器执行逻辑"></a>controller控制器执行逻辑</h2><p>在<code>router.go</code>中又引入了<code>controllers</code>包，下面有一个<code>default.go</code>文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c.Data[<span class="string">"Website"</span>] = <span class="string">"beego.me"</span></span><br><span class="line">	c.Data[<span class="string">"Email"</span>] = <span class="string">"astaxie@gmail.com"</span></span><br><span class="line">	c.TplName = <span class="string">"index.tpl"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码显示首先声明了一个控制器 <code>MainController</code>，这个控制器里面内嵌了 <code>beego.Controller</code>，这就是 Go 的嵌入方式，也就是 <code>MainController</code> 自动拥有了所有 <code>beego.Controller</code> 的方法。</p>
<p>而 <code>beego.Controller</code> 拥有很多方法，其中包括 <code>Init</code>、<code>Prepare</code>、<code>Post</code>、<code>Get</code>、<code>Delete</code>、<code>Head</code> 等方法。也可以通过重写的方式来实现这些方法，上面的代码就是重写了 <code>Get</code> 方法。</p>
<p>beego 是一个 RESTful 的框架，所以的请求默认是执行对应 <code>req.Method</code> 的方法。例如浏览器的是 <code>GET</code> 请求，那么默认就会执行 <code>MainController</code> 下的 <code>Get</code> 方法。这样上面的 Get 方法就会被执行到，这样就进入了逻辑处理。（后续将介绍自定义路由规则）里面的代码是需要执行的逻辑，这里只是简单的输出数据，可以通过各种方式获取数据，然后赋值到 <code>this.Data</code> 中，这是一个用来存储输出数据的 map，可以赋值任意类型的值，这里只是简单举例输出两个字符串。</p>
<p>最后一个就是需要去渲染的模板，<code>this.TplName</code> 就是需要渲染的模板，这里指定了 <code>index.tpl</code>，如果用户不设置该参数，那么默认会去到模板目录的 <code>Controller/&lt;方法名&gt;.tpl</code> 查找，例如上面的方法会去 <code>maincontroller/get.tpl</code> <strong>(文件、文件夹必须小写。beego框架规定的)</strong>。</p>
<p>用户设置了模板之后系统会自动的调用 <code>Render</code> 函数（这个函数是在 beego.Controller 中实现的），所以无需用户自己来调用渲染。</p>
<p>当然也可以不使用模版，直接用 <code>this.Ctx.WriteString</code> 输出字符串，如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	this.Ctx.WriteString(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此控制器分析基本完成了，接下来看一看如何来编写 model。</p>
<h2 id="model分析"><a href="#model分析" class="headerlink" title="model分析"></a>model分析</h2><p>Web 应用中用的最多的就是数据库操作，而 model 层一般用来做这些操作， <code>bee new</code> 例子不存在 Model 的演示，但是 <code>bee api</code> 应用中存在 model 的应用。其实如果一个应用足够简单，那么 Controller 可以处理一切的逻辑，如果逻辑里面存在着可以复用的东西，那么就抽取出来变成一个模块。因此 Model 就是逐步抽象的过程，一般会在 Model 里面处理一些数据读取，如下是一个日志分析应用中的代码片段：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"loggo/utils"</span></span><br><span class="line">    <span class="string">"path/filepath"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    NotPV []<span class="keyword">string</span> = []<span class="keyword">string</span>&#123;<span class="string">"css"</span>, <span class="string">"js"</span>, <span class="string">"class"</span>, <span class="string">"gif"</span>, <span class="string">"jpg"</span>, <span class="string">"jpeg"</span>, <span class="string">"png"</span>, <span class="string">"bmp"</span>, <span class="string">"ico"</span>, <span class="string">"rss"</span>, <span class="string">"xml"</span>, <span class="string">"swf"</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> big = <span class="number">0xFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LogPV</span><span class="params">(urls <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    ext := filepath.Ext(urls)</span><br><span class="line">    <span class="keyword">if</span> ext == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> NotPV &#123;</span><br><span class="line">        <span class="keyword">if</span> v == strings.ToLower(ext) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以应用足够简单，那么就不需要 Model 了；如果模块开始多了，需要复用，需要逻辑分离了，那么 Model 是必不可少的。接下来分析如何编写 View 层的东西。</p>
<h2 id="View层的编写"><a href="#View层的编写" class="headerlink" title="View层的编写"></a>View层的编写</h2><p>在前面编写 Controller 的时候，在MainController中的 Get方法 里面写过这样的语句 <code>this.TplName = &quot;index.tpl&quot;</code>，设置显示的模板文件，默认支持 <code>tpl</code> 和 <code>html</code> 的后缀名，如果想设置其他后缀可以调用 <code>beego.AddTemplateExt</code> 接口设置，那么模板如何来显示相应的数据呢？beego 采用了 Go 语言默认的模板引擎，所以和 Go 的模板语法一样，Go 模板的详细使用方法请参考<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.4.md" target="_blank" rel="noopener">《Go Web 编程》模板使用指南</a></p>
<p>在快速入门中beegodemo中创建的index.tpl里面的代码（<strong>去掉了 css 样式</strong>）：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Beego<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"hero-unit"</span> <span class="attr">style</span>=<span class="string">"background-color:#A9F16C"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero-text"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Beego!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">                            Beego is a simple &amp; powerful Go web framework which is inspired by tornado and sinatra.</span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                            Official website: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://&#123;&#123;.Website&#125;&#125;"</span>&gt;</span>&#123;&#123;.Website&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                            Contact me: &#123;&#123;.Email&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 Controller 里面把数据赋值给了 data（map 类型），然后我们在模板中就直接通过 key 访问 <code>.Website</code> 和 <code>.Email</code> 。这样就做到了数据的输出。接下来讲解如何让静态文件输出。</p>
<h2 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><p>前面介绍了如何输出静态页面，但是一个网页往往包含了很多的静态文件，包括图片、JS、CSS 等，bee工具创建的应用里面就创建了如下目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── static</span><br><span class="line">    │   ├── css</span><br><span class="line">    │   ├── img</span><br><span class="line">    │   └── js</span><br></pre></td></tr></table></figure>

<p>beego 默认注册了 static 目录为静态处理的目录，注册样式：URL 前缀和映射的目录（在/main.go文件中beego.Run()之前加入）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">StaticDir[&quot;&#x2F;static&quot;] &#x3D; &quot;static&quot;</span><br></pre></td></tr></table></figure>

<p>用户可以设置多个静态文件处理目录，例如你有多个文件下载目录 download1、download2，你可以这样映射（在 /main.go 文件中 beego.Run() 之前加入）。</p>
<p>例如：在static文件夹下新建download1和download2文件夹，并分别在这两个文件夹下创建文件123.txt和345.txt。里面的内容分别是”123”和345，在代码中注册静态文件夹和匹配的路径</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	_ <span class="string">"beedemo/routers"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	beego.SetStaticPath(<span class="string">"/down1"</span>,<span class="string">"static/download1"</span>)</span><br><span class="line">	beego.SetStaticPath(<span class="string">"/down2"</span>,<span class="string">"static/download2"</span>)</span><br><span class="line">	beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样访问 URL <code>http://localhost:8080/down1/123.txt</code> 则会请求 download1 目录下的 123.txt 文件。在浏览器上就会显示文件里面的内容。</p>
<h1 id="beego的MVC架构设计"><a href="#beego的MVC架构设计" class="headerlink" title="beego的MVC架构设计"></a>beego的MVC架构设计</h1><h2 id="执行逻辑图"><a href="#执行逻辑图" class="headerlink" title="执行逻辑图"></a>执行逻辑图</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/detail.png" alt=""></p>
<h2 id="执行流程分析"><a href="#执行流程分析" class="headerlink" title="执行流程分析"></a>执行流程分析</h2><ol>
<li>在监听的端口接收数据，默认监听在 8080 端口。</li>
<li>用户请求到达 8080 端口之后进入 beego 的处理逻辑。</li>
<li>初始化 Context 对象，根据请求判断是否为 WebSocket 请求，如果是的话设置 Input，同时判断请求的方法是否在标准请求方法中（GET、POST、PUT、DELETE、PATCH、OPTIONS、HEAD），防止用户的恶意伪造请求攻击造成不必要的影响。</li>
<li>执行 BeforeRouter 过滤器，当然在 beego 里面有开关设置。如果用户设置了过滤器，那么该开关打开，这样可以提高在没有开启过滤器的情况下提高执行效率。如果在执行过滤器过程中，responseWriter已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li>
<li>开始执行静态文件的处理，查看用户的请求 URL 是否和注册在静态文件处理 StaticDir 中的 prefix 是否匹配。如果匹配的话，采用 <code>http</code> 包中默认的 ServeFile 来处理静态文件。</li>
<li>如果不是静态文件开始初始化 session 模块(如果开启 session 的话)，这个里面大家需要注意，如果你的 BeforeRouter 过滤器用到了 session 就会报错，你应该把它加入到 AfterStatic 过滤器中。</li>
<li>开始执行 AfterStatic 过滤器，如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li>
<li>执行过过滤器之后，开始从固定的路由规则中查找和请求 URL 相匹配的对象。这个匹配是全匹配规则，即如果用户请求的 URL 是 <code>/hello/world</code>，那么固定规则中 <code>/hello</code> 是不会匹配的，只有完全匹配才算匹配。如果匹配的话就进入逻辑执行，如果不匹配进入下一环节的正则匹配。</li>
<li>正则匹配是进行正则的全匹配，这个正则是按照用户添加 beego 路由顺序来进行匹配的，也就是说，如果你在添加路由的时候你的顺序影响你的匹配。和固定匹配一样，如果匹配的话就进行逻辑执行，如果不匹配进入 Auto 匹配。</li>
<li>如果用户注册了 AutoRouter，那么会通过 <code>controller/method</code> 这样的方式去查找对应的 Controller 和他内置的方法，如果找到就开始执行逻辑，如果找不到就跳转到监控判断。</li>
<li>如果找到 Controller 的话，那么就开始执行逻辑，首先执行 BeforeExec 过滤器，如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li>
<li>Controller 开始执行 Init 函数，初始化基本的一些信息，这个函数一般都是 beego.Controller 的初始化，不建议用户继承的时候修改该函数。</li>
<li>是否开启了 XSRF，开启的话就调用 Controller 的 XsrfToken，然后如果是 POST 请求就调用 CheckXsrfCookie 方法。</li>
<li>继续执行 Controller 的 Prepare 函数，这个函数一般是预留给用户的，用来做 Controller 里面的一些参数初始化之类的工作。如果在初始化中 responseWriter 有输出，那么就直接进入 Finish 函数逻辑。</li>
<li>如果没有输出的话，那么根据用户注册的方法执行相应的逻辑，如果用户没有注册，那么就调用 http.Method 对应的方法（Get/Post 等）。执行相应的逻辑，例如数据读取，数据赋值，模板显示之类的，或者直接输出 JSON 或者 XML。</li>
<li>如果 responseWriter 没有输出，那么就调用 Render 函数进行模板输出。</li>
<li>执行 Controller 的 Finish 函数，这个函数是预留给用户用来重写的，用于释放一些资源。释放在 Init 中初始化的信息数据。</li>
<li>执行 AfterExec 过滤器，如果有输出的话就跳转到监控判断逻辑。</li>
<li>执行 Controller 的 Destructor，用于释放 Init 中初始化的一些数据。</li>
<li>如果这一路执行下来都没有找到路由，那么会调用 404 显示找不到该页面。</li>
<li>最后所有的逻辑都汇聚到了监控判断，如果用户开启了监控模块（默认是开启一个 8088 端口用于进程内监控），这样就会把访问的请求链接扔给监控程序去记录当前访问的 QPS，对应的链接访问的执行时间，请求链接等。</li>
</ol>
<p>接下来就让我们开始进入 beego 的 MVC 核心第一步，路由设置：</p>
<h2 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h2><p>beego 存在三种方式的路由:固定路由、正则路由、自动路由，接下来详细的讲解如何使用这三种路由。</p>
<h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><p>从 beego 1.2 版本开始支持了基本的 RESTful 函数式路由,应用中的大多数路由都会定义在 <code>routers/router.go</code> 文件中。最简单的 beego 路由由 URI 和闭包函数组成。</p>
<ol>
<li><p>基础路由Get,Post。通过postman用对应的HTTP请求去访问：<a href="http://localhost:8080/basic/get，http://localhost:8080/basic/get" target="_blank" rel="noopener">http://localhost:8080/basic/get，http://localhost:8080/basic/get</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego/context"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1.基础路由</span></span><br><span class="line">	beego.Get(<span class="string">"/basic/get"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">		ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router get"</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	beego.Post(<span class="string">"/basic/post"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">		ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router post"</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册一个可以响应任何 HTTP 的路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 1.基础路由</span></span><br><span class="line">	beego.Get(<span class="string">"/basic/get"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">		ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router get"</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	beego.Post(<span class="string">"/basic/post"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">		ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router post"</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="comment">// 2.注册一个可以响应任意HTTP请求的路由</span></span><br><span class="line">	beego.Any(<span class="string">"/basic/any"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">		ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router any"</span>))</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>beego所支持的基础函数如下</p>
</li>
</ol>
<ul>
<li>beego.Get(router, beego.FilterFunc)</li>
<li>beego.Post(router, beego.FilterFunc)</li>
<li>beego.Put(router, beego.FilterFunc)</li>
<li>beego.Patch(router, beego.FilterFunc)</li>
<li>beego.Head(router, beego.FilterFunc)</li>
<li>beego.Options(router, beego.FilterFunc)</li>
<li>beego.Delete(router, beego.FilterFunc)</li>
<li>beego.Any(router, beego.FilterFunc)</li>
</ul>
<ol start="4">
<li><p>自定义handler</p>
<p>有些时候项目中已经实现了一些 rpc 的应用,但是想要集成到 beego 中,或者其他的 httpserver 应用,集成到 beego 中来.现在可以很方便的集成</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := rpc.NewServer()</span><br><span class="line">s.RegisterCodec(json.NewCodec(), <span class="string">"application/json"</span>)</span><br><span class="line">s.RegisterService(<span class="built_in">new</span>(HelloService), <span class="string">""</span>)</span><br><span class="line">beego.Handler(<span class="string">"/rpc"</span>, s)</span><br></pre></td></tr></table></figure>

<p><code>beego.Handler(router, http.Handler)</code> 这个函数是关键,第一个参数表示路由 URI, 第二个就是你自己实现的 <code>http.Handler</code>, 注册之后就会把所有 rpc 作为前缀的请求分发到 <code>http.Handler</code> 中进行处理.</p>
<p>这个函数其实还有第三个参数就是是否是前缀匹配,默认是 false, 如果设置了 true, 那么就会在路由匹配的时候前缀匹配,即 <code>/rpc/user</code> 这样的也会匹配去运行</p>
</li>
<li><p>路由参数</p>
<p>在项目开发中通常是需要在请求中获取对应的参数，后面的固定路由，正则路由，这些参数一样适用于上面的这些函数</p>
</li>
</ol>
<h3 id="RESTful-Controller-路由"><a href="#RESTful-Controller-路由" class="headerlink" title="RESTful Controller 路由"></a>RESTful Controller 路由</h3><p> RESTful 是一种目前 API 开发中广泛采用的形式，beego 默认就是支持这样的请求方法，也就是用户 Get 请求就执行 Get 方法，Post 请求就执行 Post 方法。因此默认的路由是这样 RESTful 的请求方式。</p>
<h3 id="RESTful风格的固定路由"><a href="#RESTful风格的固定路由" class="headerlink" title="RESTful风格的固定路由"></a>RESTful风格的固定路由</h3><p>固定路由也就是全匹配的路由.</p>
<p>在<code>controllers</code>包下创建UserController、ArticleController和AddController.</p>
<p>UserController.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path:/admin UserController:Get"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ArticleController.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ArticleController <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ArticleController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path:/admin/addpkg ArticleController:Get"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AddController.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddController <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *AddController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path:/admin/index AddController:Get"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写完之后去路由进行注册，如下面所示的路由就是我们最常用的路由方式，一个固定的路由，一个控制器，然后根据用户请求方法不同请求控制器中对应的方法，典型的 RESTful 方式。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"beedemo/controllers"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">	<span class="string">"github.com/astaxie/beego/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// RESTful固定路由</span></span><br><span class="line">	beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">	beego.Router(<span class="string">"/admin"</span>, &amp;controllers.UserController&#123;&#125;)</span><br><span class="line">	beego.Router(<span class="string">"/admin/index"</span>, &amp;controllers.ArticleController&#123;&#125;)</span><br><span class="line">	beego.Router(<span class="string">"/admin/addpkg"</span>, &amp;controllers.AddController&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="正则路由"><a href="#正则路由" class="headerlink" title="正则路由"></a>正则路由</h3><p>为了用户更加方便的路由设置，beego 参考了 sinatra 的路由实现，支持多种方式的路由：</p>
<ul>
<li><p>beego.Router(“/api/?:id”, &amp;controllers.RController{})</p>
<p>默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”</p>
</li>
<li><p>beego.Router(“/api/:id”, &amp;controllers.RController{})</p>
<p>默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”，但URL”/api/“匹配失败</p>
</li>
<li><p>beego.Router(“/api/:id([0-9]+)” &amp;controllers.RController{})</p>
<p>自定义正则匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”</p>
</li>
<li><p>beego.Router(“/user/:username([\w]+)”, &amp;controllers.RController{})</p>
<p>正则字符串匹配 //例如对于URL”/user/astaxie”可以匹配成功，此时变量”:username”值为”astaxie”</p>
</li>
<li><p>beego.Router(“/download/<em>.</em>“, &amp;controllers.RController{})</p>
<p>*匹配方式 //例如对于URL”/download/file/api.xml”可以匹配成功，此时变量”:path”值为”file/api”， “:ext”值为”xml”</p>
</li>
<li><p>beego.Router(“/download/ceshi/*”, &amp;controllers.RController{})</p>
<p>*全匹配方式 //例如对于URL”/download/ceshi/file/api.json”可以匹配成功，此时变量”:splat”值为”file/api.json”</p>
</li>
<li><p>beego.Router(“/:id :int”, &amp;controllers.RController{})</p>
<p>int 类型设置方式，匹配 :id为int 类型，框架帮你实现了正则 ([0-9]+)</p>
</li>
<li><p>beego.Router(“/:hi:string”, &amp;controllers.RController{})</p>
<p>string 类型设置方式，匹配 :hi 为 string 类型。框架帮你实现了正则 ([\w]+)</p>
</li>
<li><p>beego.Router(“/cms_:id([0-9]+).html”, &amp;controllers.CmsController{})</p>
<p>带有前缀的自定义正则 //匹配 :id 为正则类型。匹配 cms_123.html 这样的 url :id = 123</p>
</li>
</ul>
<p>现在在<code>controllers</code>包下创建RController</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RController <span class="keyword">struct</span> &#123;</span><br><span class="line">	beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *RController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">	id := c.Ctx.Input.Param(<span class="string">":id"</span>)</span><br><span class="line">    <span class="comment">// 再响应回去</span></span><br><span class="line">	c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path param"</span>+id))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再<code>router.go</code>中注册正则路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">beego.Router(<span class="string">"/api/?:id"</span>, &amp;controllers.RController&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>postman访问<a href="http://localhost:8080/api/123，会返回&quot;path" target="_blank" rel="noopener">http://localhost:8080/api/123，会返回&quot;path</a> parma123”。说明路由匹配成功。当访问<a href="http://localhost:8080/api的时候路由也会匹配成功，页面返回了&quot;path" target="_blank" rel="noopener">http://localhost:8080/api的时候路由也会匹配成功，页面返回了&quot;path</a> param”，就是参数为空。</p>
<p>现在把路由的匹配换成一下进行注册，然后再分别请求访问<a href="http://localhost:8080/api/123和http://localhost:8080/api。前者会匹配成功，页面返回了&quot;path" target="_blank" rel="noopener">http://localhost:8080/api/123和http://localhost:8080/api。前者会匹配成功，页面返回了&quot;path</a> param123”。后者会出现404页面，路由匹配失败。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">beego.Router(<span class="string">"/api/:id"</span>, &amp;controllers.RController&#123;&#125;)</span><br></pre></td></tr></table></figure>



<p>“/api/:id([0-9]+)”和”/user/:username([\w]+)”，其实从正则表达式就可以看得出来，前者是只匹配数字，后者只匹配字符。修改UserController</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">	username := c.Ctx.Input.Param(<span class="string">":username"</span>)</span><br><span class="line">	<span class="comment">//c.Ctx.Output.Body([]byte("path:/admin UserController:Get"))</span></span><br><span class="line">	c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path param username:"</span> + username))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">beego.Router(<span class="string">"/api/:id([0-9]+)"</span>, &amp;controllers.RController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/user/:username([\\w]+)"</span>, &amp;controllers.UserController&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>访问测试<a href="http://localhost:8080/api/123和http://localhost:8080/api/kkk。前者会匹配成功，页面返回&quot;path" target="_blank" rel="noopener">http://localhost:8080/api/123和http://localhost:8080/api/kkk。前者会匹配成功，页面返回&quot;path</a> param id:123” ，后者访问会404。<a href="http://localhost:8080/user/123和http://localhost:8080/user/kkk。这两个路径都会成功匹配并路由到UserController的Get方法。" target="_blank" rel="noopener">http://localhost:8080/user/123和http://localhost:8080/user/kkk。这两个路径都会成功匹配并路由到UserController的Get方法。</a></p>
<h2 id="控制器函数"><a href="#控制器函数" class="headerlink" title="控制器函数"></a>控制器函数</h2><h2 id="xsrf-过滤"><a href="#xsrf-过滤" class="headerlink" title="xsrf 过滤"></a>xsrf 过滤</h2><h2 id="session-控制"><a href="#session-控制" class="headerlink" title="session 控制"></a>session 控制</h2><h2 id="flash-数据"><a href="#flash-数据" class="headerlink" title="flash 数据"></a>flash 数据</h2><h2 id="请求数据处理"><a href="#请求数据处理" class="headerlink" title="请求数据处理"></a>请求数据处理</h2><h2 id="多种格式数据输出"><a href="#多种格式数据输出" class="headerlink" title="多种格式数据输出"></a>多种格式数据输出</h2><h2 id="表单数据验证"><a href="#表单数据验证" class="headerlink" title="表单数据验证"></a>表单数据验证</h2><h2 id="模板输出"><a href="#模板输出" class="headerlink" title="模板输出"></a>模板输出</h2><h2 id="模板函数"><a href="#模板函数" class="headerlink" title="模板函数"></a>模板函数</h2><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h2 id="静态文件处理-1"><a href="#静态文件处理-1" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><h1 id="TODO更新中…"><a href="#TODO更新中…" class="headerlink" title="TODO更新中…"></a>TODO更新中…</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>GoWeb</tag>
        <tag>Beego</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库中间件ShardingSphere</title>
    <url>/posts/middleware/2020/06/202006261803.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是ShardingSphere？"><a href="#什么是ShardingSphere？" class="headerlink" title="什么是ShardingSphere？"></a>什么是ShardingSphere？</h1><p>Apache ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款相互独立，却又能够混合部署配合使用的产品组成。 它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p>
<p>Apache ShardingSphere 定位为关系型数据库中间件，旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 它通过关注不变，进而抓住事物本质。关系型数据库当今依然占有巨大市场，是各个公司核心业务的基石，未来也难于撼动，我们目前阶段更加关注在原有基础上的增量，而非颠覆。</p>
<p><strong>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目</strong>。</p>
<p>官网：<a href="http://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noopener">http://shardingsphere.apache.org/index_zh.html</a></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/shardingsphere-scope.png" alt=""></p>
<h1 id="Sharding-JDBC简介"><a href="#Sharding-JDBC简介" class="headerlink" title="Sharding-JDBC简介"></a>Sharding-JDBC简介</h1><p>定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p>
<ul>
<li>适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</li>
<li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</li>
<li>支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</li>
<li><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-jdbc-brief.png" alt=""></li>
</ul>
<h1 id="Sharding-Proxy简介"><a href="#Sharding-Proxy简介" class="headerlink" title="Sharding-Proxy简介"></a>Sharding-Proxy简介</h1><p>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供MySQL/PostgreSQL版本，它可以使用任何兼容MySQL/PostgreSQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench, Navicat等)操作数据，对DBA更加友好。</p>
<ul>
<li>向应用程序完全透明，可直接当做MySQL/PostgreSQL使用。</li>
<li>适用于任何兼容MySQL/PostgreSQL协议的的客户端。</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-proxy-brief_v2.png" alt=""></p>
<p>由此可见，使用了Sharding-Proxy之后，我们的操作都是去操作Sharding-Proxy不需要去操作MySQL，相当于我们发送SQL操作，让这个代理去操作数据库。</p>
<h1 id="Sharding-Sidecar简介（开发中）"><a href="#Sharding-Sidecar简介（开发中）" class="headerlink" title="Sharding-Sidecar简介（开发中）"></a>Sharding-Sidecar简介（开发中）</h1><p>定位为Kubernetes的云原生数据库代理，以Sidecar的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的的啮合层，即Database Mesh，又可称数据网格。</p>
<p>Database Mesh的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互有效的梳理。使用Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-sidecar-brief_v2.png" alt=""></p>
<h1 id="Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比"><a href="#Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比" class="headerlink" title="Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比"></a>Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比</h1><table>
<thead>
<tr>
<th align="left"></th>
<th align="left"><em>Sharding-JDBC</em></th>
<th align="left"><em>Sharding-Proxy</em></th>
<th><em>Sharding-Sidecar</em></th>
</tr>
</thead>
<tbody><tr>
<td align="left">数据库</td>
<td align="left">任意</td>
<td align="left">MySQL</td>
<td>MySQL</td>
</tr>
<tr>
<td align="left">连接消耗数</td>
<td align="left">高</td>
<td align="left">低</td>
<td>高</td>
</tr>
<tr>
<td align="left">异构语言</td>
<td align="left">仅Java</td>
<td align="left">任意</td>
<td>任意</td>
</tr>
<tr>
<td align="left">性能</td>
<td align="left">损耗低</td>
<td align="left">损耗略高</td>
<td>损耗低</td>
</tr>
<tr>
<td align="left">无中心化</td>
<td align="left">是</td>
<td align="left">否</td>
<td>是</td>
</tr>
<tr>
<td align="left">静态入口</td>
<td align="left">无</td>
<td align="left">有</td>
<td>无</td>
</tr>
</tbody></table>
<h1 id="混合搭配使用"><a href="#混合搭配使用" class="headerlink" title="混合搭配使用"></a>混合搭配使用</h1><p>Sharding-JDBC采用无中心化架构，适用于Java开发的高性能的轻量级OLTP应用；Sharding-Proxy提供静态入口以及异构语言的支持，适用于OLAP应用以及对分片数据库进行管理和运维的场景。</p>
<p>ShardingSphere是多接入端共同组成的生态圈。 通过混合使用Sharding-JDBC和Sharding-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，架构师可以更加自由的调整适合于当前业务的最佳系统架构。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/shardingsphere-hybrid.png" alt=""></p>
<h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><p>数据库中的数据量不一定是可控的，在未进行分库分表的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作，增删改查的开销 也会越来越大；另外由于无法进行分布式式部署，而一台服务器的资源（CPU、磁盘、内<br>存、IO 等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p>
<p>分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题，将原来独立的数据库拆分成若干数据库组成，将数据大表拆分成若干数据表组成，使得单一数据库、单一数 据表的数据量变小，从而达到提升数据库性能的目的。</p>
<p>数据库的切分指的是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主机）中，以达到分散单台设备负载的效果，即分库分表。数据的切分根据其切分规则的类型，可以分为 垂直切分 和水平切分。</p>
<h2 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h2><p>垂直切分： 把单一的表拆分成多个表，并分散到不同的数据库（主机）上。  </p>
<p>一个数据库有多个表构成，每个表对应不同的业务，垂直切分是只按照业务将表进行分类， </p>
<p>将其分布到不同的数据库上，这样就将数据分担到了不同的库上（专库专用）。  </p>
<p>例如：  </p>
<p>有如下几张表：  </p>
<ul>
<li>用户信息表（User）  </li>
<li>课程信息表（Courses ）  </li>
<li>订单信息表（Orders ）  </li>
<li>针对以上案例，垂直切分就是根据每个表的不同业务进行切分。  </li>
<li>比如 User 表，Courses 表和 Orders 表，将每个表切分到不同的数据库上。  </li>
</ul>
<p><strong>垂直切分的优点：</strong></p>
<p> （1）拆分后业务清晰，系统之间进行整合或扩展很容易。  </p>
<p> （2）按照成本、应用的等级、应用的类型等奖表放到不同的机器上，便于管理，数据维护简单。  </p>
<p><strong>垂直切分的缺点：</strong>  </p>
<p> （1）部分业务表无法关联(Join), 只能通过接口方式解决，提高了系统的复杂度。  </p>
<p> （2）受每种业务的不同限制，存在单库性能瓶颈，不易进行数据扩展和提升性能。  </p>
<p> （3）事务处理变得复杂。  </p>
<p><strong>垂直分表：</strong></p>
<p>例如：课程表中含有多个字段，我们可以通过垂直分表，把一些属性进行拆分。这样假如对“课程名称”进行修改，只会锁定“课程基本信息表”，同时对于一个表的访问变成了两个表的访问，业务复杂度也会相对上升。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/cz1.png" alt=""></p>
<p><strong>垂直分库：</strong></p>
<p>根据不同的业务，专门建立一个数据库来存储业务相关的表。例如在”商品表“专门建立一个”商品数据库“，”订单表“建立一个“订单数据库”，分库之后，同时也可以对商品表进行分表的。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/czfk.png" alt=""></p>
<h2 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h2><p>水平切分：根据表中数据的逻辑关系，将表中的数据按照某种条件拆分到多台数据库上。  </p>
<p>与垂直切分对比，水平切分不是将表进行分类，而是将其按照某个字段的某种规则分散到多个库中，在每个表中包含一部分数据，所有表加起来就是全量的数据。  </p>
<p>简单来说，我们可以将对数据的水平切分理解为按照数据行进行切分，就是将表中的某些行切分到一个数据库表中，而将其他行切分到其他数据库表中。这种切分方式根据单表的数据量的规模来切分，保证单表的容量不会太大，从而保证了单表的查询等处理能力  </p>
<p>例如将用户的信息表拆分成 User1、User2 等，表结构是完全一样的。我们通常根据某些特定的规则来划分表，比如根据用户的 ID 来取模划分。  </p>
<p><strong>举例：</strong></p>
<p>在博客类系统中，读取量一般都会很大。当同时有 100 万个用户在浏览时，如果是单表,则单表会进行 100 万次请求，如果是单库，数据库就会承受 100 万次的请求压力。  如果采取水平切分来减少每个单表的压力，将其分为 100 个表，并且分布在 10 个数据库 中，每个表进行 1 万次请求，则每个数据库会承受 10 万次的请求压力，虽然这不可能绝对平均，但是这样，压力就减少了很多，并且是成倍减少的。  </p>
<p><strong>水平切分的优点：</strong></p>
<p> （1）单库单表的数据保持在一定的量级，有助于性能的提高。  </p>
<p> （2）切分的表的结构相同，应用层改造较少，只需要增加路由规则即可。  </p>
<p> （3）提高了系统的稳定性和负载能力。  </p>
<p><strong>水平切分的缺点：</strong></p>
<p> （1）切分后，数据是分散的，很难利用数据库的Join 操作，跨库 Join 性能较差。  </p>
<p> （2）分片事务的一致性难以解决，数据扩容的难度和维护量极大。</p>
<p><strong>水平分表：</strong></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/spfb.png" alt=""></p>
<p><strong>水平分库：</strong></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/spfk.png" alt=""></p>
<h1 id="分库分表的应用和问题"><a href="#分库分表的应用和问题" class="headerlink" title="分库分表的应用和问题"></a>分库分表的应用和问题</h1><p>应用：</p>
<ul>
<li>在数据设计时可以考虑垂直分库和垂直分表</li>
<li>随着数据库数据量的增加，不要马上考虑水平切分，首先考虑使用如引入缓存处理、读写分离、使用数据库索引优化等方式，如果这些方式都不能根本解决问题，再考虑水平分库和水平分表。</li>
</ul>
<p>问题：</p>
<ul>
<li>跨界点连接查询(join查询)问题</li>
<li>多数据源管理问题</li>
</ul>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>1、环境：SpringBoot2.2.2+MyBatis-Plus+Sharding-JDBC+Druid</p>
<p>创建父工程，Maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ShardingSphere-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Sharding-jdbc-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Sharding-Proxy-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Sharding-jdbc-demo的maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/sharding-jdbc-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-namespace<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、按照水平分表的方式，创建数据库和数据库表</p>
<p>（1）创建数据库course_db</p>
<p>（2）在数据库创建两张表 course_1 和 course_2</p>
<p>（3）约定规则：如果添加课程id 是偶数把数据添加course_1，如果奇数添加到course_2  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test;</span><br><span class="line">USE test;</span><br><span class="line">DROP TABLE IF EXISTS &#96;course_1&#96;;</span><br><span class="line">CREATE TABLE &#96;course_1&#96;  (</span><br><span class="line">  &#96;course_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  &#96;user_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_status&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;course_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;course_2&#96;;</span><br><span class="line">CREATE TABLE &#96;course_2&#96;  (</span><br><span class="line">  &#96;course_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  &#96;user_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_status&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;course_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h1 id="Sharding-JDBC实现水平分表"><a href="#Sharding-JDBC实现水平分表" class="headerlink" title="Sharding-JDBC实现水平分表"></a>Sharding-JDBC实现水平分表</h1><p>1.编写application.yml配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">XXX</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>2.简单编写mapper、controller、ShardingJdbcApplication启动类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseMapper courseMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@RequestBody Course course)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insert = courseMapper.insert(course);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">queryById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> courseMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.msr.shardingjdbc.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingJdbcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ShardingJdbcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.测试</p>
<p>使用PostMan调用add方法，添加成功之后，查看控制台输出的日志，course_id为奇数。保存在course2表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 2700 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds0 ::: INSERT INTO course_2   (course_name, user_id, course_status, course_id) VALUES (?, ?, ?, ?) ::: [docker入门到实践, 100, 1, 483626785309720577]</span><br></pre></td></tr></table></figure>

<p>使用“483626785309720577”再去调用queryById方法，查看日志输出，确实是去course2表中查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 10220 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds0 ::: SELECT course_id,course_name,user_id,course_status FROM course_2 WHERE course_id&#x3D;? ::: [483626785309720577]</span><br></pre></td></tr></table></figure>

<h1 id="Sharding-JDBC实现水平分库"><a href="#Sharding-JDBC实现水平分库" class="headerlink" title="Sharding-JDBC实现水平分库"></a>Sharding-JDBC实现水平分库</h1><p>1.修改配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test2?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0，ds1中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>2.水平分库的策略</p>
<p>根据user_id去分库，当user_id为偶数时，数据添加进数据源ds1中，奇数则是路由到数据源ds2</p>
<p>3.测试</p>
<p>启动的时候，通过日志可以看出，两个数据源都已经完成初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 14796 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 14796 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br></pre></td></tr></table></figure>

<p>使用PostMan调用add方法，添加成功之后，查看控制台输出的日志。course_id=1276767761787297794，user_id=10。课程id为偶数，user_id也为偶数。所以数据会被保存在数据源ds1中的course1表中。对比日志，说明水平分库分表的策略是成功的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 8684 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO course_1   (course_id, course_name, user_id, course_status) VALUES (?, ?, ?, ?) ::: [1276767761787297794, docker入门到实践, 10, 1]</span><br></pre></td></tr></table></figure>

<p>然后试一下查询，使用user_id和course_id作用查询条件。controller新增一个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"query/&#123;uid&#125;/&#123;cid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Course <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"uid"</span>)</span> Long uid, @<span class="title">PathVariable</span><span class="params">(<span class="string">"cid"</span>)</span> Long cid) </span>&#123;</span><br><span class="line">	QueryWrapper&lt;Course&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.lambda()</span><br><span class="line">    			.eq(uid != <span class="keyword">null</span>, Course::getUserId, uid)</span><br><span class="line">                .eq(cid != <span class="keyword">null</span>, Course::getCourseId, cid);java</span><br><span class="line">    <span class="keyword">return</span> courseMapper.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用PostMan调用（uid=10，cid=1276767761787297794）查看结果：sql查询确实是会路由到ds1下的course1表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[nio-8080-exec-2] ShardingSphere-SQL                       : Actual SQL: ds1 ::: SELECT  course_id,course_name,user_id,course_status  FROM course_1 WHERE  user_id &#x3D; ? AND course_id &#x3D; ? ::: [10, 1276767761787297794]</span><br></pre></td></tr></table></figure>

<h1 id="Sharding-JDBC实现垂直切分"><a href="#Sharding-JDBC实现垂直切分" class="headerlink" title="Sharding-JDBC实现垂直切分"></a>Sharding-JDBC实现垂直切分</h1><p>通过Sharding-JDBC进行垂直分库，实现专库专表。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/czfk.png" alt=""></p>
<p>1.新建两个数据库和两张表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE production_db;</span><br><span class="line">USE production_db;</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_production&#96;;</span><br><span class="line">CREATE TABLE &#96;t_production&#96;  (</span><br><span class="line">  &#96;pid&#96; bigint(50) NOT NULL,</span><br><span class="line">  &#96;pname&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;price&#96; int(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;pid&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE order_db;</span><br><span class="line">USE order_db;</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_order&#96;;</span><br><span class="line">CREATE TABLE &#96;t_order&#96;  (</span><br><span class="line">  &#96;order_id&#96; bigint(50) NOT NULL,</span><br><span class="line">  &#96;order_name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;create_time&#96; TIMESTAMP NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;order_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>2.编写相关的实体类，Mapper、测试的Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_production"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductionMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Production</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductionMapper productionMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add2</span><span class="params">(@RequestBody Order order)</span> </span>&#123;</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">int</span> insert = orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add3</span><span class="params">(@RequestBody Production production)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insert = productionMapper.insert(production);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.yml配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds1,ds2,ds3,ds4</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test2?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">	<span class="comment">#垂直分库的数据源</span></span><br><span class="line">      <span class="attr">ds3:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/production_db?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds4:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/order_db?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0，ds1中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">          <span class="comment">#数据库分片策略</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">		<span class="comment">#专库</span></span><br><span class="line">        <span class="attr">production:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;3&#125;.t_production</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">pid</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">pid</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_production</span></span><br><span class="line">        <span class="attr">order:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;4&#125;.t_order</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_order</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>4.测试</p>
<p>启动，四个数据源都已经初始化了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-3&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-4&#125; inited</span><br></pre></td></tr></table></figure>

<p>通过PostMan调用controller方法进行测试，sql日志如下所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 13384 --- [nio-8080-exec-2] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO t_production   (pid, pname, price) VALUES (?, ?, ?) ::: [1277152899687895042, 小米10pro, 2999]</span><br><span class="line"></span><br><span class="line">INFO 13384 --- [nio-8080-exec-5] ShardingSphere-SQL                       : Actual SQL: ds2 ::: INSERT INTO t_order   (order_id, order_name, create_time) VALUES (?, ?, ?) ::: [1277153290127265794, 小米10pro-24期免息, 2020-06-28 16:14:07.384]</span><br></pre></td></tr></table></figure>

<h1 id="Sharding-JDBC实现读写分离"><a href="#Sharding-JDBC实现读写分离" class="headerlink" title="Sharding-JDBC实现读写分离"></a>Sharding-JDBC实现读写分离</h1><p><a href="http://www.maishuren.top/posts/mysql/202006281626-index.html">配置MySQL主从复制(一主一从)</a></p>
<p>在TestController新增一个查询方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"order/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> orderMapper.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>yml配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">m0,s0</span></span><br><span class="line"><span class="comment"># 主服务器数据源</span></span><br><span class="line">    <span class="attr">m0:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.74.129:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#从服务器数据源</span></span><br><span class="line">    <span class="attr">s0:</span></span><br><span class="line">	  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.74.130:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">	<span class="attr">masterslave:</span></span><br><span class="line">	  <span class="attr">name:</span> <span class="string">ms</span></span><br><span class="line"><span class="comment">#主库和从库逻辑数据源定义：ds0</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">master-slave-rules:</span> </span><br><span class="line">        <span class="attr">ds0:</span> </span><br><span class="line">          <span class="attr">master-data-source-name:</span> <span class="string">m0</span></span><br><span class="line">      <span class="attr">master-slave-rules:</span></span><br><span class="line">        <span class="attr">ds0:</span></span><br><span class="line">          <span class="attr">slave-data-source-names:</span> <span class="string">s0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t_user 分表策略，固定分配至ds0 的t_user 真实表</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">       <span class="attr">t_user:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.t_order</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span> </span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>启动工程，可以看到m0和s0两个数据源初始化完毕</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 2616 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 2616 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br></pre></td></tr></table></figure>

<p>使用PostMan调用方法add2，执行写操作是在m0即主库中操作的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 2616 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: m0 ::: INSERT INTO t_order   (order_id, order_name, create_time) VALUES (?, ?, ?) ::: [1277540210028154881, 红米K30-24期免息, 2020-06-29 17:51:36.081]</span><br></pre></td></tr></table></figure>

<p>调用getOrder方法时，执行读操作是在s0即从库中操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 5188 --- [nio-8080-exec-4] ShardingSphere-SQL                       : Actual SQL: s0 ::: SELECT order_id,order_name,create_time FROM t_order WHERE order_id&#x3D;? ::: [1277540210028154881]</span><br></pre></td></tr></table></figure>

<p>因为MySQL配置是一主一从，在配置了一主多从的时候，只需要把数据源都配置之后，然后加入一下配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.shardingsphere.masterslave.name</span>=<span class="string">ms</span></span><br><span class="line"><span class="comment">#负载均衡策略</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.load-balance-algorithm-type</span>=<span class="string">round_robin</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.master-data-source-name</span>=<span class="string">master</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.slave-data-source-names</span>=<span class="string">slave0,slave1</span></span><br></pre></td></tr></table></figure>

<h1 id="Sharding-Proxy的使用"><a href="#Sharding-Proxy的使用" class="headerlink" title="Sharding-Proxy的使用"></a>Sharding-Proxy的使用</h1><p>下载安装：<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/downloads/" target="_blank" rel="noopener">官网下载地址：4.x版本</a>，下载压缩包解压缩使用就行。</p>
<p>使用Docker安装，直接使用官方的镜像即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull apache&#x2F;sharding-proxy</span><br></pre></td></tr></table></figure>

<p>运行镜像生成容器，必须挂载配置路径到/opt/sharding-proxy/conf，在/opt/software/sharding/lib存放一个MySQL的连接驱动，Sharding-Proxy连接MySQL时用到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name sharding-proxy -di -v &#x2F;opt&#x2F;software&#x2F;sharding&#x2F;conf:&#x2F;opt&#x2F;sharding-proxy&#x2F;conf -v &#x2F;opt&#x2F;software&#x2F;sharding&#x2F;lib:&#x2F;opt&#x2F;sharding-proxy&#x2F;ext-lib -e PORT&#x3D;3308 -p13308:3308 apache&#x2F;sharding-proxy:latest</span><br></pre></td></tr></table></figure>

<p>修改conf里的配置文件</p>
<p>server.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># If you want to configure orchestration, authorization and proxy properties, please refer to this file.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># orchestration:</span></span><br><span class="line"><span class="comment">#  orchestration_ds:</span></span><br><span class="line"><span class="comment">#    orchestrationType: registry_center,config_center,distributed_lock_manager</span></span><br><span class="line"><span class="comment">#    instanceType: zookeeper</span></span><br><span class="line"><span class="comment">#    serverLists: localhost:2181</span></span><br><span class="line"><span class="comment">#    namespace: orchestration</span></span><br><span class="line"><span class="comment">#    props:</span></span><br><span class="line"><span class="comment">#      overwrite: false</span></span><br><span class="line"><span class="comment">#      retryIntervalMilliseconds: 500</span></span><br><span class="line"><span class="comment">#      timeToLiveSeconds: 60</span></span><br><span class="line"><span class="comment">#      maxRetries: 3</span></span><br><span class="line"><span class="comment">#      operationTimeoutMilliseconds: 500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line"> <span class="attr">users:</span></span><br><span class="line">   <span class="attr">root:</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">   <span class="attr">sharding:</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">sharding</span> </span><br><span class="line">     <span class="attr">authorizedSchemas:</span> <span class="string">sharding_db</span></span><br><span class="line"><span class="string">yml</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line"> <span class="attr">max.connections.size.per.query:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">acceptor.size:</span> <span class="number">16</span>  <span class="comment"># The default value is available processors count * 2.</span></span><br><span class="line"> <span class="attr">executor.size:</span> <span class="number">16</span>  <span class="comment"># Infinite by default.</span></span><br><span class="line"> <span class="attr">proxy.frontend.flush.threshold:</span> <span class="number">128</span>  <span class="comment"># The default value is 128.</span></span><br><span class="line">   <span class="comment"># LOCAL: Proxy will run with LOCAL transaction.</span></span><br><span class="line">   <span class="comment"># XA: Proxy will run with XA transaction.</span></span><br><span class="line">   <span class="comment"># BASE: Proxy will run with B.A.S.E transaction.</span></span><br><span class="line"> <span class="attr">proxy.transaction.type:</span> <span class="string">LOCAL</span></span><br><span class="line"> <span class="attr">proxy.opentracing.enabled:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">proxy.hint.enabled:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">query.with.cipher.column:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">sql.show:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">allow.range.query.with.inline.sharding:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>config-sharding.yml：配置数据分片策略。在配置文件中有两个数据库的配置：postgresql和MySQL，使用MySQL需要添加mysql的驱动包到lib，在Docker部署Sharding-Proxy容器的时候就已经添加了该jar包。配置和之前Sharding-JDBC的一些配置相似</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">######################################################################################################</span><br><span class="line">#</span><br><span class="line"># If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.</span><br><span class="line">#</span><br><span class="line">######################################################################################################</span><br><span class="line"></span><br><span class="line">schemaName: sharding_db</span><br><span class="line"></span><br><span class="line">dataSources:</span><br><span class="line"> ds_0:</span><br><span class="line">   url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;demo_ds_0?serverTimezone&#x3D;UTC&amp;useSSL&#x3D;false</span><br><span class="line">   username: root</span><br><span class="line">   password:</span><br><span class="line">   connectionTimeoutMilliseconds: 30000</span><br><span class="line">   idleTimeoutMilliseconds: 60000</span><br><span class="line">   maxLifetimeMilliseconds: 1800000</span><br><span class="line">   maxPoolSize: 50</span><br><span class="line"> ds_1:</span><br><span class="line">   url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;demo_ds_1?serverTimezone&#x3D;UTC&amp;useSSL&#x3D;false</span><br><span class="line">   username: root</span><br><span class="line">   password:</span><br><span class="line">   connectionTimeoutMilliseconds: 30000</span><br><span class="line">   idleTimeoutMilliseconds: 60000</span><br><span class="line">   maxLifetimeMilliseconds: 1800000</span><br><span class="line">   maxPoolSize: 50</span><br><span class="line"></span><br><span class="line">shardingRule:</span><br><span class="line"> tables:</span><br><span class="line">   t_order:</span><br><span class="line">     actualDataNodes: ds_$&#123;0..1&#125;.t_order_$&#123;0..1&#125;</span><br><span class="line">     tableStrategy:</span><br><span class="line">       inline:</span><br><span class="line">         shardingColumn: order_id</span><br><span class="line">         algorithmExpression: t_order_$&#123;order_id % 2&#125;</span><br><span class="line">     keyGenerator:</span><br><span class="line">       type: SNOWFLAKE</span><br><span class="line">       column: order_id</span><br><span class="line">   t_order_item:</span><br><span class="line">     actualDataNodes: ds_$&#123;0..1&#125;.t_order_item_$&#123;0..1&#125;</span><br><span class="line">     tableStrategy:</span><br><span class="line">       inline:</span><br><span class="line">         shardingColumn: order_id</span><br><span class="line">         algorithmExpression: t_order_item_$&#123;order_id % 2&#125;</span><br><span class="line">     keyGenerator:</span><br><span class="line">       type: SNOWFLAKE</span><br><span class="line">       column: order_item_id</span><br><span class="line"> bindingTables:</span><br><span class="line">   - t_order,t_order_item</span><br><span class="line"> defaultDatabaseStrategy:</span><br><span class="line">   inline:</span><br><span class="line">     shardingColumn: user_id</span><br><span class="line">     algorithmExpression: ds_$&#123;user_id % 2&#125;</span><br><span class="line"> defaultTableStrategy:</span><br><span class="line">   none:</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>ShardingSphere</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据之hadoop：hadoop入门</title>
    <url>/posts/hadoop/2020/06/202006132303.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hadoop是什么？"><a href="#Hadoop是什么？" class="headerlink" title="Hadoop是什么？"></a>Hadoop是什么？</h1><p>1）hadoop是由Apache基金会所开发的分布式系统基础架构</p>
<p>2）主要解决海量数据的存储和海量数据的分析计算问题</p>
<p>3）广义来说，hadoop通常是之一个更广泛的概念—hadoop生态圈</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop1.jpg" alt=""></p>
<h1 id="Hadoop三大发行版本"><a href="#Hadoop三大发行版本" class="headerlink" title="Hadoop三大发行版本"></a>Hadoop三大发行版本</h1><p>Hadoop三大发行版本：Apache、Cloudera、Hortonworks。</p>
<p>Apache版本最原始（最基础）的版本，对于入门学习最好。</p>
<p>Cloudera在大型互联网企业中用的较多。</p>
<p>Hortonworks文档较好。</p>
<ol>
<li>Apache Hadoop</li>
</ol>
<p>官网地址：<a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">http://hadoop.apache.org/releases.html</a></p>
<p>下载地址：<a href="https://archive.apache.org/dist/hadoop/common/" target="_blank" rel="noopener">https://archive.apache.org/dist/hadoop/common/</a></p>
<ol start="2">
<li>Cloudera Hadoop </li>
</ol>
<p>官网地址：<a href="https://www.cloudera.com/downloads/cdh/5-10-0.html" target="_blank" rel="noopener">https://www.cloudera.com/downloads/cdh/5-10-0.html</a></p>
<p>下载地址：<a href="http://archive-primary.cloudera.com/cdh5/cdh/5/" target="_blank" rel="noopener">http://archive-primary.cloudera.com/cdh5/cdh/5/</a></p>
<p>（1）2008年成立的Cloudera是最早将Hadoop商用的公司，为合作伙伴提供Hadoop的商用解决方案，主要是包括支持、咨询服务、培训。</p>
<p>（2）2009年Hadoop的创始人Doug Cutting也加盟Cloudera公司。Cloudera产品主要为CDH，Cloudera Manager，Cloudera Support</p>
<p>（3）CDH是Cloudera的Hadoop发行版，完全开源，比Apache Hadoop在兼容性，安全性，稳定性上有所增强。</p>
<p>（4）Cloudera Manager是集群的软件分发及管理监控平台，可以在几个小时内部署好一个Hadoop集群，并对集群的节点及服务进行实时监控。Cloudera Support即是对Hadoop的技术支持。</p>
<p>（5）Cloudera的标价为每年每个节点4000美元。Cloudera开发并贡献了可实时处理大数据的Impala项目。</p>
<ol start="3">
<li>Hortonworks Hadoop</li>
</ol>
<p>官网地址：<a href="https://hortonworks.com/products/data-center/hdp/" target="_blank" rel="noopener">https://hortonworks.com/products/data-center/hdp/</a></p>
<p>下载地址：<a href="https://hortonworks.com/downloads/#data-platform" target="_blank" rel="noopener">https://hortonworks.com/downloads/#data-platform</a></p>
<p>（1）2011年成立的Hortonworks是雅虎与硅谷风投公司Benchmark Capital合资组建。</p>
<p>（2）公司成立之初就吸纳了大约25名至30名专门研究Hadoop的雅虎工程师，上述工程师均在2005年开始协助雅虎开发Hadoop，贡献了Hadoop80%的代码。</p>
<p>（3）雅虎工程副总裁、雅虎Hadoop开发团队负责人Eric Baldeschwieler出任Hortonworks的首席执行官。</p>
<p>（4）Hortonworks的主打产品是Hortonworks Data Platform（HDP），也同样是100%开源的产品，HDP除常见的项目外还包括了Ambari，一款开源的安装和管理系统。</p>
<p>（5）HCatalog，一个元数据管理系统，HCatalog现已集成到Facebook开源的Hive中。Hortonworks的Stinger开创性的极大的优化了Hive项目。Hortonworks为入门提供了一个非常好的，易于使用的沙盒。</p>
<p>（6）Hortonworks开发了很多增强特性并提交至核心主干，这使得Apache Hadoop能够在包括Window Server和Windows Azure在内的Microsoft Windows平台上本地运行。定价以集群为基础，每10个节点每年为12500美元。</p>
<h1 id="Hadoop的组成"><a href="#Hadoop的组成" class="headerlink" title="Hadoop的组成"></a>Hadoop的组成</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop2.png" alt=""></p>
<h2 id="HDFS架构概述"><a href="#HDFS架构概述" class="headerlink" title="HDFS架构概述"></a>HDFS架构概述</h2><p>HDFS由NameNode、DataNode、SencodaryNode组成。</p>
<ul>
<li>NameNode：存储文件的元数据，如文件名，文件目录结构，文件属性(生成时间、副本数、文件权限)，以及每个文件的块列表和块所在的DataNode等。</li>
<li>DataNode：在本地文件系统存储文件块数据，以及块数据的校验和。</li>
<li>SecondaryNode：用于监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。</li>
</ul>
<h2 id="Yarn架构概述"><a href="#Yarn架构概述" class="headerlink" title="Yarn架构概述"></a>Yarn架构概述</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop3.png" alt=""></p>
<h2 id="MapReduce架构概述"><a href="#MapReduce架构概述" class="headerlink" title="MapReduce架构概述"></a>MapReduce架构概述</h2><p>MapReduce将计算过程分为两个阶段：Map和Reduce</p>
<p>1）Map阶段并行处理输入数据</p>
<p>2）Reduce阶段对Map结果进行汇总</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop4.png" alt=""></p>
<h1 id="大数据生态体系"><a href="#大数据生态体系" class="headerlink" title="大数据生态体系"></a>大数据生态体系</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop11.jpg" alt=""></p>
<p>1）Sqoop：Sqoop是一款开源的工具，主要用于在Hadoop、Hive与传统的数据库(MySql)间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p>
<p>2）Flume：Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</p>
<p>3）Kafka：Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p>
<p>（1）通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。</p>
<p>（2）高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</p>
<p>（3）支持通过Kafka服务器和消费机集群来分区消息。</p>
<p>（4）支持Hadoop并行数据加载。</p>
<p>4）Storm：Storm用于“连续计算”，对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</p>
<p>5）Spark：Spark是当前最流行的开源大数据内存计算框架。可以基于Hadoop上存储的大数据进行计算。</p>
<p>6）Oozie：Oozie是一个管理Hdoop作业（job）的工作流程调度管理系统。</p>
<p>7）Hbase：HBase是一个分布式的、面向列的开源数据库。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</p>
<p>8）Hive：Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</p>
<p>10）R语言：R是用于统计分析、绘图的语言和操作环境。R是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。</p>
<p>11）Mahout：Apache Mahout是个可扩展的机器学习和数据挖掘库。</p>
<p>12）ZooKeeper：Zookeeper是Google的Chubby一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>
<h1 id="推荐系统框架图"><a href="#推荐系统框架图" class="headerlink" title="推荐系统框架图"></a>推荐系统框架图</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop12.jpg" alt=""></p>
<h1 id="Hadoop运行环境搭建"><a href="#Hadoop运行环境搭建" class="headerlink" title="Hadoop运行环境搭建"></a>Hadoop运行环境搭建</h1><h2 id="安装JDK和安装Hadoop"><a href="#安装JDK和安装Hadoop" class="headerlink" title="安装JDK和安装Hadoop"></a>安装JDK和安装Hadoop</h2><p>在根目录的opt目录下新建software目录，再在software目录下新建bigdata目录，hadoop和jdk的压缩包都放在bigdata目录下。</p>
<p>1.解压jdk压缩包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u211-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.解压Hadoop压缩包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.7.2.tar.gz</span><br></pre></td></tr></table></figure>

<p>3.配置环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/software/bigdata/jdk1.8</span><br><span class="line">export JRE_HOME=/opt/software/bigdata/jdk1.8/jre</span><br><span class="line">export HADOOP_HOME=/opt/software/bigdata/hadoop</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>

<p>4.验证环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]# java -version</span><br><span class="line">java version "1.8.0_211"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_211-b12)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.211-b12, mixed mode)</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]# hadoop version</span><br><span class="line">Hadoop 2.7.2</span><br><span class="line">Subversion Unknown -r Unknown</span><br><span class="line">Compiled by root on 2017-05-22T10:49Z</span><br><span class="line">Compiled with protoc 2.5.0</span><br><span class="line">From source with checksum d0fda26633fa762bff87ec759ebe689c</span><br><span class="line">This command was run using /opt/software/bigdata/hadoop/share/hadoop/common/hadoop-common-2.7.2.jar</span><br></pre></td></tr></table></figure>

<p>配置成功！</p>
<h2 id="Hadoop目录结构"><a href="#Hadoop目录结构" class="headerlink" title="Hadoop目录结构"></a>Hadoop目录结构</h2><p>1、查看Hadoop目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 hadoop-2.7.2]$ ll</span><br><span class="line">总用量 52</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月 22 2017 **bin**</span><br><span class="line">drwxr-xr-x. 3 atguigu atguigu 4096 5月 22 2017 **etc**</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月 22 2017 include</span><br><span class="line">drwxr-xr-x. 3 atguigu atguigu 4096 5月 22 2017 **lib**</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月 22 2017 libexec</span><br><span class="line">-rw-r--r--. 1 atguigu atguigu 15429 5月 22 2017 LICENSE.txt</span><br><span class="line">-rw-r--r--. 1 atguigu atguigu  101 5月 22 2017 NOTICE.txt</span><br><span class="line">-rw-r--r--. 1 atguigu atguigu 1366 5月 22 2017 README.txt</span><br><span class="line">drwxr-xr-x. 2 atguigu atguigu 4096 5月 22 2017 **sbin**</span><br><span class="line">drwxr-xr-x. 4 atguigu atguigu 4096 5月 22 2017 **share**</span><br></pre></td></tr></table></figure>

<p>2、重要目录</p>
<p>（1）bin目录：存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本</p>
<p>（2）etc目录：Hadoop的配置文件目录，存放Hadoop的配置文件</p>
<p>（3）lib目录：存放Hadoop的本地库（对数据进行压缩解压缩功能）</p>
<p>（4）sbin目录：存放启动或停止Hadoop相关服务的脚本</p>
<p>（5）share目录：存放Hadoop的依赖jar包、文档、和官方案例</p>
<h1 id="Hadoop运行模式"><a href="#Hadoop运行模式" class="headerlink" title="Hadoop运行模式"></a>Hadoop运行模式</h1><p>Hadoop运行模式包括：本地模式、伪分布式模式以及完全分布式模式。</p>
<p>Hadoop官方网站：<a href="http://hadoop.apache.org/" target="_blank" rel="noopener">http://hadoop.apache.org/</a></p>
<h2 id="本地运行模式"><a href="#本地运行模式" class="headerlink" title="本地运行模式"></a>本地运行模式</h2><h3 id="官方Grep案例"><a href="#官方Grep案例" class="headerlink" title="官方Grep案例"></a>官方Grep案例</h3><ol>
<li>创建在hadoop-2.7.2文件下面创建一个input文件夹</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ mkdir input</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将Hadoop的xml配置文件复制到input</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ cp etc/hadoop/*.xml input</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行share目录下的MapReduce程序</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar grep input output 'dfs[a-z.]+'</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看输出结果</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ cat output/*</span><br></pre></td></tr></table></figure>

<h3 id="官方WordCount程序"><a href="#官方WordCount程序" class="headerlink" title="官方WordCount程序"></a>官方WordCount程序</h3><ol>
<li>创建在hadoop文件下面创建一个wcinput文件夹</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ mkdir wcinput</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在wcinput文件下创建一个wc.input文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ cd wcinput</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ touch wc.input</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编辑wc.input文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ vim wc.input</span><br><span class="line"></span><br><span class="line">hadoop yarn</span><br><span class="line">hadoop mapreduce</span><br><span class="line">root</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>回到Hadoop目录，执行程序</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount wcinput wcoutput</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看结果</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ cat wcoutput/part-r-00000</span><br><span class="line"></span><br><span class="line">root 2</span><br><span class="line">hadoop 2</span><br><span class="line">mapreduce    1</span><br><span class="line">yarn  1</span><br></pre></td></tr></table></figure>

<h2 id="伪分布式运行模式"><a href="#伪分布式运行模式" class="headerlink" title="伪分布式运行模式"></a>伪分布式运行模式</h2><h3 id="启动HDFS并运行MapReduce程序"><a href="#启动HDFS并运行MapReduce程序" class="headerlink" title="启动HDFS并运行MapReduce程序"></a>启动HDFS并运行MapReduce程序</h3><ol>
<li>分析</li>
</ol>
<p>​    （1）配置集群</p>
<p>​    （2）启动、测试集群增、删、查</p>
<p>​    （3）执行WordCount案例</p>
<ol start="2">
<li>执行步骤</li>
</ol>
<p>（1）配置集群</p>
<p>​       （a）配置：hadoop-env.sh</p>
<p>​         Linux系统中获取JDK的安装路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 ~]# echo $JAVA_HOME</span><br><span class="line"></span><br><span class="line">/opt/module/jdk1.8.0_211</span><br></pre></td></tr></table></figure>

<p>​        修改hadoop-env.sh中的JAVA_HOME 路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_211</span><br></pre></td></tr></table></figure>

<p>（b）配置：core-site.xml</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址  --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>     </span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录  --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（c）配置：hdfs-site.xml</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  指定HDFS副本的数量 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）启动集群</p>
<p>​    （a）格式化<strong>NameNode</strong>（第一次启动时格式化，以后就不要总格式化）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>

<p>​    （b）启动NameNode</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ sbin/hadoop-daemon.sh start namenode</span><br></pre></td></tr></table></figure>

<p>​    （c）启动DataNode</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ sbin&#x2F;hadoop-daemon.sh start datanode</span><br></pre></td></tr></table></figure>

<p>（3）查看集群</p>
<p>​    （a）查看是否启动成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ jps</span><br><span class="line"></span><br><span class="line">13586 NameNode</span><br><span class="line">13668 DataNode</span><br><span class="line">13786 Jps</span><br></pre></td></tr></table></figure>

<p>​    （b）web端查看HDFS文件系统</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ip:50070&#x2F;dfshealth.html#tab-overview</span><br></pre></td></tr></table></figure>

<p>​    （c）查看产生的Log日志</p>
<p>​        说明：在企业中遇到Bug时，经常根据日志提示信息去分析问题、解决Bug。</p>
<p>当前目录：hadoop/logs</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 logs]$ ls</span><br><span class="line"></span><br><span class="line">hadoop-root-datanode-hadoop.root.com.log</span><br><span class="line">hadoop-root-datanode-hadoop.root.com.out</span><br><span class="line">hadoop-root-namenode-hadoop.root.com.log</span><br><span class="line">hadoop-root-namenode-hadoop.root.com.out</span><br><span class="line">SecurityAuth-root.audit</span><br><span class="line"></span><br><span class="line">[root@centos7 logs]$ cat hadoop-root-datanode-hadoop101.log</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ cd data/tmp/dfs/name/current/</span><br><span class="line"></span><br><span class="line">[root@centos7 current]$ cat VERSION</span><br><span class="line"></span><br><span class="line">**clusterID=CID-f0330a58-36fa-4a2a-a65f-2688269b5837**</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ cd data/tmp/dfs/data/current/</span><br><span class="line"></span><br><span class="line">**clusterID=CID-f0330a58-36fa-4a2a-a65f-2688269b5837**</span><br></pre></td></tr></table></figure>

<p>注意：格式化NameNode，会产生新的集群id,导致NameNode和DataNode的集群id不一致，集群找不到已往数据。所以，格式NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。</p>
<p>（4）操作集群</p>
<p>​       （a）在HDFS文件系统上<strong>创建</strong>一个input文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -mkdir -p /user/atguigu/input</span><br></pre></td></tr></table></figure>

<p>​       （b）将测试文件内容<strong>上传</strong>到文件系统上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$bin/hdfs dfs -put wcinput/wc.input</span><br><span class="line"></span><br><span class="line">/user/root/input/</span><br></pre></td></tr></table></figure>

<p>​       （c）<strong>查看</strong>上传的文件是否正确</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -ls /user/atguigu/input/</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -cat /user/atguigu/ input/wc.input</span><br></pre></td></tr></table></figure>

<p>​       （d）运行MapReduce程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/root/input/ /user/root/output</span><br></pre></td></tr></table></figure>

<p>​        （e）查看输出结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -cat /user/root/output/*</span><br></pre></td></tr></table></figure>

<p>浏览器查看，如图所示 查看output文件</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop5.png" alt=""></p>
<p>​       （f）将测试文件内容<strong>下载</strong>到本地</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ hdfs dfs -get /user/atguigu/output/part-r-00000 ./wcoutput/</span><br></pre></td></tr></table></figure>

<p>​      （g）<strong>删除</strong>输出结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ hdfs dfs -rm -r /user/atguigu/output</span><br></pre></td></tr></table></figure>

<h3 id="启动YARN并运行MapReduce程序"><a href="#启动YARN并运行MapReduce程序" class="headerlink" title="启动YARN并运行MapReduce程序"></a>启动YARN并运行MapReduce程序</h3><ol>
<li>分析</li>
</ol>
<p>​    （1）配置集群在YARN上运行MR</p>
<p>​    （2）启动、测试集群增、删、查</p>
<p>​    （3）在YARN上执行WordCount案例</p>
<ol start="2">
<li>执行步骤    </li>
</ol>
<p>​    （1）配置集群</p>
<p>​       （a）配置yarn-env.sh.配置一下JAVA_HOME</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_211</span><br></pre></td></tr></table></figure>

<p>​        （b）配置yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop101<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​       （c）配置：mapred-env.sh.配置一下JAVA_HOME</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/opt/module/jdk1.8.0_144</span><br></pre></td></tr></table></figure>

<p>​       （d）配置： (对mapred-site.xml.template重新命名为) mapred-site.xml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ mv mapred-site.xml.template mapred-site.xml</span><br><span class="line">[root@centos7 hadoop]$ vim mapred-site.xml</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定MR运行在YARN上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）启动集群</p>
<p>​    （a）启动前必须保证NameNode和DataNode已经启动</p>
<p>​    （b）启动ResourceManager</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ sbin/yarn-daemon.sh start resourcemanager</span><br></pre></td></tr></table></figure>

<p>​    （c）启动NodeManager</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ sbin/yarn-daemon.sh start nodemanager</span><br></pre></td></tr></table></figure>

<p>  （3）集群操作</p>
<p>​    （a）YARN的浏览器页面查看，如图所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ip:8088&#x2F;cluster</span><br></pre></td></tr></table></figure>

<p> YARN的浏览器页面<img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop6.png" alt=""></p>
<p>​       （b）删除文件系统上的output文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -rm -R /user/atguigu/output</span><br></pre></td></tr></table></figure>

<p>​       （c）执行MapReduce程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/atguigu/input /user/atguigu/output</span><br></pre></td></tr></table></figure>

<p>​       （d）查看运行结果，如图所示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -cat /user/atguigu/output/*</span><br></pre></td></tr></table></figure>

<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop7.png" alt=""></p>
<h3 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h3><p>为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：</p>
<ol>
<li>配置mapred-site.xml</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ vim mapred-site.xml</span><br></pre></td></tr></table></figure>

<p>在该文件里面增加如下配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop101:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop101:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动历史服务器</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ sbin&#x2F;mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看历史服务器是否启动</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$jps</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>查看JobHistory：<a href="http://ip:19888/jobgistory" target="_blank" rel="noopener">http://ip:19888/jobgistory</a></li>
</ol>
<h3 id="配置日志的聚集"><a href="#配置日志的聚集" class="headerlink" title="配置日志的聚集"></a>配置日志的聚集</h3><p>日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。</p>
<p>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。</p>
<p>注意：开启日志聚集功能，需要重新启动NodeManager 、ResourceManager和HistoryManager。</p>
<p>开启日志聚集功能具体步骤如下：</p>
<ol>
<li>配置yarn-site.xml</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ vi yarn-site.xml</span><br></pre></td></tr></table></figure>

<p>在该文件里面增加如下配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 日志聚集功能使能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日志保留时间设置7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>关闭NodeManager 、ResourceManager和HistoryServer</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ sbin/yarn-daemon.sh stop resourcemanager</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ sbin/yarn-daemon.sh stop nodemanager</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ sbin/mr-jobhistory-daemon.sh stop historyserver</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动NodeManager 、ResourceManager和HistoryServer</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$]$ sbin/yarn-daemon.sh start resourcemanager</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ sbin/yarn-daemon.sh start nodemanager</span><br><span class="line"></span><br><span class="line">[root@centos7 hadoop]$ sbin/mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>删除HDFS上已经存在的输出文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ bin/hdfs dfs -rm -R /user/atguigu/output</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>执行WordCount程序</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos7 hadoop]$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.2.jar wordcount /user/atguigu/input /user/atguigu/output</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>查看日志，如图所示</li>
</ol>
<p><a href="http://hadoop101:19888/jobhistory" target="_blank" rel="noopener">http://hadoop101:19888/jobhistory</a></p>
<p> Job History</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop8.png" alt=""></p>
<p>job运行情况<img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop9.png" alt=""></p>
<p>查看日志<img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hadoop10.png" alt=""></p>
<h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><p>Hadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认配置值时，才需要修改自定义配置文件，更改相应属性值。</p>
<p>（1）默认配置文件：</p>
<table>
<thead>
<tr>
<th>要获取的默认文件</th>
<th>文件存放在Hadoop的jar包中的位置</th>
</tr>
</thead>
<tbody><tr>
<td>core-default.xml</td>
<td>hadoop-common-2.7.2.jar/  core-default.xml</td>
</tr>
<tr>
<td>hdfs-default.xml</td>
<td>hadoop-hdfs-2.7.2.jar/  hdfs-default.xml</td>
</tr>
<tr>
<td>yarn-default.xml</td>
<td>hadoop-yarn-common-2.7.2.jar/  yarn-default.xml</td>
</tr>
<tr>
<td>mapred-default.xml</td>
<td>hadoop-mapreduce-client-core-2.7.2.jar/  mapred-default.xml</td>
</tr>
</tbody></table>
<p>（2）自定义配置文件：</p>
<p>​    core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在$HADOOP_HOME/etc/hadoop这个路径上，用户可以根据项目需求重新进行修改配置。</p>
<h2 id="完全分布式运行模式"><a href="#完全分布式运行模式" class="headerlink" title="完全分布式运行模式"></a>完全分布式运行模式</h2><h3 id="编写集群分发脚本"><a href="#编写集群分发脚本" class="headerlink" title="编写集群分发脚本"></a>编写集群分发脚本</h3><p>rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p>
<p>rsync和scp区别：用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。</p>
<p>rsync语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rsync  -av      $pdir&#x2F;$fname          $user@host:$pdir&#x2F;$fname</span><br><span class="line">命令   选项参数   要拷贝的文件路径&#x2F;名称    目的用户@主机:目的路径&#x2F;名称</span><br></pre></td></tr></table></figure>

<p>通过vim编写xsync:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#1 获取输入参数个数，如果没有参数，直接退出</span><br><span class="line">pcount&#x3D;$#</span><br><span class="line">if ((pcount&#x3D;&#x3D;0)); then</span><br><span class="line">echo no args;</span><br><span class="line">exit;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">#2 获取文件名称</span><br><span class="line">p1&#x3D;$1</span><br><span class="line">fname&#x3D;&#96;basename $p1&#96;</span><br><span class="line">echo fname&#x3D;$fname</span><br><span class="line"></span><br><span class="line">#3 获取上级目录到绝对路径</span><br><span class="line">pdir&#x3D;&#96;cd -P $(dirname $p1); pwd&#96;</span><br><span class="line">echo pdir&#x3D;$pdir</span><br><span class="line"></span><br><span class="line">#4 获取当前用户名称</span><br><span class="line">user&#x3D;&#96;whoami&#96;</span><br><span class="line"></span><br><span class="line">#5 循环</span><br><span class="line">for((host&#x3D;1; host&lt;4; host++)); do</span><br><span class="line">        echo ------------------- hadoop$host --------------</span><br><span class="line">        rsync -av $pdir&#x2F;$fname $user@hadoop$host:$pdir</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>修改权限：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 bigdata]$ chmod 777 xsync</span><br></pre></td></tr></table></figure>

<p>测试:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos7 bigdata]$ mv xsync &#x2F;usr&#x2F;local&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure>

<p>如果报错：rsync: command not found，需要安装rsync</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rsync -y</span><br></pre></td></tr></table></figure>

<h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><ol>
<li>集群规划</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>hadoop1</th>
<th>hadoop2</th>
<th>hadoop3</th>
</tr>
</thead>
<tbody><tr>
<td>HDFS</td>
<td>NameNode  DataNode</td>
<td>DataNode</td>
<td>SecondaryNameNode  DataNode</td>
</tr>
<tr>
<td>YARN</td>
<td>NodeManager</td>
<td>ResourceManager  NodeManager</td>
<td>NodeManager</td>
</tr>
</tbody></table>
<ol start="2">
<li><p>修改配置文件</p>
<p>1) 核心配置文件：core-site.xml</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定HDFS中NameNode的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/software/bigdata/hadoop/data/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        2) HDFS配置文件</p>
<p>​        hadoop-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置jdk所在的目录</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;jdk1.8</span><br></pre></td></tr></table></figure>

<p>​        hdfs-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定hdfs的副本数量--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定Hadoop辅助名称节点主机配置：SecondaryNameNode  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop3:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        3) yarn配置文件</p>
<p>​        yarn-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置jdk所在的目录</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;jdk1.8</span><br></pre></td></tr></table></figure>

<p>​        yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Reducer获取数据的方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定YARN的ResourceManager的地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        4) MapperReducer配置文件</p>
<p>​        mapred-env.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 配置jdk所在的目录</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;jdk1.8</span><br></pre></td></tr></table></figure>

<p>​        mapred-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#根据模板修改</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定MR运行在Yarn上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改完成后，通过集群分发脚本分发到各个服务器上</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop1 bigdata]$ xsync &#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在配置了NameNode的服务器上格式化集群</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop1 bigdata]$ hdfs namenode -format</span><br><span class="line">#出现一下一大堆的配置信息</span><br><span class="line"></span><br><span class="line">[root@msr-server hadoop]# hdfs namenode -format</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:04 INFO namenode.NameNode: STARTUP_MSG: </span><br><span class="line">&#x2F;************************************************************</span><br><span class="line">STARTUP_MSG: Starting NameNode</span><br><span class="line">STARTUP_MSG:   host &#x3D; msr-server&#x2F;192.168.74.129</span><br><span class="line">STARTUP_MSG:   args &#x3D; [-format]</span><br><span class="line">STARTUP_MSG:   version &#x3D; 2.7.2</span><br><span class="line">STARTUP_MSG:   classpath &#x3D; &#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;etc&#x2F;hadoop:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-io-2.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-lang-2.6.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-beanutils-1.7.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;mockito-all-1.8.5.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-digester-1.8.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jackson-xc-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;servlet-api-2.5.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;slf4j-api-1.7.10.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;hamcrest-core-1.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;log4j-1.2.17.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jackson-core-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;htrace-core-3.1.0-incubating.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;gson-2.2.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-logging-1.1.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;apacheds-kerberos-codec-2.0.0-M15.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-cli-1.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-collections-3.2.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;asm-3.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jackson-jaxrs-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;xz-1.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jersey-server-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jersey-core-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;protobuf-java-2.5.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;paranamer-2.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;slf4j-log4j12-1.7.10.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jackson-mapper-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-codec-1.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;httpclient-4.2.5.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jettison-1.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jetty-util-6.1.26.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;activation-1.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;zookeeper-3.4.6.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jets3t-0.9.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-configuration-1.6.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;junit-4.11.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jsp-api-2.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;guava-11.0.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;avro-1.7.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jsr305-3.0.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jsch-0.1.42.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-beanutils-core-1.8.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;apacheds-i18n-2.0.0-M15.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-httpclient-3.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jetty-6.1.26.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;java-xmlbuilder-0.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;curator-framework-2.7.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jersey-json-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;netty-3.6.2.Final.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;curator-client-2.7.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;stax-api-1.0-2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;snappy-java-1.0.4.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;api-util-1.0.0-M20.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-compress-1.4.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;xmlenc-0.52.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-math3-3.1.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;httpcore-4.2.5.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;api-asn1-api-1.0.0-M20.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;hadoop-annotations-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jaxb-api-2.2.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;jaxb-impl-2.2.3-1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;commons-net-3.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;curator-recipes-2.7.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;lib&#x2F;hadoop-auth-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;hadoop-nfs-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;hadoop-common-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;common&#x2F;hadoop-common-2.7.2-tests.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;commons-io-2.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;commons-lang-2.6.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;xercesImpl-2.9.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;servlet-api-2.5.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;xml-apis-1.3.04.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;log4j-1.2.17.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jackson-core-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;htrace-core-3.1.0-incubating.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;commons-logging-1.1.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;commons-cli-1.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;asm-3.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;leveldbjni-all-1.8.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jersey-server-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jersey-core-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;protobuf-java-2.5.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jackson-mapper-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;commons-codec-1.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jetty-util-6.1.26.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;guava-11.0.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jsr305-3.0.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;jetty-6.1.26.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;netty-3.6.2.Final.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;commons-daemon-1.0.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;xmlenc-0.52.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;lib&#x2F;netty-all-4.0.23.Final.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;hadoop-hdfs-nfs-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;hadoop-hdfs-2.7.2-tests.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;hdfs&#x2F;hadoop-hdfs-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jersey-guice-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-io-2.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-lang-2.6.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jackson-xc-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;servlet-api-2.5.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;log4j-1.2.17.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jackson-core-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-logging-1.1.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-cli-1.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;guice-3.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-collections-3.2.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;asm-3.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;leveldbjni-all-1.8.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jackson-jaxrs-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jersey-client-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;xz-1.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jersey-server-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jersey-core-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;protobuf-java-2.5.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jackson-mapper-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-codec-1.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jettison-1.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jetty-util-6.1.26.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;activation-1.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;zookeeper-3.4.6.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;aopalliance-1.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;guava-11.0.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jsr305-3.0.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;javax.inject-1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jetty-6.1.26.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jersey-json-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;netty-3.6.2.Final.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;stax-api-1.0-2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;guice-servlet-3.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;zookeeper-3.4.6-tests.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;commons-compress-1.4.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jaxb-api-2.2.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;lib&#x2F;jaxb-impl-2.2.3-1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-resourcemanager-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-applications-unmanaged-am-launcher-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-sharedcachemanager-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-applicationhistoryservice-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-tests-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-applications-distributedshell-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-common-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-nodemanager-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-api-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-common-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-registry-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-server-web-proxy-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;yarn&#x2F;hadoop-yarn-client-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;jersey-guice-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;commons-io-2.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;hamcrest-core-1.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;log4j-1.2.17.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;jackson-core-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;guice-3.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;asm-3.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;leveldbjni-all-1.8.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;xz-1.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;jersey-server-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;jersey-core-1.9.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;protobuf-java-2.5.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;paranamer-2.3.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;jackson-mapper-asl-1.9.13.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;aopalliance-1.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;junit-4.11.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;avro-1.7.4.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;javax.inject-1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;netty-3.6.2.Final.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;snappy-java-1.0.4.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;guice-servlet-3.0.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;commons-compress-1.4.1.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;lib&#x2F;hadoop-annotations-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-jobclient-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-app-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-hs-plugins-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-jobclient-2.7.2-tests.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-common-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-hs-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-core-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-client-shuffle-2.7.2.jar:&#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;contrib&#x2F;capacity-scheduler&#x2F;*.jar</span><br><span class="line">STARTUP_MSG:   build &#x3D; Unknown -r Unknown; compiled by &#39;root&#39; on 2017-05-22T10:49Z</span><br><span class="line">STARTUP_MSG:   java &#x3D; 1.8.0_211</span><br><span class="line">************************************************************&#x2F;</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:04 INFO namenode.NameNode: registered UNIX signal handlers for [TERM, HUP, INT]</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:04 INFO namenode.NameNode: createNameNode [-format]</span><br><span class="line">Formatting using clusterid: CID-8530cbf5-a4b6-454b-bfdb-2c8a016d55a7</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:05 INFO namenode.FSNamesystem: No KeyProvider found.</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:05 INFO namenode.FSNamesystem: fsLock is fair:true</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.DatanodeManager: dfs.block.invalidate.limit&#x3D;1000</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.DatanodeManager: dfs.namenode.datanode.registration.ip-hostname-check&#x3D;true</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: dfs.namenode.startup.delay.block.deletion.sec is set to 000:00:00:00.000</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: The block deletion will start around 2020 Jun 25 10:00:06</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: Computing capacity for map BlocksMap</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: VM type       &#x3D; 64-bit</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: 2.0% max memory 966.7 MB &#x3D; 19.3 MB</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: capacity      &#x3D; 2^21 &#x3D; 2097152 entries</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: dfs.block.access.token.enable&#x3D;false</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: defaultReplication         &#x3D; 3</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: maxReplication             &#x3D; 512</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: minReplication             &#x3D; 1</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: maxReplicationStreams      &#x3D; 2</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: replicationRecheckInterval &#x3D; 3000</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: encryptDataTransfer        &#x3D; false</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO blockmanagement.BlockManager: maxNumBlocksToLog          &#x3D; 1000</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: fsOwner             &#x3D; root (auth:SIMPLE)</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: supergroup          &#x3D; supergroup</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: isPermissionEnabled &#x3D; true</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: HA Enabled: false</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: Append Enabled: true</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: Computing capacity for map INodeMap</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: VM type       &#x3D; 64-bit</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: 1.0% max memory 966.7 MB &#x3D; 9.7 MB</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: capacity      &#x3D; 2^20 &#x3D; 1048576 entries</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSDirectory: ACLs enabled? false</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSDirectory: XAttrs enabled? true</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSDirectory: Maximum size of an xattr: 16384</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.NameNode: Caching file names occuring more than 10 times</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: Computing capacity for map cachedBlocks</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: VM type       &#x3D; 64-bit</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: 0.25% max memory 966.7 MB &#x3D; 2.4 MB</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: capacity      &#x3D; 2^18 &#x3D; 262144 entries</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: dfs.namenode.safemode.threshold-pct &#x3D; 0.9990000128746033</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: dfs.namenode.safemode.min.datanodes &#x3D; 0</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: dfs.namenode.safemode.extension     &#x3D; 30000</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.window.num.buckets &#x3D; 10</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.num.users &#x3D; 10</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO metrics.TopMetrics: NNTop conf: dfs.namenode.top.windows.minutes &#x3D; 1,5,25</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: Retry cache on namenode is enabled</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO namenode.FSNamesystem: Retry cache will use 0.03 of total heap and retry cache entry expiry time is 600000 millis</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: Computing capacity for map NameNodeRetryCache</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: VM type       &#x3D; 64-bit</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: 0.029999999329447746% max memory 966.7 MB &#x3D; 297.0 KB</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:06 INFO util.GSet: capacity      &#x3D; 2^15 &#x3D; 32768 entries</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:07 INFO namenode.FSImage: Allocated new BlockPoolId: BP-1479747258-172.16.198.170-1593050406999</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:07 INFO common.Storage: Storage directory &#x2F;opt&#x2F;software&#x2F;bigdata&#x2F;hadoop&#x2F;data&#x2F;tmp&#x2F;dfs&#x2F;name has been successfully formatted.</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:07 INFO namenode.NNStorageRetentionManager: Going to retain 1 images with txid &gt;&#x3D; 0</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:07 INFO util.ExitUtil: Exiting with status 0</span><br><span class="line">20&#x2F;06&#x2F;25 10:00:07 INFO namenode.NameNode: SHUTDOWN_MSG: </span><br><span class="line">&#x2F;************************************************************</span><br><span class="line">SHUTDOWN_MSG: Shutting down NameNode at msr-server&#x2F;192.168.74.129</span><br><span class="line">************************************************************&#x2F;</span><br></pre></td></tr></table></figure>

<p>注：如果使用云服务器配置，在编写hosts文件的时候，是以ip hostname来配置，在hadoop1主机上配置是ip必须为服务器的内网地址，其他的服务器同理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxx.79 hadoop1</span><br><span class="line">xxx.58 hadoop2</span><br><span class="line">xxx.47 hadoop3</span><br></pre></td></tr></table></figure>

<h3 id="配置ssh免密码登录"><a href="#配置ssh免密码登录" class="headerlink" title="配置ssh免密码登录"></a>配置ssh免密码登录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop1 .ssh]$ ssh-keygen -t rsa</span><br><span class="line">[root@hadoop1 .ssh]$ ssh-copy-id hadoop1</span><br><span class="line">[root@hadoop1 .ssh]$ ssh-copy-id hadoop2</span><br><span class="line">[root@hadoop1 .ssh]$ ssh-copy-id hadoop3</span><br></pre></td></tr></table></figure>

<p>集群内的三台服务器都需要这样配置一下。</p>
<h3 id="群起集群配置"><a href="#群起集群配置" class="headerlink" title="群起集群配置"></a>群起集群配置</h3><p>配置slaves：/opt/software/hadoop/etc/hadoop/slaves，通过xsync发送的其他服务器上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop1</span><br><span class="line">hadoop2</span><br><span class="line">hadoop3</span><br></pre></td></tr></table></figure>

<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>在第一次启动的时候必须，先格式化namenode服务器（如果在格式化的过程中失败，重新再次格式化namenode的时候，先删除logs和data文件夹，再去格式化）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop1 hadoop]$ bin&#x2F;hdfs namenode -format</span><br></pre></td></tr></table></figure>

<p>群起hdfs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop1 hadoop]$ start-dfs.sh</span><br></pre></td></tr></table></figure>

<p>群起yarn，因为yarn的resourcemanager是配置在hadoop2上，所以在hadoop2的服务器上执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop2 hadoop]$ start-yarn.sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot系列一：浅析SpringBoot自动装配</title>
    <url>/posts/Spring%20Boot/2020/05/202005281915.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>源码地址：<a href="https://github.com/MaiSR9527/springboot-auto-configuration" target="_blank" rel="noopener">github地址</a></p>
<p>maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="spring模式注解装配"><a href="#spring模式注解装配" class="headerlink" title="spring模式注解装配"></a>spring模式注解装配</h2><p>spring的模式注解可以说是注册一个个单独的组件</p>
<h3 id="Stereotype-Annotations"><a href="#Stereotype-Annotations" class="headerlink" title="Stereotype Annotations"></a>Stereotype Annotations</h3><p><a href="https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#stereotype-annotations" target="_blank" rel="noopener">GitHub官方描述</a></p>
<p>A <strong><em>stereotype annotation</em></strong> is an annotation that is used to declare the role that a component plays within the application. For example, the <code>@Repository</code> annotation in the Spring Framework is a marker for any class that fulfills the role or <em>stereotype</em> of a repository (also known as Data Access Object or DAO).</p>
<p><code>@Component</code> is a generic stereotype for any Spring-managed component. Any component annotated with <code>@Component</code> is a candidate for component scanning. Similarly, any component annotated with an annotation that is itself meta-annotated with <code>@Component</code> is also a candidate for component scanning. For example, <code>@Service</code> is meta-annotated with <code>@Component</code>.</p>
<p>Core Spring provides several stereotype annotations out of the box, including but not limited to: <code>@Component</code>, <code>@Service</code>, <code>@Repository</code>, <code>@Controller</code>, <code>@RestController</code>, and <code>@Configuration</code>. <code>@Repository</code>, <code>@Service</code>, etc. are specializations of <code>@Component</code>.</p>
<p>​        模式注解用于声明应用中的组件。例如：<code>@Component</code>通用组件，任何被<code>@Component</code>标注的组件都是组件扫描时的候选对象，<code>@Service</code>扮演服务层的角色，<code>@Controller</code>扮演控制层的角色，<code>@Repository</code>扮演仓库存储的角色等注解都是被<code>@Component</code>标注的，时<code>@Component</code>派生出来的对象，其作用相同只是可以更加有语义地声明组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>​    使用方式：<code>&lt;context:component-scan&gt;方式</code>在xml配置文件中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 激活注解驱动特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 找寻被 @Component 或者其派生 Annotation 标记的类（Class），将它们注册为 Spring Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.msr.aotuconfiguration"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>​        <code>@ComponentScan</code>方式通过注解去扫描，他会扫描指定地包及其子包下面的组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.msr.aotuconfiguration"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AotuConfigApplication &#123;..&#125;</span><br></pre></td></tr></table></figure>

<p>​        在SpringBoot中的<code>@SpringBootApplication</code>的启动注解中就已经整合了<code>@ComponentScan</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">		<span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ComponentScan使用Demo"><a href="#ComponentScan使用Demo" class="headerlink" title="@ComponentScan使用Demo"></a>@ComponentScan使用Demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="meta">@Repository</span>(value = <span class="string">"myUserRepository"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.msr.aotuconfiguration.repository"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRepositoryBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestRepositoryBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                // 非<span class="title">web</span>模式运行</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        UserRepository repository = context.getBean(UserRepository<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"repository bean: "</span> + repository);</span><br><span class="line">        <span class="comment">//控制台输出：repository bean: com.msr.aotuconfiguration.repository.UserRepository@25084a1e</span></span><br><span class="line">        <span class="comment">//说明组件UserRepository组件成功被装配</span></span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义模式注解"><a href="#自定义模式注解" class="headerlink" title="自定义模式注解"></a>自定义模式注解</h3><p>​        通过使用<code>@Component</code>的“派生性”，可以自定义像<code>@Service</code>这些注解</p>
<p>​        自定义<code>@CustomService</code>注解：<code>@Component</code>-&gt;<code>@Service</code>-&gt;<code>@CustomService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CustomService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>@CustomService</code>注解去标注组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CustomService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"custom annotation"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.msr.aotuconfiguration.service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCustomAnnotationBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestCustomAnnotationApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        UserService userService = context.getBean(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"userService bean:"</span>+userService.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        <code>@CustomService</code>还可以再次派生成新注解<code>@Component</code>-&gt;<code>@Service</code>-&gt;<code>@CustomService</code>-&gt;…</p>
<p>在自定义组件声明类型注解时，可以再<code>@Component</code>或者<code>@Service</code>这些注解之上去自定义。一般都使用<code>@Component</code>就够了</p>
<h2 id="spring-Enable模块装配"><a href="#spring-Enable模块装配" class="headerlink" title="spring  @Enable模块装配"></a>spring  @Enable模块装配</h2><p>Spring Framework 3.1 开始支持”@Enable 模块驱动“。所谓“模块”是指具备相同领域的功能组件集合， 组合所形成一个独立<br>的单元。比如 Web MVC 模块、AspectJ代理模块、Caching（缓存）模块、JMX（Java 管 理扩展）模块、Async（异步处<br>理）模块等。</p>
<p>Spring中<code>@Enable</code>注解模块的一些使用</p>
<table>
<thead>
<tr>
<th>框架实现</th>
<th>@Enable类型注解</th>
<th>激活的模块</th>
</tr>
</thead>
<tbody><tr>
<td>Spring Framework</td>
<td>@EnableWebMvc</td>
<td>Web MVC 模块</td>
</tr>
<tr>
<td></td>
<td>@EnableTransactionManagement</td>
<td>事务管理模块</td>
</tr>
<tr>
<td></td>
<td>@EnableCaching</td>
<td>缓存模块</td>
</tr>
<tr>
<td></td>
<td>@EnableAsync</td>
<td>异步处理模块</td>
</tr>
<tr>
<td></td>
<td>@EnableWebFlux</td>
<td>Web Flux模块</td>
</tr>
<tr>
<td></td>
<td>@EnableAspectJAutoProxy</td>
<td>AspectJ代理模块</td>
</tr>
<tr>
<td>SpringBoot</td>
<td>@EnableAutoConfiguratio</td>
<td>自动装配模块</td>
</tr>
<tr>
<td></td>
<td>@EnableManagementContext</td>
<td>Actuator 管理模块</td>
</tr>
<tr>
<td></td>
<td>@EnableConfigurationProperties</td>
<td>配置属性绑定模块</td>
</tr>
<tr>
<td></td>
<td>@EnableOAuth2Sso</td>
<td>OAuth2 单点登录模块</td>
</tr>
<tr>
<td>Spring Cloud</td>
<td>@EnableEurekaServer</td>
<td>Eureka服务器模块</td>
</tr>
<tr>
<td></td>
<td>@EnableConfigServer</td>
<td>配置服务器模块</td>
</tr>
<tr>
<td></td>
<td>@EnableFeignClients</td>
<td>Feign客户端模块</td>
</tr>
<tr>
<td></td>
<td>@EnableZuulProxy</td>
<td>服务网关 Zuul 模块</td>
</tr>
<tr>
<td></td>
<td>@EnableCircuitBreaker</td>
<td>服务熔断模块</td>
</tr>
<tr>
<td>Spring Security</td>
<td>@EnableWebSecurity</td>
<td>Web Seciruty模块</td>
</tr>
<tr>
<td></td>
<td>@EnableGlobalAuthentication</td>
<td>全局认证注解</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<p><code>@Enable</code>模块装配又有注解驱动方式和接口编程方式</p>
<h3 id="注解驱动方式"><a href="#注解驱动方式" class="headerlink" title="注解驱动方式"></a>注解驱动方式</h3><p>Spring中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.web.servlet.config.annotation;</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.servlet.config.annotation;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>通过注解驱动方式自定义Enable注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.annotation;</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(UserConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableUserByConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user configuration"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.bootstrap;</span><br><span class="line"><span class="meta">@EnableUserByConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnableBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestEnableBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        String user = context.getBean(<span class="string">"user"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"user Bean : "</span> + user);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="接口编程方式"><a href="#接口编程方式" class="headerlink" title="接口编程方式"></a>接口编程方式</h3><p>Spring中的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cache.annotation;</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(CachingConfigurationSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableCaching</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.cache.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachingConfigurationSelector</span> <span class="keyword">extends</span> <span class="title">AdviceModeImportSelector</span>&lt;<span class="title">EnableCaching</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PROXY_JCACHE_CONFIGURATION_CLASS =</span><br><span class="line">			<span class="string">"org.springframework.cache.jcache.config.ProxyJCacheConfiguration"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_ASPECT_CONFIGURATION_CLASS_NAME =</span><br><span class="line">			<span class="string">"org.springframework.cache.aspectj.AspectJCachingConfiguration"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String JCACHE_ASPECT_CONFIGURATION_CLASS_NAME =</span><br><span class="line">			<span class="string">"org.springframework.cache.aspectj.AspectJJCacheConfiguration"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jsr107Present = ClassUtils.isPresent(</span><br><span class="line">			<span class="string">"javax.cache.Cache"</span>, CachingConfigurationSelector<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jcacheImplPresent = ClassUtils.isPresent(</span><br><span class="line">			PROXY_JCACHE_CONFIGURATION_CLASS, CachingConfigurationSelector<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AdviceMode adviceMode) &#123;</span><br><span class="line">		<span class="keyword">switch</span> (adviceMode) &#123;</span><br><span class="line">			<span class="keyword">case</span> PROXY:</span><br><span class="line">				<span class="keyword">return</span> getProxyImports();</span><br><span class="line">			<span class="keyword">case</span> ASPECTJ:</span><br><span class="line">				<span class="keyword">return</span> getAspectJImports();</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> String[] getProxyImports() &#123;</span><br><span class="line">		List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">		result.add(AutoProxyRegistrar<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">		result.add(ProxyCachingConfiguration<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">		<span class="keyword">if</span> (jsr107Present &amp;&amp; jcacheImplPresent) &#123;</span><br><span class="line">			result.add(PROXY_JCACHE_CONFIGURATION_CLASS);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(result);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> String[] getAspectJImports() &#123;</span><br><span class="line">		List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">		result.add(CACHE_ASPECT_CONFIGURATION_CLASS_NAME);</span><br><span class="line">		<span class="keyword">if</span> (jsr107Present &amp;&amp; jcacheImplPresent) &#123;</span><br><span class="line">			result.add(JCACHE_ASPECT_CONFIGURATION_CLASS_NAME);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(result);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​        ImportSelector接口是至spring中导入外部配置的核心接口，也是最顶层的接口，在SpringBoot的自动化配置和@EnableXXX(功能性注解)都有它的存在</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/ImportSelector.png" alt="importselector"></p>
<p>​        下面就基于接口驱动自定义实现Enable模块：通过<code>UserConfigurationSelector</code>装配了<code>UserConfiguration</code>（  return new String[]{UserConfiguration.class.getName()}  ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.annotation;</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(UserConfigurationSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableUserByImportSelector</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.annotation;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfigurationSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;UserConfiguration<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.bootstrap;</span><br><span class="line"><span class="meta">@EnableUserByImportSelector</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnableImportSelectorBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestEnableImportSelectorBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        String user = context.getBean(<span class="string">"user"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"user Bean : "</span> + user);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring条件装配"><a href="#Spring条件装配" class="headerlink" title="Spring条件装配"></a>Spring条件装配</h2><p>从 Spring Framework 3.1 开始，允许在 Bean 装配时增加前置条件判断</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>使用场景</th>
<th>开始版本</th>
</tr>
</thead>
<tbody><tr>
<td>@Profile</td>
<td>配置化条件装配</td>
<td>3.1</td>
</tr>
<tr>
<td>@Conditional</td>
<td>编程条件装配</td>
<td>4.0</td>
</tr>
</tbody></table>
<h3 id="条件装配-Profile—基于配置信息"><a href="#条件装配-Profile—基于配置信息" class="headerlink" title="条件装配@Profile—基于配置信息"></a>条件装配@Profile—基于配置信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.service;</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"user1"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User1ServiceByProfile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"profile is user1: "</span>+<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.service;</span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"user2"</span>)</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2ServiceByProfile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"profile is user2: "</span>+<span class="keyword">this</span>.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.bootstrap;</span><br><span class="line"><span class="meta">@SpringBootApplication</span>(scanBasePackages = <span class="string">"com.msr.aotuconfiguration.service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProfileBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestProfileBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line">                .profiles("user1")</span><br><span class="line">                .run(args);</span><br><span class="line">        User1ServiceByProfile user1 = context.getBean(<span class="string">"user1ServiceByProfile"</span>, User1ServiceByProfile<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//成功装配</span></span><br><span class="line">        user1.print();</span><br><span class="line">        <span class="comment">//直接报错 NoSuchBeanDefinitionException: No bean named 'user2ServiceByProfile' available</span></span><br><span class="line">        User2ServiceByProfile user2 = context.getBean(<span class="string">"user2ServiceByProfile"</span>,User2ServiceByProfile<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (user2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"user2ServiceByProfile can not be load..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="条件装配-Conditional—基于编程实现"><a href="#条件装配-Conditional—基于编程实现" class="headerlink" title="条件装配@Conditional—基于编程实现"></a>条件装配@Conditional—基于编程实现</h3><p>Spring中的<code>@Conditional</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(OnClassCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ConditionalOnClass</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The classes that must be present. Since this annotation is parsed by loading class</span></span><br><span class="line"><span class="comment">	 * bytecode, it is safe to specify classes here that may ultimately not be on the</span></span><br><span class="line"><span class="comment">	 * classpath, only if this annotation is directly on the affected component and</span></span><br><span class="line"><span class="comment">	 * &lt;b&gt;not&lt;/b&gt; if this annotation is used as a composed, meta-annotation. In order to</span></span><br><span class="line"><span class="comment">	 * use this annotation as a meta-annotation, only use the &#123;<span class="doctag">@link</span> #name&#125; attribute.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the classes that must be present</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * The classes names that must be present.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names that must be present.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>自定义实现<code>@ConditionOnProperty</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.condition;</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional</span>(OnPropertyCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">ConditionOnProperty</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">address</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.condition;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnPropertyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; attributes = metadata.getAnnotationAttributes(ConditionOnProperty<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        String name = String.valueOf(attributes.get(<span class="string">"name"</span>));</span><br><span class="line">        String address = String.valueOf(attributes.get(<span class="string">"address"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"vip"</span>.equals(name) &amp;&amp; <span class="string">"China"</span>.equals(address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.bootstrap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConditionBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestConditionBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        String user = context.getBean(<span class="string">"maishuren"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"maishuren"</span>)</span><br><span class="line">    <span class="meta">@ConditionOnProperty</span>(name = <span class="string">"vip"</span>, address = <span class="string">"China"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user bean is name:msr address:China"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h2><p>SpringBoot的自动装配，是基于约定大于配置的原则。实现spring组件自动装配。其中使用了上所述的几种方法：</p>
<ul>
<li>Spring模式注解装配</li>
<li><code>@Enable</code>模块装配</li>
<li>Spring条件装配</li>
<li>Spring工厂加载自动装配<ul>
<li>实现类：SpringFactoriesLoader</li>
<li>读取配置文件：org.springframework.boot.autoconfigure/META-INF/spring-factories</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.core.io.support;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFactoriesLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//org.springframework.boot.autoconfigure.EnableAutoConfiguration Enable模块激活自动装配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">"META-INF/spring.factories"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(SpringFactoriesLoader<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;ClassLoader, MultiValueMap&lt;String, String&gt;&gt; cache = <span class="keyword">new</span> ConcurrentReferenceHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringFactoriesLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadFactories</span><span class="params">(Class&lt;T&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(factoryClass, <span class="string">"'factoryClass' must not be null"</span>);</span><br><span class="line">        ClassLoader classLoaderToUse = classLoader;</span><br><span class="line">        <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            classLoaderToUse = SpringFactoriesLoader<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; factoryNames = loadFactoryNames(factoryClass, classLoaderToUse);</span><br><span class="line">        <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">            logger.trace(<span class="string">"Loaded ["</span> + factoryClass.getName() + <span class="string">"] names: "</span> + factoryNames);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;T&gt; result = <span class="keyword">new</span> ArrayList(factoryNames.size());</span><br><span class="line">        Iterator var5 = factoryNames.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            String factoryName = (String)var5.next();</span><br><span class="line">            result.add(instantiateFactory(factoryName, factoryClass, classLoaderToUse));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AnnotationAwareOrderComparator.sort(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, @Nullable ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        String factoryClassName = factoryClass.getName();</span><br><span class="line">        <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">        MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">"META-INF/spring.factories"</span>) : ClassLoader.getSystemResources(<span class="string">"META-INF/spring.factories"</span>);</span><br><span class="line">                LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">                    URL url = (URL)urls.nextElement();</span><br><span class="line">                    UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                    Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                    Iterator var6 = properties.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                        Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                        String factoryClassName = ((String)entry.getKey()).trim();</span><br><span class="line">                        String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                        <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                            String factoryName = var9[var11];</span><br><span class="line">                            result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                cache.put(classLoader, result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to load factories from location [META-INF/spring.factories]"</span>, var13);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">instantiateFactory</span><span class="params">(String instanceClassName, Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; instanceClass = ClassUtils.forName(instanceClassName, classLoader);</span><br><span class="line">            <span class="keyword">if</span> (!factoryClass.isAssignableFrom(instanceClass)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Class ["</span> + instanceClassName + <span class="string">"] is not assignable to ["</span> + factoryClass.getName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ReflectionUtils.accessibleConstructor(instanceClass, <span class="keyword">new</span> Class[<span class="number">0</span>]).newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unable to instantiate factory class: "</span> + factoryClass.getName(), var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 例如spring.factories中的<code>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ConditionalOnClass(&#123; EnableAspectJAutoProxy.class, Aspect.class, Advice.class,</span><br><span class="line">		AnnotatedElement.class &#125;)</span><br><span class="line">@ConditionalOnProperty(prefix &#x3D; &quot;spring.aop&quot;, name &#x3D; &quot;auto&quot;, havingValue &#x3D; &quot;true&quot;, matchIfMissing &#x3D; true)</span><br><span class="line">public class AopAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	@Configuration</span><br><span class="line">	@EnableAspectJAutoProxy(proxyTargetClass &#x3D; false)</span><br><span class="line">	@ConditionalOnProperty(prefix &#x3D; &quot;spring.aop&quot;, name &#x3D; &quot;proxy-target-class&quot;, havingValue &#x3D; &quot;false&quot;, matchIfMissing &#x3D; false)</span><br><span class="line">	public static class JdkDynamicAutoProxyConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Configuration</span><br><span class="line">	@EnableAspectJAutoProxy(proxyTargetClass &#x3D; true)</span><br><span class="line">	@ConditionalOnProperty(prefix &#x3D; &quot;spring.aop&quot;, name &#x3D; &quot;proxy-target-class&quot;, havingValue &#x3D; &quot;true&quot;, matchIfMissing &#x3D; true)</span><br><span class="line">	public static class CglibAutoProxyConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义自动装配"><a href="#自定义自动装配" class="headerlink" title="自定义自动装配"></a>自定义自动装配</h3><ul>
<li><p>启动类激活自动装配：<code>@EnableAutoConfiguration</code></p>
</li>
<li><p>实现自动装配：<code>xxxAutoConfiguration</code>-&gt;<code>UserAutoConfiguration</code></p>
</li>
<li><p>配置自动装配实现：<code>META-INF/spring.factories</code></p>
</li>
<li><p>UserAutoConfiguration实现</p>
<ul>
<li><p><code>@ConditionOnProperty(name = &quot;vip&quot;, address = &quot;China&quot;)</code>条件装配符合条件再装配 </p>
</li>
<li><p><code>@Configuration</code>将当前类装载进容器，</p>
</li>
<li><p><code>@EnableUserByConfiguration</code> Enable模块加载 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.configuration;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user configuration"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<p>具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.bootstrap;</span><br><span class="line"><span class="comment">//启动类</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAutoConfigurationBootstrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestAutoConfigurationBootstrap<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">web</span>(<span class="title">WebApplicationType</span>.<span class="title">NONE</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">run</span>(<span class="title">args</span>)</span>;</span><br><span class="line">        String user = context.getBean(<span class="string">"user"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"user Bean : "</span> + user);</span><br><span class="line">        context.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.aotuconfiguration.condition;</span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//spring模式注解</span></span><br><span class="line"><span class="meta">@ConditionOnProperty</span>(name = <span class="string">"vip"</span>, address = <span class="string">"China"</span>)  <span class="comment">//条件装配</span></span><br><span class="line"><span class="meta">@EnableUserByConfiguration</span> <span class="comment">//Enable模块</span></span><br><span class="line"><span class="comment">//spring.factories中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在resources文件夹中创建META-INF文件夹，然后在META-INF中创建spring.factories文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动装配</span></span><br><span class="line"><span class="meta">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="attr">com.msr.aotuconfiguration.condition.UserAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<p>未完！待完善…</p>
<center size=12>文章有什么错误或者有什么问题，欢迎大家通过通论提交issue给我吧！</center>]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之单列模式</title>
    <url>/posts/design-patterns/2020/05/202005282106.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="单例模式简介"><a href="#单例模式简介" class="headerlink" title="单例模式简介"></a>单例模式简介</h2><p>单例模式可以说是最简单的模式之一，属于创建型模式。单一的类负责创建自己的对象，同时确保该类有且仅有一个对象被创建。同时这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<ul>
<li>单例类智能有一个实例</li>
<li>单例类必须自己创建自己的唯一实例，外部不能去创建</li>
<li>单例类必须提供一个方法来获取该类的对象</li>
</ul>
<p>单列模式的实现主要有：饿汉式和懒汉式两种。下面将详细讲解这两种实现方法。代码的实现中主要使用lombok工具包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--springboot工程可省略version--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//lombok注解</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PRIVATE) <span class="comment">//lombok注解 私有化全参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHunger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关键 可以使用静态变量，也可以使用静态代码块</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonHunger INSTANCE = <span class="keyword">new</span> SingletonHunger();</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="comment">//私有化空参构造，无法在其他类直接new对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonHunger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonHunger <span class="title">getInstance1</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        INSTANCE.setAge(age);</span><br><span class="line">        INSTANCE.setName(name);</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>饿汉式就是在类加载的时候就去就去创建对象，主要是<code>static</code>关键字，static修饰的静态变量或方法在类加载的时候就会被加载到方法区中，只会初始化一次。从static关键字的特性就能很好地理解饿汉式了。对于这个饿汉式可以延伸去了解类的加载，例如java.lang.ClassLoader这个类。</p>
<p>饿汉式是会在类加载的时候就回去实例化对象，虽然可以保证的对象的单例，但是会在一开始就加载很多的对象，一下子内存就上涨了。也有可能加载了不需要的类对象，所以就有了懒汉式。</p>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>​        懒汉式在需要的时候才去实例化对象。即在调用单例类提供方法的时候，采取实例化对象。懒汉式的实现也有很多种。</p>
<h3 id="懒汉式：同步方法—-gt-同步代码块（不怎么推荐）"><a href="#懒汉式：同步方法—-gt-同步代码块（不怎么推荐）" class="headerlink" title="懒汉式：同步方法—&gt;同步代码块（不怎么推荐）"></a>懒汉式：同步方法—&gt;同步代码块（不怎么推荐）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonHunger instance;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="comment">//私有化空参构造，无法在其他类直接new对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonHunger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//最简单、最low的写法，有线程安全的问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonHunger <span class="title">getInstanceV1</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> SingletonHunger();</span><br><span class="line">        instance.setAge(age);</span><br><span class="line">        instance.setName(name);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//改进V1-&gt;V2，解决线程安全最简单、最懒和最烂的做法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletonHunger <span class="title">getInstanceV2</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        instance = <span class="keyword">new</span> SingletonHunger();</span><br><span class="line">        instance.setAge(age);</span><br><span class="line">        instance.setName(name);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//V3 这个也就那样...</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonHunger <span class="title">getInstanceV3</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">        	<span class="keyword">synchronized</span> (SingletonLazy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonHunger();</span><br><span class="line">            instance.setAge(age);</span><br><span class="line">            instance.setName(name);    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上面三种的缺点就不多说了，也不没必要多看。当然还有著名DCL(Double Check Lock)，这个可以多讲</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstanceByDCL</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.对象还没初始化instance为空，当大量的线程"同时到达"一个if时，假设是长时间的大量并发的情况下</span></span><br><span class="line">        <span class="comment">//12.假如在第一个线程成功初始化对象的之后（instance不为空），如果还有线程进来，就直接返回instance</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//2.到达这里只有一个线程拿到锁---&gt; 8.之前没拿到锁的线程，在第一个线程释放锁后，其余的线程来哄抢</span></span><br><span class="line">            <span class="comment">//大量的线程拿不到锁被阻塞（后面的线程就和第二个线程一样的执行流程一样了）</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonLazy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//3.再次判空 ---&gt; 9.第二个线程拿到锁的线程再次判空，由于第一个线程已经初始化，instance不为空</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//4.第一个拿到锁的线程初始化对象</span></span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonLazy();</span><br><span class="line">                    instance.setAge(age);</span><br><span class="line">        			instance.setName(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5.第一个线程执行完，释放锁 ---&gt; 10.第二个线程释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.第一个线程得到对象 11.第二线程拿到同样的对象</span></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然synchronized可以换成Lock，也可以换成自旋锁。自旋锁也是很能装逼，在jdk1.8中的ConcurrentHashMap中就换成了自旋锁。DCL的方法虽然还算可以，但是还有更好的方法。DCL其中还有一个关键就是volatile关键字，就是在<code>instance = new SingletonLazy()</code>时防止指令重排。volatile和自旋锁可以实现轻量级锁。</p>
<h3 id="静态内部类Holder"><a href="#静态内部类Holder" class="headerlink" title="静态内部类Holder"></a>静态内部类Holder</h3><p>​        下面介绍静态内部内类的懒汉式实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonLazy</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonLazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类加载时类加载器操作会加锁（JVM底层实现）&#123;<span class="doctag">@link</span> ClassLoader&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstanceByHolder</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用静态内部内类</span></span><br><span class="line">        <span class="keyword">return</span> SingletonLazy.InstanceHolder.getInstance(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonLazy LAZY = <span class="keyword">new</span> SingletonLazy();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SingletonLazy <span class="title">getInstance</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">            LAZY.setAge(age);</span><br><span class="line">            LAZY.setName(name);</span><br><span class="line">            <span class="keyword">return</span> LAZY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态内部内类只有在调用的时候才会初始化。第一次调用<code>SingletonLazy.InstanceHolder.getInstance(name, age)</code>的时候静态内部类初始化，同时创建外部内的对象。static修饰只会初始化一次。其实静态内部类的原理时利用了ClassLoader的机制，ClassLoader的加载Class的方法有synchronized关键字修饰。在类加载到完成就存在加锁和释放锁的操作。比DCL的方式就少了synchronized或者Lock代码块的加锁和释放锁的操作。所以静态内部类更加常用，比DCL更好，毕竟能不加锁最好就别加锁。至于”自旋锁”则是CAS机制，详细可以去了解JUC的相关知识。PS：后面也会出关于JUC的相关文章。</p>
<h3 id="注册式单列"><a href="#注册式单列" class="headerlink" title="注册式单列"></a>注册式单列</h3><p>​        注册式单例就是把实例化对象放在一个Map集合中类的全限定类名作为key，该类的是实例化对象作为value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonRegistryContainer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Object&gt; IOC = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonRegistryContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 借鉴spring中的单列注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> className 全限定类名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">if</span> (!IOC.containsKey(className)) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!IOC.containsKey(className)) &#123;</span><br><span class="line">                    <span class="comment">//通过反射创建对象</span></span><br><span class="line">                    obj = Class.forName(className).newInstance();</span><br><span class="line">                    IOC.put(className, obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> IOC.get(className);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>简单的看一下Spring中单列对象的注册：<code>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title">SingletonBeanRegistry</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Object NULL_OBJECT = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="comment">//存放单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; registeredSingletons = <span class="keyword">new</span> LinkedHashSet(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; singletonsCurrentlyInCreation = Collections.newSetFromMap(<span class="keyword">new</span> ConcurrentHashMap(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; inCreationCheckExclusions = Collections.newSetFromMap(<span class="keyword">new</span> ConcurrentHashMap(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Exception&gt; suppressedExceptions;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> singletonsCurrentlyInDestruction = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; disposableBeans = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; containedBeanMap = <span class="keyword">new</span> ConcurrentHashMap(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; dependentBeanMap = <span class="keyword">new</span> ConcurrentHashMap(<span class="number">64</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; dependenciesForBeanMap = <span class="keyword">new</span> ConcurrentHashMap(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultSingletonBeanRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注册单例对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerSingleton</span><span class="params">(String beanName, Object singletonObject)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">        Assert.notNull(beanName, <span class="string">"'beanName' must not be null"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            Object oldObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (oldObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not register object ["</span> + singletonObject + <span class="string">"] under bean name '"</span> + beanName + <span class="string">"': there is already object ["</span> + oldObject + <span class="string">"] bound"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//不存在，添加</span></span><br><span class="line">                <span class="keyword">this</span>.addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//添加单例对象到map中</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="keyword">this</span>.singletonObjects.put(beanName, singletonObject != <span class="keyword">null</span> ? singletonObject : NULL_OBJECT);</span><br><span class="line">            <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">            <span class="keyword">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">            <span class="keyword">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//篇幅长，其他省略</span></span><br><span class="line">    ...       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举式单例"><a href="#枚举式单例" class="headerlink" title="枚举式单例"></a>枚举式单例</h3><p>枚举式单例这就厉害，枚举类天生就是单列的。相信看过<code>&lt;Effetvice Java&gt;</code>这本书中的<strong>“用私有构造器或者枚举类型强化Singleton”</strong>就说到使用枚举单列来强化单例(编写一个仅含有单个元素的枚举类型)，因为就算是私有化构造方法，但是还是可以通过<strong>“反射”</strong>和<strong>“反序列化”</strong>就可以破解单例（这个下一个小节介绍，以及其解决方法），枚举类型却能够防止<strong>“反射”</strong>和<strong>“反序列化”</strong>的破坏。下面看一下代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.patterns.creational.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonRegistryEnum implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反射和反序列化破坏时会用到</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonRegistryEnum <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">package</span> com.msr.study.patterns.creational.singleton;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SingletonRegistryEnum instance1 = SingletonRegistryEnum.getInstance();</span><br><span class="line">        SingletonRegistryEnum instance2 = SingletonRegistryEnum.getInstance();</span><br><span class="line">        System.out.println(instance1==instance2); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举类的源码也就这么简单，很难看得出来为什么枚举是单例的。但是我们可以通过反编译其class文件去一探究竟，下面使用到<strong>jad</strong>反编译工具。下载好jad之后，通过命令行执行。具体其他的用法可以百度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jad E:\java\...\SingletonRegistryEnum.class(class文件绝对路径)</span><br></pre></td></tr></table></figure>

<p>执行后就会在就会在jad所在的目录生成<code>SingletonRegistryEnum.jad</code>，通过文本编辑器打开它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.kpdus.com/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   SingletonRegistryEnum.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.study.patterns.creational.singleton;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonRegistryEnum</span> <span class="keyword">extends</span> <span class="title">Enum</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonRegistryEnum[] values()&#123;</span><br><span class="line">        <span class="keyword">return</span> (SingletonRegistryEnum[])$VALUES.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonRegistryEnum <span class="title">valueOf</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (SingletonRegistryEnum)Enum.valueOf(com/msr/study/patterns/creational/singleton/SingletonRegistryEnum, name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//没有空参的构造方法</span></span><br><span class="line">	<span class="comment">//私有化的构造方法，两个参数---下一小节的反射破坏枚举时就会凸显出来了</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonRegistryEnum</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonRegistryEnum <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonRegistryEnum INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonRegistryEnum $VALUES[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块，近初始化一次，有且仅有一份---天生单例</span></span><br><span class="line">        INSTANCE = <span class="keyword">new</span> SingletonRegistryEnum(<span class="string">"INSTANCE"</span>, <span class="number">0</span>);</span><br><span class="line">        $VALUES = (<span class="keyword">new</span> SingletonRegistryEnum[] &#123;</span><br><span class="line">            INSTANCE</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重头戏：单列对象的暴力破解-反射和反序列化"><a href="#重头戏：单列对象的暴力破解-反射和反序列化" class="headerlink" title="重头戏：单列对象的暴力破解(反射和反序列化)"></a>重头戏：单列对象的暴力破解(反射和反序列化)</h3><p>上面的内容讲了那么多，又是否真的是真正可以做到单例呢？答案是不一定哟~</p>
<p>总所周知jdk的反射是十分强大，毕竟有人说反射是框架设计的灵魂，可见其功能的强大。它可以<strong>在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</strong>使用过反射的都知道，就算是<code>private</code>修饰，一样是可以通过反射去获取，<code>setAccessible()</code>送<code>private</code>上天。</p>
<p>把对象转换为字节序列的过程称为对象的序列化。把字节序列恢复为对象的过程称为对象的反序列化。一般用途：把对象的字节序列化通过文件流永久地保存在磁盘中；在网络在传输对象的字节序列，也就是为什么在用json工具或者在web项目运行的时候，可能会出现Serializable的一些异常，有可能就是实体类没有继承Serializable接口。</p>
<p>下面编写一个基于序列化和反序列化去克隆对象的工具类。并且是深度克隆，在原型模式也可以使用这个工具类，不用去重写<code>clone()</code>就可以达到深度克隆。而这个工具类的序列化和反序列化是基于内存，垃圾回收时就会清理，基于内存速度快。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.patterns.creational.singleton;</span><br><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectCloneUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Serializable&gt; <span class="function">T <span class="title">clone</span><span class="params">(T obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="comment">//垃圾回收时就会清理</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bout);</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        ByteArrayInputStream bin = <span class="keyword">new</span> ByteArrayInputStream(bout.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bin);</span><br><span class="line">        <span class="keyword">return</span> (T) ois.readObject();</span><br><span class="line">        <span class="comment">// 说明：调用 ByteArrayInputStream 或 ByteArrayOutputStream 对象的 close 方法没有任何意义</span></span><br><span class="line">        <span class="comment">// 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源（如文件流）的释放</span></span><br><span class="line">        <span class="comment">// 网上很多的反序列化的的例子用的是文件流：把对象序列化到磁盘的文件上，在读取文件反序列化生成对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在开始尝试用放射和反序列化破坏上面所说的单例模式的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BreakTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"==========破坏饿汉式=========="</span>);</span><br><span class="line">            <span class="comment">//通过提供的接口去获取对象</span></span><br><span class="line">            SingletonHunger instance = SingletonHunger.getInstance();</span><br><span class="line">            <span class="comment">//反射破坏</span></span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(SingletonHunger<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            Constructor&lt;?&gt; constructor = aClass.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">//反射获取</span></span><br><span class="line">            SingletonHunger reflectObj = (SingletonHunger) constructor.newInstance();</span><br><span class="line">            System.out.println(reflectObj == instance); <span class="comment">//false</span></span><br><span class="line">            <span class="comment">//反序列化破坏</span></span><br><span class="line">            SingletonHunger clone = ObjectCloneUtil.clone(instance);</span><br><span class="line">            System.out.println(clone == instance); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========破坏DCL=========="</span>);</span><br><span class="line">            <span class="comment">//通过提供的接口去获取对象</span></span><br><span class="line">            SingletonLazy instance2 = SingletonLazy.getInstanceByDCL(<span class="string">"张三"</span>, <span class="string">"16"</span>);</span><br><span class="line">            <span class="comment">//反射破坏</span></span><br><span class="line">            Class&lt;?&gt; aClass2 = Class.forName(SingletonLazy<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            Constructor&lt;?&gt; constructor2 = aClass2.getDeclaredConstructor();</span><br><span class="line">            constructor2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            SingletonLazy reflectObj2 = (SingletonLazy) constructor2.newInstance();</span><br><span class="line">            System.out.println(reflectObj2 == instance2);</span><br><span class="line">            <span class="comment">//反序列化破坏</span></span><br><span class="line">            SingletonLazy clone2 = ObjectCloneUtil.clone(instance2);</span><br><span class="line">            System.out.println(clone2 == instance2);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"==========破坏静态内部类=========="</span>);</span><br><span class="line">            SingletonHolder instance3 = SingletonHolder.getInstanceByHolder();</span><br><span class="line">            </span><br><span class="line">            Class&lt;?&gt; aClass3 = Class.forName(SingletonHolder<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">            Constructor&lt;?&gt; constructor3 = aClass3.getDeclaredConstructor();</span><br><span class="line">            constructor3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            SingletonHolder reflectObj3 = (SingletonHolder) constructor3.newInstance();</span><br><span class="line">            System.out.println(instance3 == reflectObj3); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">            SingletonHolder clone3 = ObjectCloneUtil.clone(instance3);</span><br><span class="line">            System.out.println(clone3 == instance3); <span class="comment">//false</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在通过反射去获取枚举类型的构造函数的时候，会出现NoSuchMethodException异常，在上一小节中通过对枚举类型的反编译之后，会发现只有一个两个参数的私有的构造方法。没有无参的构造方法。去获取两个参数的构造方法的时候，虽然成功获取不过还是会报错Cannot reflectively create enum objects，很明显是”不能通过反射去创建枚举对象”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"==========破坏枚举类型单例=========="</span>);</span><br><span class="line">SingletonRegistryEnum instance4 = SingletonRegistryEnum.getInstance();</span><br><span class="line">Class&lt;?&gt; aClass4 = Class.forName(SingletonRegistryEnum<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"><span class="comment">//会直接报错：</span></span><br><span class="line"><span class="comment">//java.lang.NoSuchMethodException:com.msr.study.patterns.creational.singleton.SingletonRegistryEnum.&lt;init&gt;()</span></span><br><span class="line">Constructor&lt;?&gt; constructor4 = aClass4.getDeclaredConstructor();</span><br><span class="line">constructor4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//那就去获取两个参数的构造方法 </span></span><br><span class="line">Constructor&lt;?&gt; constructor5 = aClass4.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">constructor5.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//newInstance()报错：java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span></span><br><span class="line">SingletonRegistryEnum reflectObj4 =(SingletonRegistryEnum) constructor4.newInstance()</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反编译的片段</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonRegistryEnum</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(s, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>WTF？？？为什么呢？下面来通过去看一下newInstance()的源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">                checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这些判断条件是本地方法，是通过底层的JVM去判断的</span></span><br><span class="line">        <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot reflectively create enum objects"</span>); <span class="comment">//真相大白</span></span><br><span class="line">        ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">        <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ca = acquireConstructorAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        T inst = (T) ca.newInstance(initargs);</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以功能强大的反射遇到枚举类型就不太好使了。那么反序列化呢，它又会不会破坏单列？下面测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SingletonRegistryEnum instance4 = SingletonRegistryEnum.getInstance();</span><br><span class="line">SingletonRegistryEnum registryEnum = ObjectCloneUtil.clone(instance4);</span><br><span class="line">System.out.println(instance4==registryEnum); <span class="comment">//结果是：true</span></span><br></pre></td></tr></table></figure>

<p>为什么这么神奇？其实可以看一下反序列化中的ObjectInputStream的readObject()方法的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span><span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (enableOverride) &#123;</span><br><span class="line">            <span class="keyword">return</span> readObjectOverride();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//关键方法</span></span><br><span class="line">            Object obj = readObject0(<span class="keyword">false</span>);</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        		...</span><br><span class="line">				<span class="comment">//switch语句</span></span><br><span class="line">                <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">    				<span class="comment">//关键readEnum()方法</span></span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Enum&lt;?&gt; readEnum(<span class="keyword">boolean</span> unshared) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (bin.readByte() != TC_ENUM) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (!desc.isEnum()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"non-enum class: "</span> + desc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> enumHandle = handles.assign(unshared ? unsharedMarker : <span class="keyword">null</span>);</span><br><span class="line">        ClassNotFoundException resolveEx = desc.getResolveException();</span><br><span class="line">        <span class="keyword">if</span> (resolveEx != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handles.markException(enumHandle, resolveEx);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String name = readString(<span class="keyword">false</span>);</span><br><span class="line">        Enum&lt;?&gt; result = <span class="keyword">null</span>;</span><br><span class="line">        Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                Enum&lt;?&gt; en = Enum.valueOf((Class)cl, name);</span><br><span class="line">                result = en;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidObjectException(</span><br><span class="line">                    <span class="string">"enum constant "</span> + name + <span class="string">" does not exist in "</span> +</span><br><span class="line">                    cl).initCause(ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!unshared) &#123;</span><br><span class="line">                handles.setObject(enumHandle, result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handles.finish(enumHandle);</span><br><span class="line">        passHandle = enumHandle;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以发现枚举类型其实通过类名和 Class 对象类找到一个唯一的枚举对象。因此枚举对象不可能被类加载器加载多次。</p>
<p><strong>解决方法</strong>：对于反序列化的解决方法就是在类中添加readResolve()方法。例如在静态内部类添加了之后，再去尝试使用反序列化破坏单例就不好使了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.getInstanceByHolder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原因是ObjectInputStream中的readObject()方法—&gt;readObject0()方法—&gt;readOrdinaryObject()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bin.readByte() != TC_OBJECT) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">        desc.checkDeserialize();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">        <span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span> || <span class="title">cl</span> </span>== Class<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">                || <span class="title">cl</span> </span>== ObjectStreamClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"invalid class descriptor"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//调用了 ObjectStreamClass 的 isInstantiable()方法</span></span><br><span class="line">            obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">                desc.forClass().getName(),</span><br><span class="line">                <span class="string">"unable to create instance"</span>).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码很简单</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isInstantiable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	requireInitialized();</span><br><span class="line">	<span class="keyword">return</span> (cons != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>isInstantiable()方法的代码很简单，就是判断一下构造方法是否为空，构造方法不为空就返回true。那就是意味着只要有无参构造方法就会实例化，很明显编写的单例类是含有一个无参的构造方法，最后`obj = desc.isInstantiable() ? desc.newInstance() : null;三目运算符还是创建了一个新对象，我们还需要再往下看readOrdinaryObject()方法中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bin.readByte() != TC_OBJECT) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">        desc.checkDeserialize();</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">        <span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span> || <span class="title">cl</span> </span>== Class<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">                || <span class="title">cl</span> </span>== ObjectStreamClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"invalid class descriptor"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object obj;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//obj被创建，不为空</span></span><br><span class="line">            obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">                desc.forClass().getName(),</span><br><span class="line">                <span class="string">"unable to create instance"</span>).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">		<span class="comment">//if判断，调用hasReadResolveMethod()</span></span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            desc.hasReadResolveMethod())</span><br><span class="line">        &#123;</span><br><span class="line">            Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">            <span class="keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;</span><br><span class="line">                rep = cloneArray(rep);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rep != obj) &#123;</span><br><span class="line">                <span class="comment">// Filter the replacement object</span></span><br><span class="line">                <span class="keyword">if</span> (rep != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rep.getClass().isArray()) &#123;</span><br><span class="line">                        filterCheck(rep.getClass(), Array.getLength(rep));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        filterCheck(rep.getClass(), -<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                handles.setObject(passHandle, obj = rep);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再进一步又调用了hasReadResolveMethod()方法。逻辑又是非常简单，就是判断一下readResolveMethod是否为空。那么readResolveMethod 是在哪里赋值的呢？通过全局查找找到了赋值代码在私有方法ObjectStreamClass()方法中给 readResolveMethod 进行赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasReadResolveMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	requireInitialized();</span><br><span class="line">	<span class="keyword">return</span> (readResolveMethod != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">readResolveMethod = getInheritableMethod(cl, <span class="string">"readResolve"</span>, <span class="keyword">null</span>, Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>其实就是通过反射区找到一个无参的readResolve()方法，并且保存下来。所以再回到ObjectInputStream 的 readOrdinaryObject()方法继续往下看，如果存在readResolve()方法就会调用 invokeReadResolve()方法，然后返回<code>readResolveMethod.invoke(obj, (Object[]) null);</code>的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invokeReadResolve</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException, UnsupportedOperationException</span>&#123;</span><br><span class="line">        requireInitialized();</span><br><span class="line">        <span class="keyword">if</span> (readResolveMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//调用readResolveMethod</span></span><br><span class="line">                <span class="keyword">return</span> readResolveMethod.invoke(obj, (Object[]) <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">                Throwable th = ex.getTargetException();</span><br><span class="line">                <span class="keyword">if</span> (th <span class="keyword">instanceof</span> ObjectStreamException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (ObjectStreamException) th;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    throwMiscException(th);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(th);  <span class="comment">// never reached</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">                <span class="comment">// should not occur, as access checks have been suppressed</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其实在这程中还是会有一个新的对象产生，只不过是没有被返回，返回的是前面创建的对象，这样就会产生垃圾对象了。那如果，创建对象的动作发生频率增大，就意味着内存分配开销也就随之增大。</p>
<p>其实还有一种单例：线程内单例(ThreadLocal)，那只是针对单个线程内，这里就不展开讲了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>枚举类能够同时防止反射和反序列化的破坏，其他的方法只能通过添加Resolve()方法，至于反射就不太好解决。其实可以在开发的时候明确单例类不能通过反射去创建对象实例，并且在私有的构造方法内做一点保护措施。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (lazy==<span class="keyword">null</span>)&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"不能反射创建对象"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"对象已创建"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL笔记：持续更新</title>
    <url>/posts/mysql/2021/03/202103302310.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL主从复制参数"><a href="#MySQL主从复制参数" class="headerlink" title="MySQL主从复制参数"></a>MySQL主从复制参数</h1><p><strong>Master端：</strong></p>
<ol>
<li>–binlog-do-db：指定数据库的操作事件被记录</li>
<li>–binlog-ignore-db：指定某个数据库的操作事件不被操作</li>
<li>set sql_log_bin = 0：会话级别所作操作不被记录</li>
</ol>
<p>注意：在Master段进行复制过滤惠导致主服务器上的二进制日志记录不完整，一旦主服务器崩溃将无法做到还原所有数据。</p>
<p><strong>Slave端：</strong></p>
<ol>
<li>–replicate-do-db：需要复制的数据库名，如果复制多个数据库，重复设置这个选项</li>
<li>–replicate-ignore-db：不需要复制的数据库名，如果复制多个数据库，重复设置这个选项</li>
<li>–replicate-do-table：同理，表级别的操作</li>
<li>–replcate-ignore-table：同理，表级别的操作</li>
<li>–replicate-wild-do-table=foo%.bar%：复制以foo开头的数据库，bar结尾的表</li>
<li>–replicate-wild-ignore-table=foo%.bar%：不复制以foo开头的数据库，bar结尾的表</li>
</ol>
<p>注意：Slave端在接受Master端传过来的日志时，是没有选择权的，Master端写过的日志Slave端全部都接收并写到磁盘，保存在中继日志中。但是Slave端在应用那些数据时是有选择权的。</p>
<p><strong>配置方式：</strong></p>
<p>第一：配置文件方式</p>
<p>第二：在线配置，例如</p>
<p>change replication filter replicate_do_db=(db1,db2)</p>
<h1 id="MySQL半同步复制原理"><a href="#MySQL半同步复制原理" class="headerlink" title="MySQL半同步复制原理"></a>MySQL半同步复制原理</h1><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/MySQL%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6.png" alt=""></p>
<p>默认情况下，MySQL复制是异步的，主库执行完Commit之后，主库写入binlog后就可以返回给客户端，无需等待binlog发送给从库。当主库的一个写入事务并提交成功，而从库尚未得到主库的binlog时，主库宕机，从而可能导致从库丢失该事务，造成主从不一致。</p>
<p>因此，MySQL引入了半同步复制。半同步复制保证主库的每一个binlog都能可靠得发送到从库上，主库在每次提交事务时，并不及时反馈给客户端，而是等待其中一个从库也接收到binlog并成功写入中继日志后，主库才返回给客户端。此时，至少有两份日志记录，一份在主库的binlog，另外一份至少一个从库的中继日志上，从而保证了数据的一致性。</p>
<p><strong>配置</strong></p>
<p>rpl_semi_sync_wait_point：AFTER_COMMIT和AFTER_SYNC</p>
<ol>
<li><p>半同步复制AFTER_COMMIT(5.6默认值)：Master将每个事务写入binlog(sync_binlog=1)，传递到Slave刷新到磁盘(sync_relay=1)，同时Master提交事务。Master等待Slave反馈收到relay log，只有收到ACK后Master才将commit ok结果反馈给客户端。</p>
<p>存在的问题：在使用AFTER_COMMIT的模式下，客户端事务在存储引擎提交后，在得到从库确认的过程中，主库宕机了。此时主句在等待从库ACK的时候，虽然没有返回当前客户端，但是事务已经提交了，其他客户端惠读取到已提交的事务。如果从库还没读到该事务的events，同时主库发生了crash，然后切换到备库，那么之前督导的事务就不见了，出现幻读。</p>
</li>
<li><p>无损复制AFTER_SYNC(5.7默认值，5.6没有)：Master将每个事务写到binlog中，发送给Slave并刷新到磁盘(relay log)。Master等待Slave反馈接受到relay log之后，再提交事务并返回commit ok给客户端。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/%E5%8D%8A%E5%90%8C%E6%AD%A5%E5%A4%8D%E5%88%B6%EF%BC%9Aafter_commit&after_sync.png" alt=""></p>
<p>半同步复制和无损复制的对比</p>
<ol>
<li>半同步复制时先engine commit再ACK</li>
<li>无损复制是先ACK再engine commit</li>
<li>半同步复制意味着在Master节点上，刚刚提交的事务对数据库的修改，对其他事务是可见的。所以，如果等待Slave ACK的时候crash了，对其他事务惠造成幻读，丢失数据。</li>
<li>无损复制在Master写完binlog之后，就传输给Slave，但还没去commit，意味着当前这个事务对数据库的修改。其他事务是不可见的。所以不会出现幻读和数据丢失风险。</li>
</ol>
<p><strong>配置</strong></p>
<p>在MySQL的lib/plugin里面有两个插件：semisync_master.so和semisync_slave.so。分别在Master和Slave安装；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在主库安装</span><br><span class="line">install plugin rpl_semi_sync_master soname ‘semisync_master.so’;</span><br><span class="line">show plugin;</span><br><span class="line">set global rpl_semi_sync_master&#x3D;on;</span><br><span class="line">show variables like &#39;%semi%&#39;;</span><br><span class="line"></span><br><span class="line">#在从库安装</span><br><span class="line">install plugin rpl_semi_sync_slave soname ‘semisync_master.so’</span><br><span class="line">show plugin;</span><br><span class="line">set global rpl_semi_sync_slave&#x3D;on;</span><br><span class="line">show variables like &#39;%semi%&#39;;</span><br><span class="line">stop slave;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p>关键参数：</p>
<p>rpl_semi_sync_master_enabled =on   开启半同步功能</p>
<p>rpl_semi_sync_master_timeout   单位毫秒，表示主库等待从库回复消息的时间超过该值，就自动切换为异步复制模式</p>
<p>rpl_semi_sync_master_wait_no_slave   默认on。表示主库每个事务提交都要等待从库的ACK信号。</p>
<p>rpl_semi_sync_master_wait_for_slave-count   控制主库接受多少个从库写事务成功反馈，才返回commit ok给客户端</p>
<p>rpl_semi_sync_master_wiat_point   默认值AFTER_SYNC，含义是使用无损复制。</p>
<h1 id="手动切换主从"><a href="#手动切换主从" class="headerlink" title="手动切换主从"></a>手动切换主从</h1><p><strong>正常切换</strong></p>
<ol>
<li><p>对主库进行全表锁定：flush tables with read lock;</p>
</li>
<li><p>在Master执行：show processlist;</p>
<p>显示：Master has sent all binlog to slave;waiting for binlog to be update</p>
</li>
<li><p>在Slave执行：show processlist;</p>
<p>显示：Slave has read all relay log;waiting for more updates</p>
</li>
<li><p>停止slave io线程：stop slave io_thread;</p>
</li>
<li><p>将Slave提升为Master</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">#删除所有binlog日志文件，并将日志索引清空，重新开始所有新的日志文件。</span><br><span class="line">reset master;</span><br><span class="line">#删除所有master.info和relay-log.inf文件以及所有的relay log文件，并重新启用一个新的relay log文件</span><br><span class="line">reset slave;</span><br><span class="line">#比reset slave，还会删除内存中的连接信息</span><br><span class="line">reset slave all;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看salve是否只读模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 只读模式需要修改配置文件，注释read-only&#x3D;1,并重启mysql服务</span><br><span class="line"># 不重启mysql,直接使用命令。不过下次重启mysql就会失效</span><br><span class="line">set global read_only&#x3D;1;</span><br><span class="line">show variables like &#39;%read only%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将Master变为Slave</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在新的Master上创建同步使用的用户</span><br><span class="line">grant replication slave on *.* to repl@192.168.79.150 indentified by &#39;123456&#39;;</span><br><span class="line"># 将新的slave设置为只读：1、配置文件修改并重启mysql。2、命令修改</span><br><span class="line">set global read_only&#x3D;on;</span><br><span class="line"># 在新的slave上释放全局锁</span><br><span class="line">unlock tables;</span><br><span class="line"># 重置binlog</span><br><span class="line">reset master;</span><br><span class="line"># master连接信息</span><br><span class="line">change master to master_host&#x3D;&#39;192.168.79.150&#39;,master_port&#x3D;&#39;3306&#39;,master_user&#x3D;&#39;repl&#39;,master_password&#x3D;&#39;123456&#39;,master_log_file&#x3D;&#39;mysql-bin.000001&#39;,master_log_pos&#x3D;599,master_connect_retry&#x3D;10;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="持续更新…"><a href="#持续更新…" class="headerlink" title="持续更新…"></a>持续更新…</h1><p>TODO</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL集群管理之PXC</title>
    <url>/posts/mysql/2021/03/202103281932.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>MySQL集群管理之MHA</title>
    <url>/posts/mysql/2021/03/202103281932.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>MySQL集群管理之GTID</title>
    <url>/posts/mysql/2021/03/202103281932.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>MySQL集群实战(一主多从，两主多从到SpringBoot多数据源实战)</title>
    <url>/posts/mysql/2021/03/202103281450.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL主从复制概述"><a href="#MySQL主从复制概述" class="headerlink" title="MySQL主从复制概述"></a>MySQL主从复制概述</h1><p>​        在实际生产中，数据的重要性不言而喻</p>
<p>​        如果我们的数据库只有一台服务器，那么很容易产生单点故障的问题，比如这台服务器访问压力过大而没有响应或者奔溃，那么服务就不可用了，再比如这台服务器的硬盘坏了，那么整个数据库的数据就全部丢失了，这是重大的安全事故.</p>
<p>​        为了避免服务的不可用以及保障数据的安全可靠性，我们至少需要部署两台或两台以上服务器来存储数据库数据，也就是我们需要将数据复制多份部署在多台不同的服务器上，即使有一台服务器出现故障了，其他服务器依然可以继续提供服务.</p>
<p>​        MySQL提供了主从复制功能以提高服务的可用性与数据的安全可靠性.</p>
<p>​        主从复制是指服务器分为主服务器和从服务器，主服务器负责读和写，从服务器只负责读，主从复制也叫 master/slave，master是主，slave是从，但是并没有强制，也就是说从也可以写，主也可以读，只不过一般我们不这么做。</p>
<p>​        主从复制可以实现对数据库备份和读写分离</p>
<h2 id="MySQL的主从复制架构"><a href="#MySQL的主从复制架构" class="headerlink" title="MySQL的主从复制架构"></a>MySQL的主从复制架构</h2><p><strong>一主多从架构</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/mysql-ms.png" alt=""></p>
<p><strong>双主双从结构</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/project.png" alt=""></p>
<h2 id="MySQL主从复制原理"><a href="#MySQL主从复制原理" class="headerlink" title="MySQL主从复制原理"></a>MySQL主从复制原理</h2><ul>
<li><p>当主库服务器上的数据发生改变时，则将其改变写入二进制事件日志文件中</p>
</li>
<li><p>从库服务器会在一定时间间隔内对主库服务器上的二进制日志进行探测，探测其是否发生过改变，如果探测到主库服务器的二进制事件日志发生了改变，则开始一个 I/O Thread 请求 master 二进制事件日志</p>
</li>
<li><p>同时主库服务器为每个 I/O Thread 启动一个dump Thread，用于向其发送二进制事件日志</p>
</li>
<li><p>从库服务器将接收到的二进制事件日志保存至自己本地的中继日志文件(relaylog)中</p>
</li>
<li><p>从库服务器将启动 SQL Thread 从中继日志中读取二进制日志，在本地重放，使得其数据和主服务器保持一致；</p>
</li>
<li><p>最后 I/O Thread 和 SQL Thread 将进入睡眠状态，等待下一次被唤醒</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/ShardingSphere/replica.png" alt=""></p>
<p><strong>主从复制的过程会有很小的延迟，基本没有影响</strong></p>
<h1 id="MySQL多实例搭建"><a href="#MySQL多实例搭建" class="headerlink" title="MySQL多实例搭建"></a>MySQL多实例搭建</h1><p>​        MySQL的多实例就是指安装了MySQL之后，在一台Linux机器上启动多个MySQL实例(主要用于学习)。</p>
<h2 id="多实例配置"><a href="#多实例配置" class="headerlink" title="多实例配置"></a>多实例配置</h2><ul>
<li><p>安装mysql，下载mysql的安装包之后，解压。</p>
</li>
<li><p>创建mysql用户和用户组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line">chown -R mysql.mysql &#x2F;usr&#x2F;local&#x2F;mysql5.7</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据目录用于存放mysql多实例数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309</span><br><span class="line">mkdir -p &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3310</span><br></pre></td></tr></table></figure>
</li>
<li><p>在mysql的解压目录下的bin目录下执行命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;mysqld --initialize --console --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7 --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307 --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">.&#x2F;mysqld --initialize --console --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7 --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308 --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">.&#x2F;mysqld --initialize --console --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7 --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309 --user&#x3D;mysql</span><br><span class="line"></span><br><span class="line">.&#x2F;mysqld --initialize --console --basedir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7 --datadir&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;33010 --user&#x3D;mysql</span><br></pre></td></tr></table></figure>

<p><strong>注意：–initialize 会随机生成root用户的密码。–console控制台输出初始化日志。这就可以看到生成的root密码。–user指定运行MySQL实例的用户</strong></p>
</li>
<li><p>在各自的数据目录下创建配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3307端口&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[client]</span><br><span class="line">port        &#x3D; 3307</span><br><span class="line">socket      &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307&#x2F;mysql.sock</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port    &#x3D; 3307</span><br><span class="line">socket  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307&#x2F;mysql.sock</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307</span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307&#x2F;error.log</span><br><span class="line">pid-file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3307&#x2F;mysql.pid</span><br><span class="line"></span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">autocommit &#x3D; 1</span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3308端口&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[client]</span><br><span class="line">port        &#x3D; 3308</span><br><span class="line">socket      &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308&#x2F;mysql.sock</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port    &#x3D; 3308</span><br><span class="line">socket  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308&#x2F;mysql.sock</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308</span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308&#x2F;error.log</span><br><span class="line">pid-file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308&#x2F;mysql.pid</span><br><span class="line"></span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">autocommit &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3309端口&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[client]</span><br><span class="line">port        &#x3D; 3309</span><br><span class="line">socket      &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309&#x2F;mysql.sock</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port    &#x3D; 3309</span><br><span class="line">socket  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309&#x2F;mysql.sock</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309</span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309&#x2F;error.log</span><br><span class="line">pid-file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309&#x2F;mysql.pid</span><br><span class="line"></span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">autocommit &#x3D; 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3310端口&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[client]</span><br><span class="line">port        &#x3D; 3310</span><br><span class="line">socket      &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3310&#x2F;mysql.sock</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">port    &#x3D; 3310</span><br><span class="line">socket  &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3310&#x2F;mysql.sock</span><br><span class="line">datadir &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3310</span><br><span class="line">log-error &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3310&#x2F;error.log</span><br><span class="line">pid-file &#x3D; &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3310&#x2F;mysql.pid</span><br><span class="line"></span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">autocommit &#x3D; 1</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="启动多实例"><a href="#启动多实例" class="headerlink" title="启动多实例"></a>启动多实例</h2><p>在MySQL的安装目录下bin目录执行</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3307/my.cnf &amp;</span><br><span class="line">  </span><br><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3308/my.cnf &amp;</span><br><span class="line">  </span><br><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3309/my.cnf &amp;</span><br><span class="line">  </span><br><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3310/my.cnf &amp;</span><br></pre></td></tr></table></figure>

<p><strong>登录实例</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mysql -uroot -p -P3307 -h127.0.0.1</span><br><span class="line">./mysql -uroot -p -P3308 -h127.0.0.1</span><br><span class="line">./mysql -uroot -p -P3309 -h127.0.0.1</span><br><span class="line">./mysql -uroot -p -P3310 -h127.0.0.1</span><br></pre></td></tr></table></figure>

<p><strong>修改密码</strong></p>
<p><code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123456;&#39;</code></p>
<p><strong>开启远程访问许可</strong></p>
<p><code>grant all privileges on *.* to root@&#39;%&#39; identified by &#39;123456&#39;;</code>   </p>
<p>其中*.* 的第一个<em>表示所有数据库名，第二个</em>表示所有的数据库表</p>
<p>root@’%’ 中的root表示用户名</p>
<p>%表示所有ip地址，%也可以指定具体的ip地址，比如root@localhost，<a href="mailto:root@192.168.10.129">root@192.168.10.129</a>。</p>
<p><strong>刷新权限</strong></p>
<p><code>flush privileges;</code></p>
<h2 id="多实例关闭"><a href="#多实例关闭" class="headerlink" title="多实例关闭"></a>多实例关闭</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mysqladmin -uroot -p -P3307 -h127.0.0.1 shutdown</span><br><span class="line">./mysqladmin -uroot -p -P3308 -h127.0.0.1 shutdown</span><br><span class="line">./mysqladmin -uroot -p -P3309 -h127.0.0.1 shutdown</span><br><span class="line">./mysqladmin -uroot -p -P3310 -h127.0.0.1 shutdown</span><br></pre></td></tr></table></figure>

<h1 id="MySQL一主多从架构搭建"><a href="#MySQL一主多从架构搭建" class="headerlink" title="MySQL一主多从架构搭建"></a>MySQL一主多从架构搭建</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>在MySQL主服务器(3307)配置文件my.cnf里面加入</strong></p>
<p>log-bin=mysql-bin      #表示启用二进制日志</p>
<p>server-id=3307         #表示server编号，编号要唯一</p>
<p><strong>在MySQL从服务器(3308)配置文件my.cnf里面加入</strong></p>
<p>server-id=3308    </p>
<p><strong>在MySQL从服务器(3309)配置文件my.cnf里面加入</strong></p>
<p>server-id=3309    </p>
<p><strong>在MySQL从服务器(3310)配置文件my.cnf里面加入</strong></p>
<p>server-id=3310 </p>
<h2 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h2><ol>
<li><p>登录，<code>./mysql -uroot -p -P3307 -h127.0.0.1</code></p>
</li>
<li><p>创建复制数据的账户并且授权：<code>grant replication slave on *.* to &#39;copy&#39;@&#39;%&#39; identified by &#39;123456&#39;;</code></p>
</li>
<li><p>查看主库状态</p>
<p>mysql主库状态默认值：<code>File：mysql-bin.000001</code>。<code>Position：154</code>。因为执行过授权语句，所以偏移量会变化。所以需要充值一下master的偏移量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/mysql002.png" alt=""></p>
</li>
</ol>
<h2 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h2><ol>
<li><p>查看从库状态：<code>show slave status \G;</code>结果会是：Empty set (0.00 sec)。从库的初始状态。如果不是需要重置：<code>reset slave;</code></p>
</li>
<li><p>设置监听的主库并开始执行复制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">change master to master_host='192.168.79.150',master_user='copy',master_port=3307,master_password='123456',master_log_file='mysql-bin.000001',master_log_pos=154;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<p><strong>master_host</strong> ：Master的IP地址</p>
<p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p>
<p><strong>master_user</strong>：用于数据同步的用户</p>
<p><strong>master_password</strong>：用于同步的用户的密码</p>
<p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p>
<p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p>
</li>
<li><p>查看从库状态：<code>show slave status;</code></p>
<p><code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>的值为yes说明slave开启成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.79.150</span><br><span class="line">                  Master_User: copy</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: dev1-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 526</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 3307</span><br><span class="line">                  Master_UUID: be3a5680-8fdd-11eb-897a-000c297b3e36</span><br><span class="line">             Master_Info_File: &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3309&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li><p>连接上主库，在主库创建一个数据库，再在此库里面创建一个表并写入一下数据。</p>
</li>
<li><p>为了方便可以使用Navicat之类的软件进行操作</p>
</li>
<li><p>查看在主库创建的表数据库和表及其数据是否存在。数据存在主从模式搭建成功</p>
</li>
<li><p>查看一下主库的binlong：<code>show binlog events in &#39;mysql-bin.000001&#39;\G;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show binlog events in &#39;mysql-bin.000001&#39;\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 4</span><br><span class="line"> Event_type: Format_desc</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 123</span><br><span class="line">       Info: Server ver: 5.7.24-log, Binlog ver: 4</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 123</span><br><span class="line"> Event_type: Previous_gtids</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 154</span><br><span class="line">       Info:</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 154</span><br><span class="line"> Event_type: Anonymous_Gtid</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 219</span><br><span class="line">       Info: SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 219</span><br><span class="line"> Event_type: Query</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 368</span><br><span class="line">       Info: CREATE DATABASE &#96;shop&#96; CHARACTER SET &#39;utf8mb4&#39; COLLATE &#39;utf8mb4_general_ci&#39;</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 368</span><br><span class="line"> Event_type: Anonymous_Gtid</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 433</span><br><span class="line">       Info: SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 433</span><br><span class="line"> Event_type: Query</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 628</span><br><span class="line">       Info: use &#96;shop&#96;; CREATE TABLE &#96;shop&#96;.&#96;order&#96;  (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(255) NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">)</span><br><span class="line">*************************** 7. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 628</span><br><span class="line"> Event_type: Anonymous_Gtid</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 693</span><br><span class="line">       Info: SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;</span><br><span class="line">*************************** 8. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 693</span><br><span class="line"> Event_type: Query</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 765</span><br><span class="line">       Info: BEGIN</span><br><span class="line">*************************** 9. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 765</span><br><span class="line"> Event_type: Table_map</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 816</span><br><span class="line">       Info: table_id: 109 (shop.order)</span><br><span class="line">*************************** 10. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 816</span><br><span class="line"> Event_type: Write_rows</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 862</span><br><span class="line">       Info: table_id: 109 flags: STMT_END_F</span><br><span class="line">*************************** 11. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 862</span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 893</span><br><span class="line">       Info: COMMIT &#x2F;* xid&#x3D;94 *&#x2F;</span><br><span class="line">*************************** 12. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 893</span><br><span class="line"> Event_type: Anonymous_Gtid</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 958</span><br><span class="line">       Info: SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;</span><br><span class="line">*************************** 13. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 958</span><br><span class="line"> Event_type: Query</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 1030</span><br><span class="line">       Info: BEGIN</span><br><span class="line">*************************** 14. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 1030</span><br><span class="line"> Event_type: Table_map</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 1081</span><br><span class="line">       Info: table_id: 109 (shop.order)</span><br><span class="line">*************************** 15. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 1081</span><br><span class="line"> Event_type: Write_rows</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 1126</span><br><span class="line">       Info: table_id: 109 flags: STMT_END_F</span><br><span class="line">*************************** 16. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000001</span><br><span class="line">        Pos: 1126</span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: 3307</span><br><span class="line">End_log_pos: 1157</span><br><span class="line">       Info: COMMIT &#x2F;* xid&#x3D;97 *&#x2F;</span><br><span class="line">16 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看slave的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; mysql&gt; show slave status \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.79.150</span><br><span class="line">                  Master_User: copy</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 1157</span><br><span class="line">               Relay_Log_File: dev1-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 1323</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1157</span><br><span class="line">              Relay_Log_Space: 1529</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File:</span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File:</span><br><span class="line">           Master_SSL_CA_Path:</span><br><span class="line">              Master_SSL_Cert:</span><br><span class="line">            Master_SSL_Cipher:</span><br><span class="line">               Master_SSL_Key:</span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error:</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error:</span><br><span class="line">  Replicate_Ignore_Server_Ids:</span><br><span class="line">             Master_Server_Id: 3307</span><br><span class="line">                  Master_UUID: be3a5680-8fdd-11eb-897a-000c297b3e36</span><br><span class="line">             Master_Info_File: &#x2F;usr&#x2F;local&#x2F;mysql5.7&#x2F;data&#x2F;3308&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind:</span><br><span class="line">      Last_IO_Error_Timestamp:</span><br><span class="line">     Last_SQL_Error_Timestamp:</span><br><span class="line">               Master_SSL_Crl:</span><br><span class="line">           Master_SSL_Crlpath:</span><br><span class="line">           Retrieved_Gtid_Set:</span><br><span class="line">            Executed_Gtid_Set:</span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB:</span><br><span class="line">                 Channel_Name:</span><br><span class="line">           Master_TLS_Version:</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>​        在主库写入数据，数据会同步到从库中，但是当在从库写入一条数据时并不会同步到其他从库和主库中。当一个表的数据的主键是自增的。当主库插入数据时，单独在从库写入的数据和主库同步过来的数据的主键发生冲突时，该从库的数据不会显示主库同步过来的数据。此时从库的状态中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Read_Master_Log_Pos: 1157  # 这一项依旧会随着主库的写入而变化，即同步主库的数据。</span><br><span class="line">Relay_Log_Pos: 1323        # 这一项会停止不动，这是中继日志的操作。数据会无法回放</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: NO      # 这一项会变成No。</span><br></pre></td></tr></table></figure>

<p>查看从库的状态。Last_Error字段就会报错。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/mysql003.jpg" alt=""></p>
<p>解决方法：</p>
<ol>
<li>删掉从库上与主库冲突的数据。然后停止<code>stop slave;</code>，再重启<code>start slave;</code>。这时候就会重新生成中继文件，重新同步数据。</li>
<li>删除掉从库上的整个表或数据库，重新添加主库。不过这样的操作会复制很多的数据，毕竟整个表和数据库都被删除了。</li>
</ol>
<h1 id="MySQL多主多从架构搭建"><a href="#MySQL多主多从架构搭建" class="headerlink" title="MySQL多主多从架构搭建"></a>MySQL多主多从架构搭建</h1><p>​        上面一主多从的架构，如果主库的服务器宕机了，写操作就会完成不了，读操作时可以的(因为一般MySQL的主从架构就是用于读写分离的)。这样一个主库的架构就会出现单点故障了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/mysql-multi-ms.png" alt=""></p>
<p><strong>3307端口的MySQL为主库，3309端口的MySQL为其从库</strong></p>
<p><strong>3308端口的MySQL为主库，3310端口的MySQL为其从库</strong></p>
<p><strong>3307端口的MySQL和3309端口的MySQL护卫主从</strong></p>
<h2 id="配置文件的配置"><a href="#配置文件的配置" class="headerlink" title="配置文件的配置"></a>配置文件的配置</h2><p><strong>在第一台主服务器3307端口的MySQL的my.cnf文件增加如下配置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_increment_increment&#x3D;2</span><br><span class="line"></span><br><span class="line">auto_increment_offset&#x3D;1</span><br><span class="line"></span><br><span class="line">log-slave-updates</span><br><span class="line"></span><br><span class="line">sync_binlog&#x3D;1</span><br></pre></td></tr></table></figure>



<p><strong>在第二台主服务器3308端口的MySQL的my.cnf文件增加如下配置</strong>    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_increment_increment&#x3D;2</span><br><span class="line"></span><br><span class="line">auto_increment_offset&#x3D;2</span><br><span class="line"></span><br><span class="line">log-slave-updates</span><br><span class="line"></span><br><span class="line">sync_binlog&#x3D;1</span><br></pre></td></tr></table></figure>

<h2 id="配置项说明"><a href="#配置项说明" class="headerlink" title="配置项说明"></a>配置项说明</h2><ol>
<li><p>auto_increment_increment</p>
<p>控制主键自增的自增步长，用于防止Master与Master之间复制出现重复自增字段值，通常auto_increment_increment=n，有多少台主服务器，n 就设置为多少</p>
</li>
<li><p>auto_increment_offset＝1</p>
<p>设置自增起始值，这里设置为1，这样Master的auto_increment字段产生的数值是：1, 3, 5, 7, …等奇数ID</p>
<p>auto_increment_offset的设置，不同的master设置不应该一样，否则就容易引起主键冲突，比如master1的offset=1，则master2的offset=2，master3的offset=3</p>
</li>
<li><p>log-slave-updates</p>
<p>在双主模式中，log-slave-updates 配置项一定要配置，否则在master1（3307端口）上进行了更新数据，在master2（3308端口）和slave1（3309端口）上会更新，但是在slave2（3310端口）上不会更新</p>
</li>
<li><p>sync_binlog</p>
<p>表示每几次事务提交，MySQL把binlog缓存刷进日志文件中，默认是0，最安全的是设置为1。</p>
<p>sync_binlog=0，当事务提交之后，MySQL不做fsync之类的磁盘同步指令刷新binlog_cache中的信息到磁盘，而让Filesystem自行决定什么时候来做同步，或者cache满了之后才同步到磁盘</p>
<p>sync_binlog=n，当每进行n次事务提交之后，MySQL将进行一次fsync之类的磁盘同步指令来将binlog_cache中的数据强制写入磁盘</p>
</li>
</ol>
<p><strong>注意事项</strong></p>
<p>​        从库只开启log-bin功能，不添加log-slave-updates参数，从库从主库复制的数据不会写入log-bin日志文件里。开启log-slave-updates参数后，从库从主库复制的数据会写入log-bin日志文件里。这也是该参数的功能，直接向从库写入数据时，是会写入log-bin日志的。</p>
<p>​        在自动生成主键的时候，会在已生成主键的基础上按照规则生成，即比存在的值大。</p>
<h2 id="主从库的配置"><a href="#主从库的配置" class="headerlink" title="主从库的配置"></a>主从库的配置</h2><ol>
<li><p>启动分别启动MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3307/my.cnf &amp;</span><br><span class="line">  </span><br><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3308/my.cnf &amp;</span><br><span class="line">  </span><br><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3309/my.cnf &amp;</span><br><span class="line">  </span><br><span class="line">./mysqld_safe --defaults-file=/usr/local/mysql5.7/data/3310/my.cnf &amp;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在3308端口的MySQL里执行：<code>grant replication slave on *.* to &#39;copy&#39;@&#39;%&#39; identified by &#39;123456&#39;;</code>由于3307端口的MySQL已经执行过。</p>
</li>
<li><p>重置Master：<code>reset master;</code>不重置也可以，再从库监听主库的时候，制定好biglog的名字就好。重置后都是：<code>mysql-bin.000001</code>。</p>
</li>
<li><p>在3308端口的MySQL执行，因为3308端口、3309端口和3310端口在上面设置过主从配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset salve;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从库监听主库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">==============在3307端口和3310端口的MySQL里执行===============</span></span><br><span class="line">change master to master_host='192.168.79.150',master_user='copy',master_port=3308,master_password='123456',master_log_file='mysql-bin.000001',master_log_pos=154;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">==============在3308端口和3309端口的MySQL里执行===============</span></span><br><span class="line">change master to master_host='192.168.79.150',master_user='copy',master_port=3307,master_password='123456',master_log_file='mysql-bin.000001',master_log_pos=154;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>

<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><p>跟上一节的一主多从的测试一样。</p>
</li>
</ol>
<h1 id="代码实战：多数据源配置"><a href="#代码实战：多数据源配置" class="headerlink" title="代码实战：多数据源配置"></a>代码实战：多数据源配置</h1><p>​        当我们的MySQL集群搭建好了之后，那就要在代码里面使用了。一般我们在写代码时，数据源都是只设置了一个。现在这么多个数据源，又要怎么使用呢！</p>
<p>​        有两种情况：1、做读写分离。2、只操作主库，从库只是当作备份。</p>
<h2 id="方案一：MyBatis的Mapper包隔离"><a href="#方案一：MyBatis的Mapper包隔离" class="headerlink" title="方案一：MyBatis的Mapper包隔离"></a>方案一：MyBatis的Mapper包隔离</h2><h3 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h3><p>基于Mapper包的隔离，每个Mapper包操作不同的数据库，每个Mapper包对应一个数据库。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>pom.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-mybatis-mutil-datasource<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring相关的依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Mybatis框架依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Mybatis与Spring整合依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--MySQL数据库连接驱动 版本不要过高--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JDBC 数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置文件：</strong></p>
<p>datasource.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置主库的数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"masterDruidDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://192.168.79.150:3307/shop"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置主库的连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"masterSqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"masterDruidDataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置主库的包扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"masterMapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"masterSqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"org.msr.masterslave.master.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置从库的数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"slaveDruidDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://192.168.79.150:3309/shop"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置从库的连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"slaveSqlSessionFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"slaveDruidDataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置从库的包扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"slaveMapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"slaveSqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"org.msr.masterslave.slave.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:datasource.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.msr"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>mapper：</strong></p>
<p>master库的mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.master.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MasterUserInfoMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MasterUserInfoMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.msr.masterslave.master.mapper.MasterOrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">        id</span><br><span class="line">        , name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from userInfo</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        insert into userInfo (id, name)</span><br><span class="line">        values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;name,jdbcType=VARCHAR&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        insert into userInfo</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">                id,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">                name,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">                #&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">                #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKeySelective"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        update userInfo</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">                name = #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        update userInfo</span><br><span class="line">        set name = #&#123;name,jdbcType=VARCHAR&#125;</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>slave库的mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.slave.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SlavUserInfoMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">UserInfo <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SlaveUserInfoMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.msr.masterslave.slave.mapper.SlaveOrderMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">        id</span><br><span class="line">        , name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        from userInfo</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>model代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Order&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>service代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.master.mapper.MasterOrderMapper;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.slave.mapper.SlaveOrderMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-28 23:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"orderService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MasterUserInfoMapper masterUserInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SlaveUserInfoMapper slaveUserInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">read</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> slaveOrderMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(UserInfo userInfo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> masterOrderMapper.insert(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-28 23:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">// 插入数据</span></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setName(<span class="string">"hahaha"</span>);</span><br><span class="line">        <span class="keyword">int</span> write = orderService.write(userInfo);</span><br><span class="line">        System.out.println(write);</span><br><span class="line">        <span class="comment">// 根据id查询</span></span><br><span class="line">        UserInfoService userInfoService = applicationContext.getBean(UserInfoService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        UserInfo read = userInfoService.read(<span class="number">1</span>);</span><br><span class="line">        System.out.println(read.toString());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>1、有很多的重复代码例如Spring中的配置以及多套Mapper映射中的代码，每一个数据库基本上都应该拥有独立的配置</p>
<p>2、切换主从进行读写操作时需要程序认为手动选择对应的类，这样就有可能会形成向从库写数据向主库读数据</p>
<p>3、如果有很多个从节点，那么我们没有办法进行负载均衡</p>
<p>4、如果某个节点崩溃我们不能切换到另外一台节点中，不能故障转移</p>
<h2 id="方案二：动态数据源-基于ThreadLocal"><a href="#方案二：动态数据源-基于ThreadLocal" class="headerlink" title="方案二：动态数据源(基于ThreadLocal)"></a>方案二：动态数据源(基于ThreadLocal)</h2><h3 id="核心原理-1"><a href="#核心原理-1" class="headerlink" title="核心原理"></a>核心原理</h3><p>​        自定义数据源并继承<code>AbstractRoutingDataSource</code>实现其<code>protected Object determineCurrentLookupKey()</code>方法。使用<code>ThreadLocal</code>的线程隔离动态设置数据源的key来达到数据源切换。</p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>pom.xml同方案一</strong></p>
<p><strong>一套的mapper：</strong></p>
<p>UserInfoMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">UserInfo <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(UserInfo record)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>UserInfoMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"org.msr.masterslave.mapper.UserInfoMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">        id</span><br><span class="line">        , name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        from userInfo</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">        delete</span><br><span class="line">        from userInfo</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        insert into userInfo (id, name)</span><br><span class="line">        values (#&#123;id,jdbcType=INTEGER&#125;, #&#123;name,jdbcType=VARCHAR&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertSelective"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        insert into userInfo</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">                id,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">                name,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"values ("</span> <span class="attr">suffix</span>=<span class="string">")"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">                #&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">                #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKeySelective"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        update userInfo</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">                name = #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"org.msr.masterslave.model.UserInfo"</span>&gt;</span></span><br><span class="line">        update userInfo</span><br><span class="line">        set name = #&#123;name,jdbcType=VARCHAR&#125;</span><br><span class="line">        where id = #&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>model代码：UserInfo同方案一</strong></p>
<p><strong>service代码：</strong></p>
<p>UserInfoService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.config.MyDataSource;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.mapper.UserInfoMapper;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-28 23:17</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"orderService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">read</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        MyDataSource.setDataSource(<span class="string">"slave"</span>);</span><br><span class="line">        <span class="keyword">return</span> userInfoMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">write</span><span class="params">(UserInfo userInfo)</span> </span>&#123;</span><br><span class="line">        MyDataSource.setDataSource(<span class="string">"master"</span>);</span><br><span class="line">        <span class="keyword">return</span> userInfoMapper.insert(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.service.UserInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-28 23:32</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        UserInfoService userInfoService = applicationContext.getBean(UserInfoService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 读数据</span></span><br><span class="line">        UserInfo read = userInfoService.read(<span class="number">3</span>);</span><br><span class="line">        System.out.println(read.toString());</span><br><span class="line">        <span class="comment">// 写数据</span></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setName(<span class="string">"hahaha"</span>);</span><br><span class="line">        <span class="keyword">int</span> write = userInfoService.write(userInfo);</span><br><span class="line">        System.out.println(write);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码图解执行原理"><a href="#代码图解执行原理" class="headerlink" title="代码图解执行原理"></a>代码图解执行原理</h3><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/mysql/mysql004.png" alt=""></p>
<h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><p>动态多数据源，这种方案我们需要自定义一个动态数据源的类，可以在程序运行过程中动态切换数据源</p>
<p>1、有很多的重复代码例如Spring中的配置多个数据源的配置Bean</p>
<p>2、切换主从进行读写操作时需要程序认为手动设置ThreadLocal中数据，这样就有可能会形成向从库写数据向主库读数据</p>
<p>3、如果有很多个从节点，那么我们没有办法进行负载均衡</p>
<p>4、如果某个节点崩溃我们不能切换到另外一台节点中，不能故障转移</p>
<h2 id="方案三：使用Springboot"><a href="#方案三：使用Springboot" class="headerlink" title="方案三：使用Springboot"></a>方案三：使用Springboot</h2><p>其实使用Springboot也只是对上面两个方案进行SpringBoot的改写而已。也可以说是上面的两个方案的Springboot实现。</p>
<h3 id="改造方案一"><a href="#改造方案一" class="headerlink" title="改造方案一"></a>改造方案一</h3><h4 id="核心原理-2"><a href="#核心原理-2" class="headerlink" title="核心原理"></a>核心原理</h4><p>也是使用mapper的包隔离，写法是使用SpringBoot(约定大于配置)的注解进行配置</p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.msr.masterslave<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-multi-datasource-1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-multi-datasource-1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 加载mybatis整合springboot --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--在springboot的父工程中没有指定版本，我们需要手动指定--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- MySQL的jdbc驱动包 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--在springboot的父工程中指定了版本，我们就不需要手动指定了--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--JDBC 数据库连接池--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>model、service、mapper的代码和方案一一致。对于xml的配置使用配置类来完成</p>
<p>配置文件：application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#3307数据库的连接配置信息</span></span><br><span class="line"><span class="meta">master.datasource.url</span>=<span class="string">jdbc:mysql://192.168.79.150:3307/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">master.datasource.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">master.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">master.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3309数据库的连接配置信息</span></span><br><span class="line"><span class="meta">slave.datasource.url</span>=<span class="string">jdbc:mysql://192.168.79.150:3309/test?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="meta">slave.datasource.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">slave.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">slave.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>MasterDataSourceConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-28 23:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"org.msr.masterslave.master.mapper"</span>&#125;, sqlSessionFactoryRef = <span class="string">"masterSqlSessionFactoryBean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MasterDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterUsername;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterPassword;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.driver"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterDriver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.url"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置master数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setUrl(masterUrl);</span><br><span class="line">        druidDataSource.setUsername(masterUsername);</span><br><span class="line">        druidDataSource.setPassword(masterPassword);</span><br><span class="line">        druidDataSource.setDriverClassName(masterDriver);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">masterSqlSessionFactoryBean</span><span class="params">(DruidDataSource masterDataSource)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(masterDataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SlaveDataSourceConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-28 23:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"org.msr.masterslave.slave.mapper"</span>&#125;, sqlSessionFactoryRef = <span class="string">"slaveSqlSessionFactoryBean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlaveDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slaveUsername;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slavePassword;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.driver"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slaveDriver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.url"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slaveUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置slave数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">slaveDruidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(slaveDriver);</span><br><span class="line">        dataSource.setUrl(slaveUrl);</span><br><span class="line">        dataSource.setUsername(slaveUsername);</span><br><span class="line">        dataSource.setPassword(slavePassword);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">slaveSqlSessionFactoryBean</span><span class="params">(DruidDataSource slaveDruidDataSource)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(slaveDruidDataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.service.UserInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDatasource1Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(MultiDatasource1Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        UserInfoService userInfoService = applicationContext.getBean(UserInfoService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setName(<span class="string">"springboot"</span>);</span><br><span class="line">        <span class="keyword">int</span> write = userInfoService.write(userInfo);</span><br><span class="line">        System.out.println(write);</span><br><span class="line"></span><br><span class="line">        UserInfo read = userInfoService.read(<span class="number">1</span>);</span><br><span class="line">        System.out.println(read.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>同方案一</p>
<h3 id="改造方案二"><a href="#改造方案二" class="headerlink" title="改造方案二"></a>改造方案二</h3><h4 id="核心原理-3"><a href="#核心原理-3" class="headerlink" title="核心原理"></a>核心原理</h4><p>同方案二</p>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>pom.xml的maven依赖和配置文件application.properties同上一节、model、service、mapper的代码同方案和一致。</p>
<p><strong>动态数据源Springboot实现</strong></p>
<p>MyDataSource</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author: MaiShuRen</span></span><br><span class="line"><span class="comment"> * site: http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * since: 2021-03-29 23:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; LOCAL = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSource</span><span class="params">(String dataSourceKey)</span> </span>&#123;</span><br><span class="line">        LOCAL.set(dataSourceKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyDataSourceConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@site</span> http://www.maishuren.top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-03-29 23:01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = &#123;<span class="string">"org.msr.masterslave.mapper"</span>&#125;, sqlSessionFactoryRef = <span class="string">"sqlSessionFactoryBean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterUsername;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterPassword;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.driver"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterDriver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"master.datasource.url"</span>)</span><br><span class="line">    <span class="keyword">private</span> String masterUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.username"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slaveUsername;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.password"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slavePassword;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.driver"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slaveDriver;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"slave.datasource.url"</span>)</span><br><span class="line">    <span class="keyword">private</span> String slaveUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">masterDruidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(masterDriver);</span><br><span class="line">        druidDataSource.setUrl(masterUrl);</span><br><span class="line">        druidDataSource.setUsername(masterUsername);</span><br><span class="line">        druidDataSource.setPassword(masterPassword);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">salveDruidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setDriverClassName(slaveDriver);</span><br><span class="line">        druidDataSource.setUrl(slaveUrl);</span><br><span class="line">        druidDataSource.setUsername(slaveUsername);</span><br><span class="line">        druidDataSource.setPassword(slavePassword);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyDataSource <span class="title">myDataSource</span><span class="params">(DruidDataSource masterDruidDataSource, DruidDataSource salveDruidDataSource)</span> </span>&#123;</span><br><span class="line">        MyDataSource myDataSource = <span class="keyword">new</span> MyDataSource();</span><br><span class="line">        myDataSource.setDefaultTargetDataSource(masterDruidDataSource);</span><br><span class="line">        Map dataSourceMap = <span class="keyword">new</span> HashMap(<span class="number">16</span>);</span><br><span class="line">        dataSourceMap.put(<span class="string">"master"</span>, masterDruidDataSource);</span><br><span class="line">        dataSourceMap.put(<span class="string">"slave"</span>, salveDruidDataSource);</span><br><span class="line">        myDataSource.setTargetDataSources(dataSourceMap);</span><br><span class="line">        <span class="keyword">return</span> myDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title">sqlSessionFactoryBean</span><span class="params">(MyDataSource myDataSource)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(myDataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.msr.masterslave;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> org.msr.masterslave.service.UserInfoService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDynamicDatasourceApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext applicationContext = SpringApplication.run(SpringbootDynamicDatasourceApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        UserInfoService userInfoService = applicationContext.getBean(UserInfoService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setName(<span class="string">"springboot"</span>);</span><br><span class="line">        <span class="keyword">int</span> write = userInfoService.write(userInfo);</span><br><span class="line">        System.out.println(write);</span><br><span class="line"></span><br><span class="line">        UserInfo read = userInfoService.read(<span class="number">1</span>);</span><br><span class="line">        System.out.println(read.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>也是和方案一样。</p>
<h2 id="多数据数据源总结"><a href="#多数据数据源总结" class="headerlink" title="多数据数据源总结"></a>多数据数据源总结</h2><p>​        看到了上面四种的实现，可以看出他们之间没有差别不是很大，从方案一的问题一直到最后都没有解决掉。 如果需要解决上面的问题需要我们自己写一套管理代码来动态的切换数据源进行读写分离，故障转移以及负载均衡。这样代码就复杂起来的。这时候就要用到数据库中间件了，例如Apache ShardingSphere和MyCat。我个人更加喜欢用ShardingSphere。</p>
<p>​        Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p>
<p>推荐阅读链接：<a href="http://www.maishuren.top/posts/middleware/2020/06/202006261803.html">数据库中间件ShardingSphere的使用</a></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Netty5各种RPC整合实战</title>
    <url>/posts/netty/2021/03/202103242129.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>redis的持久化、数据备份方案和数据恢复</title>
    <url>/posts/redis/2021/03/202103191728.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="redis的持久化"><a href="#redis的持久化" class="headerlink" title="redis的持久化"></a>redis的持久化</h1><h2 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h2><p>redis会fork创建一个子进程来进行持久化。将数据写进一个临时文件，持久化结束之后会替换上一个持久化好的RDB文件。在这期间redis主进程不会参与持久化，以保证redis的高性能。</p>
<p><strong>触发：</strong></p>
<ol>
<li><p>客户端在执行shutdown命令时，如果没有开启AOF持久化，那么就会触发RDB的持久化。</p>
</li>
<li><p>在redis的配置文件中有以下默认配置。在一下的条件成立时，就会触发RDB的持久化，而且是使用save命令完成的。但是save命令会阻塞主进程。一般使用bgsave命令，会fork出一个子进程进行持久化操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1     #after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">save 300 10    #after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">save 60 10000  #after 60 sec if at least 10000 keys changed</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行flushall命令清空内存中的数据时，同时触发持久化，清空磁盘。</p>
</li>
</ol>
<p><strong>优点和缺点</strong></p>
<p>优点：数据恢复比较快，适合大规模的数据恢复，适合当作冷备的方案。</p>
<p>缺点：如果是突然宕机，丢失的数据比较多。数据量大时，持久化生成快照RDB文件会影响redis的性能。</p>
<h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><p>开启了AOF之后，会将所有命令追加到AOF缓冲区中，根据对应的写入策略写入到磁盘的AOF的持久化文件中。可以说就是redis的一个日志文件，里面记录的是redis的写操作。但是由于记录的是一条条命令，AOF文件会膨胀的很快，达到一定量的时候，就会触发rewrite操作，重写AOF文件，来达到压缩的目的(fork子进程来完成)。</p>
<p>redis 使用单线程响应命令，如果每次写 AOF 文件命令都直接追加到硬盘，那么性能瓶颈完全取于当前硬盘负载。先写入缓冲区 aof_buf 中，还有另一好处，redis 可以提供多种缓冲区同步硬盘的策略，在性能和安全性方面做出权衡。</p>
<p><strong>触发：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/redis/redis-aof.png" alt=""></p>
<ol>
<li>redis的配置文件中默认是没有开启AOF的，要开启在配置文件中打开即可<code>appendonly no</code> —&gt;<code>appendonly yes</code>。也可以在redis已经运行时设置：<code>CONFIG SET appendonly yes</code>，不过这样当redis重启时，设置会失效。</li>
<li>配置的写入策略触发。<ol>
<li><code>appendfsync everysec</code>(默认)：每秒同步一次命令到AOF持久化文件中，效率很高，可能会丢失1秒的数据。</li>
<li><code>appendfsync no</code>：从不同步，只需将数据交给操作系统即可。更快，更不安全的方法。通常，Linux将使用此配置每30秒刷新一次数据，但这取决于内核的精确调整。</li>
<li><code>appendfsync always</code>：每次触发数据变更的时候立即追加到AOF文件中，效率很低，但是很安全。</li>
</ol>
</li>
</ol>
<p><strong>重写机制：</strong></p>
<ol>
<li><p>默认配置。比如说上一次AOF rewrite之后，是128mb。然后就会接着128mb继续写AOF的日志，如果发现增长的比例，超过了之前的100%，256mb，就可能会去触发一次rewrite。但是此时还要去跟min-size，64mb去比较，256mb &gt; 64mb，才会去触发rewrite。</p>
<p>因为AOF文件的重写会fork出一个子进程进行重写，为了减少重写次数需要调大下面的参数，但是都是要基于自身使用的redis的存放的数据量来决定。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p><strong>优点和缺点：</strong></p>
<p>优点：以更好的保护数据不丢失，一般AOF会每隔1秒(默认的同步策略)，通过一个后台线程执行一次fsync操作，最多丢失1秒钟的数据。</p>
<p>AOF日志文件以append-only模式写入，所以没有任何磁盘寻址的开销，写入性能非常高，而且文件不容易破损，即使文件尾部破损，也很容易修复(使用redis提供的工具可以修复：<code>redis-check-aof --fix</code>)。</p>
<p>日志文件即使过大的时候，出现后台重写操作，也不会影响客户端的读写。因为在rewrite log的时候，会对其中的指导进行压缩，创建出一份需要恢复数据的最小日志出来。再创建新日志文件的时候，老的日志文件还是照常写入。当新的merge后的日志文件ready的时候，再交换新老日志文件即可。</p>
<p>AOF日志文件的命令通过非常可读的方式进行记录，这个特性非常适合做灾难性的误删除的紧急恢复。比如某人不小心<strong>用flushall命令清空了所有数据</strong>，只要这个时候后台<strong>rewrite还没有发生</strong>，那么就可以立即<strong>拷贝AOF文件</strong>，<strong>将最后一条flushall命令给删了</strong>，然后再将该AOF文件放回去，就可以通过恢复机制，自动恢复所有数据</p>
<p>缺点：对于同一份数据来说，AOF日志文件通常比RDB数据快照文件更大。</p>
<p>AOF开启后，支持的写QPS会比RDB支持的写QPS低，因为AOF一般会配置成每秒fsync一次日志文件，当然，每秒一次fsync，性能也还是很高的。</p>
<p>类似AOF这种较为复杂的基于命令日志/merge/回放的方式，比基于RDB每次持久化一份完整的数据快照文件的方式，更加脆弱一些，容易有bug。不过AOF就是为了避免rewrite过程导致的bug，因此每次rewrite并不是基于旧的指令日志进行merge的，而是基于当时内存中的数据进行指令的重新构建，这样健壮性会好很多。</p>
<h2 id="RDB和AOF到底该如何选择"><a href="#RDB和AOF到底该如何选择" class="headerlink" title="RDB和AOF到底该如何选择"></a>RDB和AOF到底该如何选择</h2><ol>
<li><p>不要仅仅使用RDB，因为那样会导致你丢失很多数据</p>
</li>
<li><p>也不要仅仅使用AOF，因为那样有两个问题，第一，你通过AOF做冷备，没有RDB做冷备，来的恢复速度更快; 第二，RDB每次简单粗暴生成数据快照，更加健壮，可以避免AOF这种复杂的备份和恢复机制的bug</p>
</li>
<li><p>综合使用AOF和RDB两种持久化机制，用AOF来保证数据不丢失，作为数据恢复的第一选择; 用RDB来做不同程度的冷备，在AOF文件都丢失或损坏不可用的时候，还可以使用RDB来进行快速的数据恢复</p>
</li>
</ol>
<p>所以说成年人，全都要！</p>
<p><strong>AOF和RDB同时工作：</strong></p>
<ol>
<li>如果RDB在执行snapshotting操作，那么redis不会执行AOF rewrite; 如果redis再执行AOF rewrite，那么就不会执行RDB snapshotting</li>
<li>如果RDB在执行snapshotting，此时用户执行BGREWRITEAOF命令，那么等RDB快照生成之后，才会去执行AOF rewrite</li>
<li>同时有RDB snapshot文件和AOF日志文件，那么redis重启的时候，会优先使用AOF进行数据恢复，因为其中的日志更完整</li>
</ol>
<h2 id="redis持久化文件加载流程"><a href="#redis持久化文件加载流程" class="headerlink" title="redis持久化文件加载流程"></a>redis持久化文件加载流程</h2><ol>
<li>首先是会去判断是否开启了AOF，如果存在存在AOF文件，则直接加载AOF文件</li>
<li>如果找不到AOF文件，则直接启动，不会加载RDB文件</li>
<li>如果没有开启AOF，会去加载RDB文件，通过RDB恢复数据</li>
</ol>
<h1 id="数据备份方案"><a href="#数据备份方案" class="headerlink" title="数据备份方案"></a>数据备份方案</h1><ol>
<li>写crontab定时调度脚本去做数据备份</li>
<li>每小时都copy一份rdb的备份，到一个目录中去，仅仅保留最近48小时的备份</li>
<li>每天都保留一份当日的rdb的备份，到一个目录中去，仅仅保留最近1个月的备份</li>
<li>每次copy备份的时候，都把太旧的备份给删了(是否删除旧的备份，看具体情况而定)</li>
<li>每天晚上将当前服务器上所有的数据备份，发送一份到远程的云服务器(用于存放备份即可，也可以存放在本地)上去。</li>
</ol>
<p>每小时备份一次：redis_rdb_backup_hourly.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh </span></span><br><span class="line"></span><br><span class="line">cur_date=`date +%Y%m%d%k`</span><br><span class="line">rm -rf /usr/local/redis/snapshotting/$cur_date</span><br><span class="line">mkdir /usr/local/redis/snapshotting/$cur_date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份存放本地</span></span><br><span class="line">cp /var/redis/6379/dump.rdb /usr/local/redis/snapshotting/$cur_date</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份发送到备份服务器，注意免密码登录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> scp -rq /var/redis/6379/dump.rdb root@192.168.129.100:/opt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除最近48小时的rdb文件</span></span><br><span class="line">del_date=`date -d -48hour +%Y%m%d%k`</span><br><span class="line">rm -rf /usr/local/redis/snapshotting/$del_date</span><br></pre></td></tr></table></figure>

<p>每小时执行一次该脚本：<code>0 0 * * *  ? sh /usr/local/redis/shell/redis_rdb_backup_hourly.sh</code></p>
<p>每天备份一次：redis_rdb_backup_daily.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh </span></span><br><span class="line"></span><br><span class="line">cur_date=`date +%Y%m%d`</span><br><span class="line">rm -rf /usr/local/redis/snapshotting/$cur_date</span><br><span class="line">mkdir /usr/local/redis/snapshotting/$cur_date</span><br><span class="line">cp /var/redis/6379/dump.rdb /usr/local/redis/snapshotting/$cur_date</span><br><span class="line"></span><br><span class="line">del_date=`date -d -1day +%Y%m%d`</span><br><span class="line">rm -rf /usr/local/redis/snapshotting/$del_date</span><br></pre></td></tr></table></figure>

<p>每天执行一次备份脚本：<code>0 0 0 * *  ? sh /usr/local/redis/shell/redis_rdb_backup_daily.sh</code></p>
<h1 id="数据恢复方案"><a href="#数据恢复方案" class="headerlink" title="数据恢复方案"></a>数据恢复方案</h1><p>（1）如果是redis进程挂掉，那么重启redis进程即可，直接基于AOF日志文件恢复数据</p>
<p>（2）如果是redis进程所在机器挂掉，那么重启机器后，尝试重启redis进程，尝试直接基于AOF日志文件进行数据恢复。AOF没有破损，也是可以直接基于AOF恢复的。AOF append-only，顺序写入，如果AOF文件破损，那么用redis-check-aof fix</p>
<p>（3）如果redis当前最新的AOF和RDB文件出现了丢失/损坏，那么可以尝试基于该机器上当前的某个最新的RDB数据副本进行数据恢复。</p>
<p>当前最新的AOF和RDB文件都出现了丢失/损坏到无法恢复，一般不是机器的故障，人为。那就把破损的文件给删除了。去备份服务器找到RDB最新的一份备份，小时级的备份可以了，小时级的肯定是最新的，copy到redis里面去，就可以恢复到某一个小时的数据</p>
<p>停止redis，关闭aof，拷贝rdb备份，重启redis，确认数据恢复，直接在命令行热修改redis配置，打开aof，这个redis就会将内存中的数据对应的日志，写入aof文件中</p>
<p>此时aof和rdb两份数据文件的数据就同步了</p>
<p>redis config set热修改配置参数，可能配置文件中的实际的参数没有被持久化的修改，再次停止redis，手动修改配置文件，打开aof的命令，再次重启redis</p>
<p>（4）如果当前机器上的所有RDB文件全部损坏，那么从远程的云服务上拉取最新的RDB快照回来恢复数据</p>
<p>（5）如果是发现有重大的数据错误，比如某个小时上线的程序一下子将数据全部污染了，数据全错了，那么可以选择某个更早的时间点，对数据进行恢复</p>
<p>举个例子，12点上线了代码，发现代码有bug，导致代码生成的所有的缓存数据，写入redis，全部错了</p>
<p>找到一份11点的rdb的冷备，然后按照上面的步骤，去恢复到11点的数据。</p>
]]></content>
      <categories>
        <category>NoSQ</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>One algorithm a day(两数之和)</title>
    <url>/posts/datastructure/2020/12/202012241456.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目：两数之和"><a href="#题目：两数之和" class="headerlink" title="题目：两数之和"></a>题目：两数之和</h1><p><strong>问题描述：</strong></p>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设<strong>每种输入只会对应一个答案</strong>。但是，数组中<strong>同一个元素不能使用两遍</strong>。</p>
<p><strong>难度：</strong>简单</p>
<p><strong>示例：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        Topic001 topic001 = <span class="keyword">new</span> Topic001();</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] result = topic001.toSum(nums, <span class="number">9</span>);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] toSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> key = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(key), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="思路：图解"><a href="#思路：图解" class="headerlink" title="思路：图解"></a>思路：图解</h1><p>用一个HashMap存储数据，key是数组的元素，value是该元素在数组中的索引。因为要用到数据里的元素去比较，成功还要返回对应的索引。所以数组元素以及索引都要存起来并且对应起来，hash操作又是常数操作，所以对数组元素求hash很快。所以使用HashMap。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/topic1.jpg" alt="图解topic1"></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>自动装箱/拆箱可能导致NPE</title>
    <url>/posts/bug-log/2020/12/202012071023.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自动装箱-拆箱可能导致NPE"><a href="#自动装箱-拆箱可能导致NPE" class="headerlink" title="自动装箱/拆箱可能导致NPE"></a>自动装箱/拆箱可能导致NPE</h1><p>在一次使用redisTemplate去操作的时候，发现IDEA提示<code>UnBoxing of &#39;redisTemplate.hasKey(key)&#39; may produce &#39;NullPointerException&#39;</code>，意思是说自动拆箱可能会引发空指针异常。</p>
<p>因为<code>hasKey</code>这个方法是返回Boolan类型，而方法的返回值是boolean，直接把Boolean的值返回，就会发生自动拆箱。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/record/record1.png" alt=""></p>
<h1 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h1><p>基本数据类型的自动装箱(autoboxing)、拆箱(unboxing)是自J2SE 5.0开始提供的功能。 一般我们要创建一个类的对象实例的时候，我们会这样： Class a = new Class(parameters); 当我们创建一个Integer对象时，却可以这样： Integer i = 100;(注意：和 int i = 100;是有区别的 ) 实际上，执行上面那句代码的时候，系统为我们执行了： Integer i = Integer.valueOf(100)。<code>Integer i = 100</code>这就是一个自动装箱。</p>
<h1 id="出现空指针的情况"><a href="#出现空指针的情况" class="headerlink" title="出现空指针的情况"></a>出现空指针的情况</h1><ol>
<li>包装器类型赋值给基本类型时，自动拆箱下出现的空指针</li>
<li>当把基本类型作为方法的参数类型，但是方法调用者传参使用的却是包装器类型，所以出现了自动拆箱的情况，此时包装器类型如果传的是NULL，方法中就很有可能出现NULL指针异常</li>
</ol>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Map&lt;String, Boolean&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">	map.put(<span class="string">"key1"</span>, <span class="keyword">true</span>);</span><br><span class="line">	map.put(<span class="string">"key2"</span>, <span class="keyword">false</span>);</span><br><span class="line">	map.put(<span class="string">"key3"</span>, <span class="keyword">false</span>);</span><br><span class="line">	Boolean b = ( map != <span class="keyword">null</span> ? map.get(<span class="string">"key"</span>) : <span class="keyword">false</span>);</span><br><span class="line">	System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<p><code>map</code>不为空，当<code>get()</code>之后<code>key</code>不存在，<code>Boolean</code>类型的b被赋了空值。再看回<code>redisTemplate.hasKey(key)</code>的操作可能会产生空值，然后拆箱返回，因为这是一个工具类里的方法，调用者可能会直接调用，这时候就有了空指针异常的风险，影响了程序的健壮性了。</p>
<p>使用javap.exe反编译之后，查看</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;util&#x2F;HashMap</span><br><span class="line">       3: dup</span><br><span class="line">       4: bipush        16</span><br><span class="line">       6: invokespecial #3                  &#x2F;&#x2F; Method java&#x2F;util&#x2F;HashMap.&quot;&lt;init&gt;&quot;:(I)V</span><br><span class="line">       9: astore_1</span><br><span class="line">      10: aload_1</span><br><span class="line">      11: ldc           #4                  &#x2F;&#x2F; String key1</span><br><span class="line">      13: iconst_1</span><br><span class="line">      14: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      17: invokeinterface #6,  3            &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.put:(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      22: pop</span><br><span class="line">      23: aload_1</span><br><span class="line">      24: ldc           #7                  &#x2F;&#x2F; String key2</span><br><span class="line">      26: iconst_0</span><br><span class="line">      27: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      30: invokeinterface #6,  3            &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.put:(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      35: pop</span><br><span class="line">      36: aload_1</span><br><span class="line">      37: ldc           #8                  &#x2F;&#x2F; String key3</span><br><span class="line">      39: iconst_0</span><br><span class="line">      40: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      43: invokeinterface #6,  3            &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.put:(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      48: pop</span><br><span class="line">      49: aload_1</span><br><span class="line">      50: ifnull        67</span><br><span class="line">      53: aload_1</span><br><span class="line">      54: ldc           #9                  &#x2F;&#x2F; String key</span><br><span class="line">      56: invokeinterface #10,  2           &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.get:(Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      61: checkcast     #11                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;Boolean</span><br><span class="line">      64: goto          71</span><br><span class="line">      67: iconst_0</span><br><span class="line">      68: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      71: astore_2</span><br><span class="line">      72: getstatic     #12                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">      75: aload_2</span><br><span class="line">      76: invokevirtual #13                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;Object;)V</span><br><span class="line">      79: return</span><br></pre></td></tr></table></figure>

<p>从反编译的结果可以看到<code>Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;</code>出现了四次，三次是<code>map.put()</code>的时候，最后一次是：<code>Boolean b = ( map != null ? map.get(&quot;key&quot;) : false);</code>可以看出<code>Boolean</code>类型自动装箱<code>valueOf()</code>。如果一个<code>Boolean</code>引用为空时，在自动拆箱就是一个空值。这就会发生NPE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>包装器类型和基本数据类型都可以的业务场景下，优先考虑使用基本类型</li>
<li>对于不确定的包装器类型，一定要对NULL情况做检验和判断</li>
</ol>
]]></content>
      <categories>
        <category>踩坑日志</category>
      </categories>
  </entry>
  <entry>
    <title>六大设计原则解读</title>
    <url>/posts/design-patterns/2020/09/202009051442.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>​        单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。这个原则存在争议之处在哪里呢？就是对职责的定义，什么是类的职责，以及怎么划分类的职责。可以举个例子来说明一下单一职责原则。</p>
<p>​        我想很多人都应该基于RBAC模型做过一些用户和角色管理的一些模块。RBAC模型（Role-Based Access Control，基于角色的访问控制，通过分配和取消角色来完成用户权限的授予和取消，使动作主体（用户）与资源的行为（权限）分离），确实是一个很好的解决办法。这里要讲的是用户管理、修改用户的信息、增加机构（一个人属于多个机构）、增加角色等，用户有这么多的信息和行为要维护，那么就把这些写到一个接口中，都是用户管理类嘛，这样先来看它的类图：</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/1.png" alt=""></p>
<p>​        设计这一个类对于大多数的初级程序员来说并不是难事。但是认真一看，就会发现有问题。这个类的属性和行为并没有分离开来。相信做过Java Web开发的朋友都是这样做的：将一个类所拥有的属性封装成一个BO(Business Object，业务对象)，然后再把对于这个类的操作(即行为)也独立封装成Biz(Business Logic，业务逻辑)。如下图所示：</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/2.png" alt=""></p>
<p>​        重新拆封成两个接口，IUserBO负责用户的属性，简单地说，IUserBO的职责就是收集和反馈用户的属性信息；IUserBiz负责用户的行为，完成用户信息的维护和变更。</p>
<p>​        好了属性和行为分离开来了，但是这个和实际工作中用到的User类好像有差别的呀！现在先来看一看分拆成两个接口怎么使用。现在都是面向接口编程嘛，所以产生了这个UserInfo对象之后，当然可以把它当IUserBO接口使用。也可以当IUserBiz接口使用，这要看你在什么地方使用了。要获得用户信息，就当是IUserBO的实现类；要是希望维护用户的信息，就把它当作IUserBiz的实现类就成了，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IUserInfo userinfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line"></span><br><span class="line">IUserBO userBo = (IUserBo)userInfo;</span><br><span class="line"></span><br><span class="line">IUserBiz userBiz = (IUserBiz)userInfo;</span><br><span class="line">userBiz.deleteUser();</span><br></pre></td></tr></table></figure>

<p>​        其实，在实际的使用中，我们更倾向于使用两个不同的类或接口：一个是IUserBO，一个是IUserBiz，类图下所示：</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/3.png" alt=""></p>
<p>​        上面把一个接口拆分成两个接口的动作，就是依赖了单一职责原则，那什么是单一职责原则呢？单一职责原则的定义是：应该有且仅有一个原因引起类的变更。</p>
<p>​        下面再举一个例子，电话通话的时候有4个过程发生：拨号、通话、回应、挂机。那么就来写一个电话接口。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/4.png" alt=""></p>
<p>​        代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhone</span> </span>&#123;</span><br><span class="line">	<span class="comment">//拨通电话</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dial</span><span class="params">(String phoneNumber)</span></span>;</span><br><span class="line">	<span class="comment">//通话</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chat</span><span class="params">(Object o)</span></span>;</span><br><span class="line">	<span class="comment">//通话完毕，挂电话</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        单一职责原则要求一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事情，看看上面的接口只负责一件事情吗？是只有一个原因引起变化吗？好像不是！</p>
<p>​        <code>IPhone</code>这个接口可不是只有一个职责，它包含了两个职责：一个是协议管理，一个是数据传送。<code>dial()</code>和<code>hangup()</code>两个方法实现的是协议管理，分别负责拨号接通和挂机；<code>chat()</code>实现的是数据的传送，把我们说的话转换成模拟信号或数字信号传递到对方，然后再把对方传递过来的信号还原成我们听得懂的语言。这里有两个原因都引起了类的变化，这样就发现<code>IPhone</code>这个接口其实是包含了两个职责，而且这两个职责的变化不互相影响，因为电话拨号成功了之后，并不关心传输的是什么数据。这样就可以考虑把<code>IPhone</code>接口再拆分成两个接口。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/5.png" alt=""></p>
<p>​        这样的设计就变得完美的，一个类实现了两个接口，把两个职责融合在一个类中。你会觉得这个Phone有两个原因引起变化了呀，是的，但是别忘记了我们是面向接口编程，我们对外公布的是接口而不是实现类。而且，如果真要实现类的单一职责，这个就使用上面的组合模式了，这会引起类间耦合过重、类的数量增加等问题，人为地增加了设计的复杂性。</p>
<p>​        单一职责原则有什么好处：</p>
<ul>
<li>类的复杂性降低，实现什么职责都有清晰明确的定义；</li>
<li>可读性提高，复杂性降低，那当然可读性提高了；</li>
<li>可维护性提高，可读性提高，那当然更容易维护了；</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li>
</ul>
<p>​       其实单一职责原则最男划分的就是职责。一个职责一个接口，但问题是“职责”没有一个量化的标准，一个类到底要负责那些职责？这些职责该怎么细化？细化后是否都要有一个接口或类？这些都需要从实际的项目去考虑，从功能上来说，定义一个IPhone接口也没有错，实现了电话的功能，而且设计还很简单，仅仅一个接口一个实现类。可是一个接口有两个可以变化的原因，这就为以后的变化带来了风险。</p>
<p>​        <strong>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。</strong>生硬照搬单一职责原则会一起类的剧增，这就会给维护带来很多的麻烦，过细的划分职责，也会人为地增加了系统的复杂性。总之一句话，原则是死的，人是活的，原则要灵活使用。</p>
<p>​    <strong>对于单一职责原则，接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</strong></p>
<h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><p>在面向对象的语言中，继承是必不可少的、非常优秀的语言机制，它有如下优点：</p>
<ul>
<li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；</li>
<li>提高代码的重用性；</li>
<li>子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同；</li>
<li>提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的扩展接口都是通过继承父类来完成的；</li>
<li>提高产品或项目的开放性。自然界的所有事物都是优点和缺点并存的，即使是鸡蛋，有时候也能挑出骨头来，继承的缺点如下：</li>
<li>继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法；</li>
<li>降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；</li>
<li>增强了耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大段的代码需要重构。</li>
</ul>
<p>​        Java使用extends关键字来实现继承，它采用了单一继承的规则，从整体上来看，利大于弊，怎么才能让“利”的因素发挥最大的作用，同时减少“弊”带来的麻烦呢？解决方案是引入里氏替换原则（Liskov Substitution Principle，LSP），什么是里氏替换原则呢？它有两种定义：</p>
<ul>
<li>第一种定义，也是最正宗的定义：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。</li>
<li>第二种定义：所有引用基类的地方必须能透明地使用其子类的对象。</li>
</ul>
<p>​        第二个定义是最清晰明确的，通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应。</p>
<h2 id="里氏替换原则的四层含义"><a href="#里氏替换原则的四层含义" class="headerlink" title="里氏替换原则的四层含义"></a>里氏替换原则的四层含义</h2><h3 id="子类必须完全实现父类的方法"><a href="#子类必须完全实现父类的方法" class="headerlink" title="子类必须完全实现父类的方法"></a>子类必须完全实现父类的方法</h3><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/6.png" alt=""></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/7.png" alt=""></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/8.png" alt=""></p>
<h3 id="子类可以有自己的个性"><a href="#子类可以有自己的个性" class="headerlink" title="子类可以有自己的个性"></a>子类可以有自己的个性</h3><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/9.png" alt=""></p>
<h3 id="覆盖或实现父类的方法时输入参数可以被放大"><a href="#覆盖或实现父类的方法时输入参数可以被放大" class="headerlink" title="覆盖或实现父类的方法时输入参数可以被放大"></a>覆盖或实现父类的方法时输入参数可以被放大</h3><h3 id="覆写或实现父类的方法时输出结果可以被缩小"><a href="#覆写或实现父类的方法时输出结果可以被缩小" class="headerlink" title="覆写或实现父类的方法时输出结果可以被缩小"></a>覆写或实现父类的方法时输出结果可以被缩小</h3>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IoC容器概述</title>
    <url>/posts/%E5%90%8E%E7%AB%AF/2020/09/202009051038.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/2020/09/202009012140.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="计算机发展简史"><a href="#计算机发展简史" class="headerlink" title="计算机发展简史"></a>计算机发展简史</h1><h2 id="计算机发展的四个阶段"><a href="#计算机发展的四个阶段" class="headerlink" title="计算机发展的四个阶段"></a>计算机发展的四个阶段</h2><h2 id="微型计算机的发展历史"><a href="#微型计算机的发展历史" class="headerlink" title="微型计算机的发展历史"></a>微型计算机的发展历史</h2>]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba微服务学习一：服务发现Nacos</title>
    <url>/posts/springcloud/2020/07/202007211810.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="为什么出现Spring-Cloud-Alibaba？"><a href="#为什么出现Spring-Cloud-Alibaba？" class="headerlink" title="为什么出现Spring Cloud Alibaba？"></a>为什么出现Spring Cloud Alibaba？</h1><p>Spring Cloud的<a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now" target="_blank" rel="noopener">官网</a>中：</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/springcloud/springcloud1.jpg" alt=""></p>
<p>在以往的Spring Cloud中官方也是推荐使用Netflix的组件，但是随着Netflix的多个组件进入维护状态，可以说Netflix的组件已经不能使用了，因为可能出现潜在风险。对于微服务来说，最重要的几个组件：服务发现、断路器、网关、负载均衡。然而这些组件都进入了维护状态。所以随之Ailibaba的组件就成为了我们的首选。</p>
<h1 id="Spring-Cloud-Alibaba的主要组件"><a href="#Spring-Cloud-Alibaba的主要组件" class="headerlink" title="Spring Cloud Alibaba的主要组件"></a>Spring Cloud Alibaba的主要组件</h1><ul>
<li>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等都各维度保护服务的稳定性。</li>
<li>Nacos：一个更易于构建云原生应用的动态<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理平台</strong>。</li>
<li>RabbitMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时、高可靠的消息发布与订阅服务。</li>
<li>Dubbo：高性能的Java RPC框架。</li>
<li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li>
<li>Alibaba Cloud ACM：一款在分布式结构环境中对应用配置进行集中式管理和推送的应用配置中心产品。</li>
<li>Alibaba Cloud SchedulerX：分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时任务调度服务。</li>
<li>Alibaba Cloud SMS：覆盖全球的短信服务，友好、高效、只能的互联网通讯能力</li>
<li>Alibaba Cloud OSS：对象存储服务。</li>
</ul>
<p>像OSS SMS、SchedulerX、ACM这些是阿里云的收费产品，这些也不是构建微服务的必需品，我们可以不用。</p>
<h1 id="什么是Nacos？"><a href="#什么是Nacos？" class="headerlink" title="什么是Nacos？"></a>什么是Nacos？</h1><p>服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理：</p>
<p><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Kubernetes Service</a></p>
<p><a href="https://grpc.io/docs/guides/concepts.html#service-definition" target="_blank" rel="noopener">gRPC</a> &amp; <a href="https://dubbo.incubator.apache.org/" target="_blank" rel="noopener">Dubbo RPC Service</a></p>
<p><a href="https://spring.io/understanding/REST" target="_blank" rel="noopener">Spring Cloud RESTful Service</a></p>
<h1 id="使用Nacos-Server并注册应用"><a href="#使用Nacos-Server并注册应用" class="headerlink" title="使用Nacos Server并注册应用"></a>使用Nacos Server并注册应用</h1><p>1.下载Nacos。下载地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p>
<p>2.解压Nacos的压缩包。</p>
<p>3.启动Nacos。</p>
<p><strong>windows下启动</strong></p>
<p>cmd startup.cmd或者双击startup.cmd</p>
<p><strong>linux/Unix/Mac启动</strong></p>
<p>sh startup.sh -m standalone</p>
<p>4.启动完成</p>
<p>nacos有一个完整的web界面，在上面有很多完善的功能。在浏览器打开<a href="http://localhost:8848/nacos。默认的用户名为nacos，密码为nacos" target="_blank" rel="noopener">http://localhost:8848/nacos。默认的用户名为nacos，密码为nacos</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos.jpg" alt=""></p>
<p>nacos的web界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos2.jpg" alt=""></p>
<p>5.编写应用，注册到Nacos中</p>
<p>创建项目：</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-user-center-nacos-7003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-user-center-nacos-7005<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.spring.boot.starter.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">druid.spring.boot.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring-boot-starter.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis-spring-boot-starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool-all.version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">hutool-all.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本 + 子module不用谢groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.spring.boot.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建模块（cloud-user-center-nacos-7003）"><a href="#创建模块（cloud-user-center-nacos-7003）" class="headerlink" title="创建模块（cloud-user-center-nacos-7003）"></a>创建模块（cloud-user-center-nacos-7003）</h2><p><strong>pom.xml：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-user-center-nacos-7003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud ailibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>启动类：</strong>UserCenter7003Application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenter7003Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserCenter7003Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>配置文件：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<h2 id="创建模块（cloud-user-center-nacos-7005）"><a href="#创建模块（cloud-user-center-nacos-7005）" class="headerlink" title="创建模块（cloud-user-center-nacos-7005）"></a>创建模块（cloud-user-center-nacos-7005）</h2><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-user-center-nacos-7005<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud ailibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Nacos7005Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Nacos7005Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<p>运行启动类启动，可以看到程序成功注册到Nacos注册中心。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos3.png" alt=""></p>
<p>登录Nacos的Web界面查看：已经有两个实列数成功注册进去。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos4.png" alt=""></p>
<h1 id="服务之间的相互感知"><a href="#服务之间的相互感知" class="headerlink" title="服务之间的相互感知"></a>服务之间的相互感知</h1><p>很明显user-center两个实列已经注册成功，对于一个注册中心来说，里面的服务时可以相互感知的。代码如下：</p>
<p>在7003端口的服务中创建一个UserCenterController，然后两个服务都启动。在浏览器访问<a href="http://localhost:7003/nacos/getServiceInfo" target="_blank" rel="noopener">http://localhost:7003/nacos/getServiceInfo</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos.conttoller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"nacos"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getServiceInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        services.stream().distinct().forEach(e -&gt; list.add(discoveryClient.getInstances(e)));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"toCall7005"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"cloud-user-center-provider-service"</span>);</span><br><span class="line">        List&lt;ServiceInstance&gt; serviceInstances = instances.stream().filter(e -&gt; e.getPort() == <span class="number">7005</span>).collect(Collectors.toList());</span><br><span class="line">        ServiceInstance serviceInstance = serviceInstances.get(<span class="number">0</span>);</span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri.toString()+<span class="string">"nacos/test"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleClientHttpRequestFactory requestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        requestFactory.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然，可以通过DiscoveryClient来获取注册在Nacos上的服务信息。接下来可以使用RestTemplate来调用7005端口的服务。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos5.jpg" alt=""></p>
<p>首先在7005端口的服务也创建一个UserCenterController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"nacos"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"welcome to use nacos port ："</span>+<span class="number">7005</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器访问<a href="http://localhost:7003/nacos/toCall7005" target="_blank" rel="noopener">http://localhost:7003/nacos/toCall7005</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/rest.jpg" alt=""></p>
<p>综上所述，注册中Nacos中的服务时可以相互感知，并可以通过一些Http的客户端进行相互之间的调用。</p>
<h1 id="Nacos服务发现的领域模型"><a href="#Nacos服务发现的领域模型" class="headerlink" title="Nacos服务发现的领域模型"></a>Nacos服务发现的领域模型</h1><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos7.jpeg" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos6.png" alt=""></p>
<ul>
<li><strong>NameSpace</strong>：命名空间，Nacso默认的NameSpace是public。比如在开发中，可以创建一个开发环境和测试环境的NameSpace。这样可以通过指定服务的NameSpace做到环境隔离。</li>
<li><strong>Group</strong>：分组。在Nacos用作配置中心时使用。</li>
<li><strong>Service：</strong>微服务</li>
<li><strong>Cluster</strong>：对指定微服务的一个虚拟划分，默认是DEFAULT。</li>
<li><strong>Instance：</strong>微服务实例。</li>
<li><strong>Metadata</strong>： 只要用于版本控制。比如，我们在开发中可能是多个版本共存的。</li>
</ul>
<h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><p>在Nacos下创建一个名为dev的NameSpace，然后再该NameSpace下创建一个</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos8.png" alt=""></p>
<p><strong>cloud-user-center-nacos-7003</strong></p>
<p>只需要在配置文件中配置namespace和cluster-name这两项。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 开发NameSpace，值为UUID</span></span><br><span class="line">        <span class="attr">namespace:</span> </span><br><span class="line">        <span class="comment"># 列如：广州集群</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">GZ</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<p><strong>cloud-user-center-nacos-7005</strong></p>
<p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7005</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">          <span class="comment"># 开发NameSpace，值为UUID</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">fa47d71f-9bc5-45ae-96c1-a6b9f7c55700</span></span><br><span class="line">          <span class="comment"># 北京集群</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">BJ</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>注册中心：服务列表</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos9.png" alt=""></p>
<p>点击”详情“，可以看到GZ和BJ两个集群</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos10.png" alt=""></p>
<h1 id="Nacos的元信息"><a href="#Nacos的元信息" class="headerlink" title="Nacos的元信息"></a>Nacos的元信息</h1><p>Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。</p>
<p>设置方式：1.在Nacos的web界面的控制台设置。2.在配置文件设置</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos11.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos12.png" alt=""></p>
<p>在配置文件设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 开发NameSpace，值为UUID</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">fa47d71f-9bc5-45ae-96c1-a6b9f7c55700</span></span><br><span class="line">        <span class="comment"># 广州集群</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">GZ</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">          <span class="attr">info:</span> <span class="string">user-center</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos13.png" alt=""></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote>
<p>不积跬步无以至千里，不积小流无以成江海</p>
</blockquote>
]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>springcloud</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Java虚拟机学习之内存管理(一)</title>
    <url>/posts/jvm/2020/07/202007122215.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​        对于Java程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个new操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，看起来由虚拟机管理内存一切都很美好。不过，也正是因为Java程序员把控制内存的权力交给了Java虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那排查错误、修正问题将会成为一项异常艰难的工作。</p>
<h1 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h1><p>​        Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/jvm/jvm-memory.jpg" alt="thread-dead-lock"></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>​        程序计数器时一块较小的内存空间，可以把它看作是当前线程所执行字节码的行号指示器。在Java虚拟机的概念模型里面，字节码解析工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成。</p>
<p>​        Java虚拟机中的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器(多核处理器来说是一个内核)都会执行一条线程中的指令。因此，为了多线程切换之后能够恢复到正确的执行位置，每条线程都需要这样的一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。因此在Java虚拟机的运行时数据区中程序计数器是属于“线程私有”的一块内存。</p>
<p>​        如果线程正在执行的是一个Java方法， 这个计数器记录的是正在执行的虚拟机字节码指令的地址； 如果正在执行的是本地（Native） 方法， 这个计数器值则应为空（Undefined） 。 此内存区域是唯一一个在《Java虚拟机规范》 中没有规定任何<code>OutOfMemoryError</code>情况的区域。  </p>
<h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>​        和程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程魔性：每个方法被执行的时候，Java虚拟机都会同步创建栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每个方法被调用直至执行完毕的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>
<p>​        局部变量表存放了编译期间可知的各种Java虚拟机基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型，他并不等同于对象本身，可能是一个执行对象起始地址的引用指针，也可能是指向代表一个对象的句柄或者其他与此对象相关的位置)和<code>returnAddress</code>类型（指向下一条字节码指令的地址）。</p>
<p>​        这些数据类型在局部变量表中的存储空间以局部变量槽来表示，其中64位长度的ling和double类型的数据会占用两个两个变量槽， 其余的数据类型只占用一个。 局部变量表所需的内存空间在编译期间完成分配， 当进入一个方法时， 这个方法需要在栈帧中分配多大的局部变量空间是完全确定的， 在方法运行期间不会改变局部变量表的大小。 这里说的“大小”是指变量槽的数量，虚拟机真正使用多大的内存空间（譬如按照1个变量槽占用32个比特、 64个比特， 或者更多） 来实现一个变量槽， 这是完全由具体的虚拟机实现自行决定的事情。</p>
<p>​        在《Java虚拟机规范》中，对于这个内存区域规定了两类异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出<code>StackOverflowError</code>异常；如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存时，抛出<code>StackOverflowError</code>异常。</p>
<p>​        如下所示，每调用一个方法就是创建一个栈帧并入栈(进入Java虚拟机栈)，当足够多的栈帧进栈并且没有出栈，这是会导致栈内存溢出。栈内存溢出经常会发生再递归调用</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/jvm/stackoverflow.jpg" alt="stackoverflow"></p>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>​        本地方法栈（Native Method Stacks） 与虚拟机栈所发挥的作用是非常相似的， 其区别只是虚拟机栈为虚拟机执行Java方法（也就是字节码） 服务， 而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>
<p>​        《Java虚拟机规范》对本地方法栈中方法使用的语言、使用方式与数据结构并没有任何强制规定，因此具体的虚拟机可以根据需要自由实现它，甚至有的Java虚拟机（譬如Hot-Spot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常。  </p>
<h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>对于Java应用程序来说，Java堆时虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的，在虚拟机启动的时候Java堆就被创建出来。此区域的唯一作用就是存放对象实例，Java中“几乎”所有的对象实例都在这里分配内存。在《Java虚拟机规范》 中对Java堆的描述是： “所有的对象实例以及数组都应当在堆上分配”， 而这里的“几乎”是指从实现角度来看， 随着Java语言的发展， 现在已经能看到些许迹象表明日后可能出现值类型的支持， 即使只考虑现在， 由于即时编<br>译技术的进步， 尤其是逃逸分析技术的日渐强大， 栈上分配、 标量替换优化手段已经导致一些微妙的变化悄然发生， 所以说Java对象实例都分配在堆上也渐渐变得不是那么绝对了。</p>
<p>如果从分配内存的角度看， 所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer， TLAB） ， 以提升对象分配时的效率。 不过无论从什么角度， 无论如何划分， 都不会改变Java堆中存储内容的共性， 无论是哪个区域， 存储的都只能是对象的实例， 将Java堆细分的目的只是为了更好地回收内存， 或者更快地分配内存。  </p>
<p>根据《Java虚拟机规范》 的规定， Java堆可以处于物理上不连续的内存空间中， 但在逻辑上它应该被视为连续的， 这点就像我们用磁盘空间去存储文件一样， 并不要求每个文件都连续存放。 但对于大对象（典型的如数组对象） ， 多数虚拟机实现出于实现简单、 存储高效的考虑， 很可能会要求连续的内存空间。</p>
<p>Java堆既可以被实现成固定大小的， 也可以是可扩展的， 不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定） 。 如果在Java堆中没有内存完成实例分配， 并且堆也无法再扩展时， Java虚拟机将会抛出<code>OutOfMemoryError</code>异常。  </p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区（Method Area） 与Java堆一样， 是各个线程共享的内存区域， 它用于存储已被虚拟机加载的类型信息、 常量、 静态变量、 即时编译器编译后的代码缓存等数据。 虽然《Java虚拟机规范》 中把方法区描述为堆的一个逻辑部分， 但是它却有一个别名叫作“非堆”（Non-Heap） ， 目的是与Java堆区分开来。 </p>
<p>《Java虚拟机规范》 对方法区的约束是非常宽松的， 除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外， 甚至还可以选择不实现垃圾收集。 相对而言， 垃圾收集行为在这个区域的确是比较少出现的， 但并非数据进入了方法区就如永久代的名字一样“永久”存在了。 这区域的内存回收目标主要是针对常量池的回收和对类型的卸载， 一般来说这个区域的回收效果比较难令人满意， 尤其是类型的卸载， 条件相当苛刻， 但是这部分区域的回收有时又确实是必要的。 </p>
<p>根据《Java虚拟机规范》 的规定， 如果方法区无法满足新的内存分配需求时， 将抛出OutOfMemoryError异常。  </p>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池（Runtime Constant Pool） 是方法区的一部分。 Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外， 还有一项信息是常量池表（Constant Pool Table） ， 用于存放编译期生成的各种字面量与符号引用， 这部分内容将在类加载后存放到方法区的运行时常量池中。</p>
<p>Java虚拟机对于Class文件每一部分（自然也包括常量池） 的格式都有严格规定， 如每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、 加载和执行， 但对于运行时常量池，《Java虚拟机规范》 并没有做任何细节的要求， 不同提供商实现的虚拟机可以按照自己的需要来实现这个内存区域， 不过一般来说， 除了保存Class文件中描述的符号引用外， 还会把由符号引用翻译出来的直接引用也存储在运行时常量池中。</p>
<p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p>
<p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。  </p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常的出现。</p>
<p>在JDK1.4中新加入了NIO类，引入一种基于通道与缓冲区的I/O方式，它可以使Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样内在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回恢复数据。</p>
<p>直接内存的分配不会受到Java堆大小的限制， 但是， 既然是内存， 则肯定还是会受到本机总内存（包括物理内存、 SWAP分区或者分页文件） 大小以及处理器寻址空间的限制， 一般服务器管理员配置虚拟机参数时， 会根据实际内存去设置-Xmx等参数信息， 但经常忽略掉直接内存， 使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。  </p>
<h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h2 id="对象的定位"><a href="#对象的定位" class="headerlink" title="对象的定位"></a>对象的定位</h2><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><h1 id="实战：OOM异常"><a href="#实战：OOM异常" class="headerlink" title="实战：OOM异常"></a>实战：OOM异常</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>【java并发编程】多线程的线程安全问题</title>
    <url>/posts/java-concurrent-programing/2020/07/202007041308.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>看一下下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUnsafe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" sale a ticket,current:"</span> + saleTicket());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"票已经卖完了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saleTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ticketNum--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-1 sale a ticket,current:18</span><br><span class="line">Thread-9 sale a ticket,current:11</span><br><span class="line">Thread-3 sale a ticket,current:19</span><br><span class="line">Thread-4 sale a ticket,current:12</span><br><span class="line">Thread-6 sale a ticket,current:14</span><br><span class="line">Thread-8 sale a ticket,current:13</span><br><span class="line">Thread-2 sale a ticket,current:15</span><br><span class="line">Thread-5 sale a ticket,current:20</span><br><span class="line">Thread-0 sale a ticket,current:17</span><br><span class="line">Thread-7 sale a ticket,current:16</span><br><span class="line">Thread-7 sale a ticket,current:10</span><br><span class="line">Thread-9 sale a ticket,current:5</span><br><span class="line">Thread-1 sale a ticket,current:6</span><br><span class="line">Thread-6 sale a ticket,current:7</span><br><span class="line">Thread-3 sale a ticket,current:8</span><br><span class="line">Thread-4 sale a ticket,current:9</span><br><span class="line">Thread-8 sale a ticket,current:9</span><br><span class="line">Thread-2 sale a ticket,current:9</span><br><span class="line">Thread-0 sale a ticket,current:9</span><br><span class="line">Thread-5 sale a ticket,current:9</span><br><span class="line">Thread-4 sale a ticket,current:2</span><br><span class="line">Thread-7 sale a ticket,current:-2</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-6 sale a ticket,current:-1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-1 sale a ticket,current:0</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-9 sale a ticket,current:0</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-8 sale a ticket,current:1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-3 sale a ticket,current:4</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-5 sale a ticket,current:1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-2 sale a ticket,current:4</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-0 sale a ticket,current:3</span><br><span class="line">票已经卖完了</span><br><span class="line">票已经卖完了</span><br></pre></td></tr></table></figure>

<p>从执行结果看得出来，存在</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/java-concurrent/unsafe1.jpg" alt=""></p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1>]]></content>
      <categories>
        <category>并发编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器下配置MySQL主从配置</title>
    <url>/posts/mysql/2020/06/202006281626.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/replica.png" alt=""></p>
<h1 id="获取MySQL镜像"><a href="#获取MySQL镜像" class="headerlink" title="获取MySQL镜像"></a>获取MySQL镜像</h1><p>搜索mysql，前两个是mysql官方制作的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker search mysql</span><br><span class="line">NAME    DESCRIPTION                                     STARS        OFFICIAL   AUTOMATED</span><br><span class="line">mysql   MySQL is a widely used, open-source relation…   9686         [OK]                </span><br><span class="line">mariadb MariaDB is a community-developed fork of MyS…   3523         [OK]                </span><br><span class="line">mysql&#x2F;mysql-server   Optimized MySQL Server Docker images. Create…   706         [OK]</span><br></pre></td></tr></table></figure>

<p>拉取mysql镜像到本地，因为mysql镜像有很多版本，对应mysql的版本：mysql:tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker pull mysql:5.7</span><br></pre></td></tr></table></figure>

<h1 id="运行MySQL镜像生成容器"><a href="#运行MySQL镜像生成容器" class="headerlink" title="运行MySQL镜像生成容器"></a>运行MySQL镜像生成容器</h1><p>运行mysql镜像，生成容器。用户名root，密码123456</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker run -d --name mysql5.7 -p 3306:3306 -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;123456 master</span><br><span class="line"></span><br><span class="line">[root@slave ~]# docker run -d --name mysql5.7 -p 3306:3306 -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;123456 slave</span><br></pre></td></tr></table></figure>

<p>至于mysql的配置文件my.cnf，可以把自己准备，也可以通过一下命令获取</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker run -i --rm mysql5.7 cat /etc/my.cnf &gt; my.cnf</span><br></pre></td></tr></table></figure>

<h1 id="MySQL主从配置"><a href="#MySQL主从配置" class="headerlink" title="MySQL主从配置"></a>MySQL主从配置</h1><p>修改mysql的配置文件</p>
<p>master：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">#开启log-bin</span><br><span class="line">log-bin &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">#设置服务id，主从不能一致  </span><br><span class="line">server‐id &#x3D; 1  </span><br><span class="line">#设置需要同步的数据库  </span><br><span class="line">#binlog‐do‐db&#x3D;user_db  </span><br><span class="line">#屏蔽系统库同步  </span><br><span class="line">binlog‐ignore‐db&#x3D;mysql  </span><br><span class="line">binlog‐ignore‐db&#x3D;information_schema  </span><br><span class="line">binlog‐ignore‐db&#x3D;performance_schema  </span><br><span class="line">expire-logs-days &#x3D; 14</span><br><span class="line">max-binlog-size &#x3D; 500M</span><br><span class="line">default-time-zone&#x3D;&#39;+08:00&#39;</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure>

<p>slave：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">#开启log-bin</span><br><span class="line">log-bin &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">expire-logs-days &#x3D; 14</span><br><span class="line">max-binlog-size &#x3D; 500M</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line">#relay_log的位置</span><br><span class="line">relay_log&#x3D;mysql-relay-bin</span><br><span class="line">log-slave-updates &#x3D; 1</span><br><span class="line">#设置需要同步的数据库  </span><br><span class="line">#replicate_wild_do_table&#x3D;user_db.%  </span><br><span class="line">#屏蔽系统库同步  </span><br><span class="line">replicate_wild_ignore_table&#x3D;mysql.%  </span><br><span class="line">replicate_wild_ignore_table&#x3D;information_schema.%  </span><br><span class="line">replicate_wild_ignore_table&#x3D;performance_schema.% </span><br><span class="line">#只读</span><br><span class="line">read-only &#x3D; 1</span><br><span class="line">default-time-zone&#x3D;&#39;+08:00&#39;</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure>

<p>重启master和slave</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker restart master</span><br><span class="line">[root@msr ~]# docker restart slave</span><br></pre></td></tr></table></figure>

<p>下一步在Master数据库创建数据同步用户，授予用户 slave REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于在主从库之间同步数据。首先要进入到docker容器内，也可以通过向Navicat等工具执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker exec -it master &#x2F;bin&#x2F;bash</span><br><span class="line">root@207f37f4c64a:&#x2F;# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1633</span><br><span class="line">Server version: 5.7.30-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000004 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>重启数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr ~]# docker restart master</span><br><span class="line">[root@msr ~]# docker restart slave</span><br></pre></td></tr></table></figure>

<p>在salve中执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;192.168.74.130&#39;, master_user&#x3D;&#39;slave&#39;, master_password&#x3D;&#39;123456&#39;, master_port&#x3D;3306, master_log_file&#x3D;&#39;mysql-bin.000004&#39;, master_log_pos&#x3D; 154, master_connect_retry&#x3D;30;</span><br></pre></td></tr></table></figure>

<p><strong>master_host</strong> ：Master的地址，指的是容器的独立ip,可以通过docker inspect –format=’ {{.NetworkSettings.IPAddress}} ‘容器名称|容器id`查询容器的ip，这个命令查看的是容器的Host，同服务器下可以使用。不同服务器下就要使用服务的真实IP地址。</p>
<p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p>
<p><strong>master_user</strong>：用于数据同步的用户</p>
<p><strong>master_password</strong>：用于同步的用户的密码</p>
<p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p>
<p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p>
<p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p>
<p>查看slave的状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show slave status\\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 192.168.74.130</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1045</span><br><span class="line">                Last_IO_Error: error connecting to master &#39;slave@47.96.175.101:3306&#39; - retry-time: 60  retries: 10</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: </span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 200628 09:03:36</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>正常情况下Slave_IO_Running: No和Slave_SQL_Running: No。因为我们还没有开启主从复制过程。使用<code>start slave</code>开启主从复制过程，然后再次查询主从同步状态show slave status \G;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.74.130</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 531</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: 0994ae5c-b83a-11ea-9769-0242ac110003</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>Slave_IO_State: Waiting for master to send event，说明正在等待master的数据。Slave_IO_Running: Yes和Slave_SQL_Running: Yes说明主从复制已经开启。此时可以测试数据同步是否成功。</p>
<h1 id="配置过程中可能出现的错误"><a href="#配置过程中可能出现的错误" class="headerlink" title="配置过程中可能出现的错误"></a>配置过程中可能出现的错误</h1><p>Slave_IO_State: Connecting to master或Slave_IO_Running:Connectiog。说明从库一直在尝试连接主库，所以可能是：</p>
<ul>
<li>主库的Host地址不对</li>
<li>端口是否不对</li>
<li>用于连接主库的用户和密码是否不对</li>
<li>master_log_file和master_log_pos是否和主库的不一致</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据之hadoop：分布式文件系统HDFS</title>
    <url>/posts/hadoop/2020/06/202006261023.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h1><h2 id="HDFS定义"><a href="#HDFS定义" class="headerlink" title="HDFS定义"></a>HDFS定义</h2><p>HDFS是一个文件系统，用于存储文件，荣国目录树来定义文件；其次，他是分布式的，又很多服务器联合实现其功能，集群中的服务器有各自的角色。</p>
<p>HDFS的使用场景：适合一次性读写，多次读出的场景，且不支持文件的修改。适合用来做数据分析，不适合频繁修改的网盘应用。</p>
<h2 id="HDFS的优缺点"><a href="#HDFS的优缺点" class="headerlink" title="HDFS的优缺点"></a>HDFS的优缺点</h2><ol>
<li><p>优点</p>
<ul>
<li><p>高容错性</p>
<p>数据自动保存多个副本。通过增加副本的形式，提高容错性。</p>
<p>某个副本丢失后，可以自动恢复</p>
</li>
<li><p>适合大数据</p>
<p>能够处理数据规模达到GB、TB、甚至PB级别的数据。</p>
<p>能够处理百万规模以上的文件数量。</p>
</li>
<li><p>可构建在连接机器上，通过多副本机制，提高可靠性</p>
</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li><p>不适合低时延数据访问，比如毫秒级的存储数据，是做不到的</p>
</li>
<li><p>无法高效的对大量小文件进行存储</p>
<p>存储大量小文件的话，会占用NameNode大量的内存，来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限制的。</p>
<p>小文件存储的寻址事件会超过读取时间，违反了HDFS的设计目标</p>
</li>
<li><p>不支持并发写入和文件随机修改</p>
<p>一个文件只能有一个写，不允许多个线程同时写</p>
<p>仅支持数据追加，不支持文件的随机修改</p>
</li>
</ul>
</li>
</ol>
<h2 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hdfs-architecture.jpg" alt=""></p>
<ol>
<li>NameNode：就是Master，是管理者。<ul>
<li>管理HDFS的名称空间</li>
<li>配置副本策略</li>
<li>管理数据块映射信息</li>
<li>处理客户端读写请求</li>
</ul>
</li>
<li>DataNode：就是Slave，NameNode下达命令，DataNode执行实际的操作<ul>
<li>存储实际的数据块</li>
<li>执行数据块的读/写操作</li>
</ul>
</li>
<li>Client：客户端<ul>
<li>文件切分。文件上传HDFS的时候，Client将文件切分成一个个的Block，然后进行上传</li>
<li>与NameNode交互，获取文件的位置信息</li>
<li>与DataNode交互，读取或者写入数据</li>
<li>Client提供一些命令来管理HDFS，比如NameNode格式化</li>
<li>Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作</li>
</ul>
</li>
<li>Secondary NameNode：并非NameNode的热备。当NameNode挂掉了，它并不能马上替换NameNode并提供服务<ul>
<li>服务NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode</li>
<li>在紧急情况下，可辅助恢复NameNode</li>
</ul>
</li>
</ol>
<h2 id="HDFS文件块大小"><a href="#HDFS文件块大小" class="headerlink" title="HDFS文件块大小"></a>HDFS文件块大小</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hdfs-storage.png" alt=""></p>
<p>HDFS中的文件在物理上是分块（Block）存储的，块的大小可以通过配置参数（dfs.blocksize）来配置，默认大小在Hadoop2中是128M，老版本是64M</p>
<p>HDFS的块大小配置太小会增加寻址时间，程序一直在找块的开始位置，如果设置太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理这块数据时，会非常慢。所以HDFS块的大小设置主要取决去磁盘的传输速率</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次Algolia的ApiKey使用异常</title>
    <url>/posts/bug-log/2020/06/202006251725.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h1><p>第一次的使用Algolia作为博客的搜索系统，一开始设置的时候没怎么关注。在后面写了很多文章想要跟新一下Algolia的索引的时候，除了问题，网站根本搜索不了，起了官网一看发现索引过期了，再去看一下邮箱，发现了之前不注意到一封邮件。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia.jpg" alt=""></p>
<p>所以重新修改使用计划，重新选择社区版</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia2.jpg" alt=""></p>
<h1 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h1><p>在重新生成索引的时候，出现错误：没有足够的权限去更新索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[hexo-algolia] Not enough rights to update an object near line:1 column:721</span><br></pre></td></tr></table></figure>

<p>在Algolia的控制台中的API Keys中可以看到，因为一开始在博客的配置中是使用Search-Only API key，只能够搜索，不能进行更新索引，这个API Key没有足够权限，然后又发现是因为初始化就有的key，不能对其ACL进行修改。那只能新增一个Key。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia3.jpg" alt=""></p>
<p>点击<code>New Api Key</code></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia4.jpg" alt=""></p>
<p>选择权限</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia5.jpg" alt=""></p>
<p>最后在生成索引的时候，使用新生成的，有足够权限的API Key</p>
]]></content>
      <categories>
        <category>踩坑日志</category>
      </categories>
  </entry>
  <entry>
    <title>数据结构与算法：栈</title>
    <url>/posts/datastructure/2020/06/202006231844.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><ul>
<li>栈是一种特殊的线性表，只能在一端进行操作</li>
<li>往栈中添加元素的操作，一般叫做 push，入栈</li>
<li>从栈中移除元素的操作，一般叫做 pop，出栈（只能移除栈顶元素，也叫做：弹出栈顶元素）</li>
<li>后进先出的原则，Last In First Out，LIFO</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/19.png" alt="进栈"></p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/20.png" alt="出栈"></p>
<h1 id="栈的接口设计"><a href="#栈的接口设计" class="headerlink" title="栈的接口设计"></a>栈的接口设计</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> MyList&lt;E&gt; list = <span class="keyword">new</span> DynamicArrayListV2&lt;E&gt;();</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 清空</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		list.clear();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 元素数量</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.size();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 是否为空</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.isEmpty();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 入栈</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">		list.add(element);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 出栈</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* 获取栈顶元素</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="栈的应用：leetcode算法题"><a href="#栈的应用：leetcode算法题" class="headerlink" title="栈的应用：leetcode算法题"></a>栈的应用：leetcode算法题</h1><p>题目：给定一个包含’(‘，’)’，’{‘，’}’，’[‘，’]’的字符串，是否有效。</p>
<p>满足条件：1.左括号必须用相同类型的右括号闭合  2.左括号必须以正确的顺序闭合</p>
<p>示例1：</p>
<p>输入：”()”</p>
<p>输出：true</p>
<p>示例2：</p>
<p>输入：”()[]{}” </p>
<p>输出：true</p>
<p>示例3：</p>
<p>输入：”(]”</p>
<p>输出：false</p>
<p>示例4：</p>
<p>输入：”([)]”</p>
<p>输出：fasle</p>
<p>示例5：</p>
<p>输入：”{[]}”</p>
<p>输出：true</p>
<ol>
<li>遇见左字符，将左字符入栈</li>
<li>遇见右字符<br>如果栈是空的，说明括号无效<br>如果栈不为空，将栈顶字符出栈，与右字符之匹配<br>✓ 如果左右字符不匹配，说明括号无效<br>✓ 如果左右字符匹配，继续扫描下一个字符</li>
<li>所有字符扫描完毕后<br>✓ 栈为空，说明括号有效<br>✓ 栈不为空，说明括号无效</li>
</ol>
<p><strong>解法之一（使用栈）：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test20</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"([)]"</span>;</span><br><span class="line">        Test20 test20 = <span class="keyword">new</span> Test20();</span><br><span class="line">        System.out.println(test20.isValid(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">')'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">']'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.pop()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法：链表</title>
    <url>/posts/datastructure/2020/06/202006231045.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h1><ul>
<li>动态数组有个明显的缺点</li>
<li>可能会造成内存空间的大量浪费</li>
<li>链表可以办到用到多少就申请多少内存</li>
<li>链表是一种链式存储的线性表，所有元素的内存地址不一定是连续的</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/10.jpg" alt=""></p>
<h2 id="链表的设计"><a href="#链表的设计" class="headerlink" title="链表的设计"></a>链表的设计</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/11.jpg" alt=""></p>
<p>链表的方法都和动态数组的方法一致，所以两者通过继承AbstractList，重写方法实现各自的功能。</p>
<h2 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/12.jpg" alt=""></p>
<h2 id="指定索引位置添加元素"><a href="#指定索引位置添加元素" class="headerlink" title="指定索引位置添加元素"></a>指定索引位置添加元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/13.jpg" alt=""></p>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/14.jpg" alt=""></p>
<h2 id="虚拟头节点"><a href="#虚拟头节点" class="headerlink" title="虚拟头节点"></a>虚拟头节点</h2><p>有时候为了让代码更加精简，统一所有节点的处理逻辑，可以在最前面增加一个虚拟的头结点（不存储数据）。因为在边界(index=0)，这个位置的一些操作是要格外的注意，增加了虚拟头节点之后，这些操作便可以统一处理。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/15.jpg" alt=""></p>
<h2 id="代码实现：单向链表"><a href="#代码实现：单向链表" class="headerlink" title="代码实现：单向链表"></a>代码实现：单向链表</h2><p>顶层接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元数数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断列表是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>抽象父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单向链表实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//虚拟头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev = index == <span class="number">0</span> ? first : node(index - <span class="number">1</span>);</span><br><span class="line">        prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev = index == <span class="number">0</span> ? first : node(index - <span class="number">1</span>);</span><br><span class="line">        Node&lt;E&gt; node = prev.next;</span><br><span class="line">        prev.next = node.next;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node.element);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h1><p>单向循环链表就是单项链表的尾元素的next指向头元素</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/17.jpg" alt=""></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.datastructure.linklist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 虚拟头节点：单项循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/24 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleCircleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(element).append(<span class="string">"_"</span>).append(next.element);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; newFirst = <span class="keyword">new</span> Node&lt;&gt;(element, first);</span><br><span class="line">            <span class="comment">// 拿到最后一个节点</span></span><br><span class="line">            Node&lt;E&gt; last = (size == <span class="number">0</span>) ? newFirst : node(size - <span class="number">1</span>);</span><br><span class="line">            last.next = newFirst;</span><br><span class="line">            first = newFirst;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">                first = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;E&gt; last = node(size - <span class="number">1</span>);</span><br><span class="line">                first = first.next;</span><br><span class="line">                last.next = first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            node = prev.next;</span><br><span class="line">            prev.next = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/16.jpg" alt=""></p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="comment">// 往最后面添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            Node&lt;E&gt; oldLast = last;</span><br><span class="line">            last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 这是链表添加的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = last;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oldLast.next = last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = next.prev;</span><br><span class="line">            Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev, element, next);</span><br><span class="line">            next.prev = node;</span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        Node&lt;E&gt; prev = node.prev;</span><br><span class="line">        Node&lt;E&gt; next = node.next;</span><br><span class="line">        <span class="comment">// index == 0，第一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// index == size - 1，最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="comment">//1.如果index小于链表容量的一半，则从首元素开始向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.index大于链表容量的一半，从尾元素向前查找</span></span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(prev.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"_"</span>).append(element).append(<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(next.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/18.jpg" alt=""></p>
<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; current;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        current = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current = current.next;</span><br><span class="line">        <span class="keyword">return</span> current.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next = current.next;</span><br><span class="line">        E element = remove(current);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="comment">// 往最后面添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            Node&lt;E&gt; oldLast = last;</span><br><span class="line">            last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, first);</span><br><span class="line">            <span class="comment">// 这是链表添加的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = last;</span><br><span class="line">                first.next = first;</span><br><span class="line">                first.prev = first;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oldLast.next = last;</span><br><span class="line">                first.prev = last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = next.prev;</span><br><span class="line">            Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev, element, next);</span><br><span class="line">            next.prev = node;</span><br><span class="line">            prev.next = node;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (next == first) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> remove(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">remove</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node.prev;</span><br><span class="line">            Node&lt;E&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (node == first) &#123;</span><br><span class="line">                first = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// index == size - 1</span></span><br><span class="line">            <span class="keyword">if</span> (node == last) &#123;</span><br><span class="line">                last = prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.如果index小于链表容量的一半，则从首元素开始向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.index大于链表容量的一半，从尾元素向前查找</span></span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(prev.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"_"</span>).append(element).append(<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(next.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法：动态数组</title>
    <url>/posts/datastructure/2020/06/202006230937.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h1><p>数据结构是计算机存储、组织数据的方式。常见的数据结构如下：</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/3.jpg" alt=""></p>
<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是具有 n 个<strong>相同类型元素</strong>的<strong>有限序列</strong>（ n ≥ 0 ）</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/4.jpg" alt=""></p>
<p>常见的线性表有：</p>
<ul>
<li>数组</li>
<li>链表</li>
<li>栈</li>
<li>队列</li>
<li>哈希表（散列表）</li>
</ul>
<h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组是一种顺序存储的线性表，所有元素的内存地址是连续的。在很多编程语言中，数组都有个致命的缺点，无法动态修改容量，实际开发中，我们更希望数组的容量是可以动态改变的。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/5.jpg" alt=""></p>
<h1 id="动态数组接口设计"><a href="#动态数组接口设计" class="headerlink" title="动态数组接口设计"></a>动态数组接口设计</h1><p>◼ int size();                                         // 元素的数量<br>◼ boolean isEmpty();                       // 是否为空<br>◼ boolean contains(E element);    // 是否包含某个元素<br>◼ void add(E element);                   // 添加元素到最后面<br>◼ E get(int index);                            // 返回index位置对应的元素<br>◼ E set(int index, E element);        // 设置index位置的元素<br>◼ void add(int index, E element); // 往index位置添加元素<br>◼ E remove(int index);                   // 删除index位置对应的元素<br>◼ int indexOf(E element);             // 查看元素的位置<br>◼ void clear();                                 // 清除所有元素</p>
<h1 id="动态数组设计"><a href="#动态数组设计" class="headerlink" title="动态数组设计"></a>动态数组设计</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/6.jpg" alt=""></p>
<h2 id="添加元素：add-E-element"><a href="#添加元素：add-E-element" class="headerlink" title="添加元素：add(E element)"></a>添加元素：add(E element)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/7.jpg" alt=""></p>
<h2 id="删除元素：remove-int-index"><a href="#删除元素：remove-int-index" class="headerlink" title="删除元素：remove(int index)"></a>删除元素：remove(int index)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/8.jpg" alt=""></p>
<h2 id="指定索引位置添加元素：-add-int-index-E-element"><a href="#指定索引位置添加元素：-add-int-index-E-element" class="headerlink" title="指定索引位置添加元素： add(int index, E element)"></a>指定索引位置添加元素： add(int index, E element)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/9.jpg" alt=""></p>
<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>把原动态数组复制到新的动态组数(比原数组的容量大)</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>MyList接口：定义要实现的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元数数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断列表是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MyAbstractList：抽象类，实现接口MyList一些通用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>动态数组的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicArrayListV3</span><span class="params">(<span class="keyword">int</span> capaticy)</span> </span>&#123;</span><br><span class="line">        capaticy = (capaticy &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capaticy;</span><br><span class="line">        elements = (E[]) <span class="keyword">new</span> Object[capaticy];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicArrayListV3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅供参考</span></span><br><span class="line">        <span class="keyword">if</span> (elements != <span class="keyword">null</span> &amp;&amp; elements.length &gt; DEFAULT_CAPACITY) &#123;</span><br><span class="line">            elements = (E[]) <span class="keyword">new</span> Object[DEFAULT_CAPACITY];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">// O(1)</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elements[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123; <span class="comment">// O(1)</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最好：O(1)</span></span><br><span class="line"><span class="comment">         * 最坏：O(n)</span></span><br><span class="line"><span class="comment">         * 平均：O(n)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">            elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125; <span class="comment">// size是数据规模</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最好：O(1)</span></span><br><span class="line"><span class="comment">         * 最坏：O(n)</span></span><br><span class="line"><span class="comment">         * 平均：O(n)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        <span class="comment">//index后面的元素往前移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//原尾元素置空</span></span><br><span class="line">        elements[--size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(elements[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的2倍</span></span><br><span class="line">        <span class="comment">// int newCapacity = oldCapacity &lt;&lt; 1;</span></span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 30</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="comment">// 15</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; (newCapacity) || oldCapacity &lt;= DEFAULT_CAPACITY) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剩余空间还很多</span></span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"缩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// size=3, [99, 88, 77]</span></span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            string.append(elements[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Java中也有动态数组的实现ArrayList，本文的动态数组也是模仿jdk实现的ArrayList。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态数组</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法：时间复杂度</title>
    <url>/posts/datastructure/2020/06/202006230817.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="如何评判一个算法的好坏？"><a href="#如何评判一个算法的好坏？" class="headerlink" title="如何评判一个算法的好坏？"></a>如何评判一个算法的好坏？</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        result+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果单从执行效率上进行评估，可能会想到这么一种方案。比较不同算法对同一组输入的执行处理时间，这种方案也叫做：事后统计法</li>
<li>上述方案有比较明显的缺点<ul>
<li>执行时间严重依赖硬件以及运行时各种不确定的环境因素</li>
<li>必须编写相应的测算代码</li>
<li>测试数据的选择比较难保证公正性</li>
</ul>
</li>
<li>一般从以下维度来评估算法的优劣<ul>
<li>正确性、可读性、健壮性（对不合理输入的反应能力和处理能力）</li>
<li>时间复杂度（time complexity）：估算程序指令的执行次数（执行时间）</li>
<li>空间复杂度（space complexity）：估算所需占用的存储空间</li>
</ul>
</li>
</ul>
<h1 id="大O表示法（Big-O）"><a href="#大O表示法（Big-O）" class="headerlink" title="大O表示法（Big O）"></a>大O表示法（Big O）</h1><ul>
<li>一般用大O表示法来描述复杂度，它表示的是数据规模 n 对应的复杂度</li>
<li>忽略常数、系数、低阶</li>
<li>9 &gt;&gt; O(1)</li>
<li>2n + 3 &gt;&gt; O(n)</li>
<li>n² + 2n + 6 &gt;&gt; O(n 2 )</li>
<li>4n ³ + 3n²+ 22n + 100 &gt;&gt; O(n³)</li>
<li>写法上，n³ 等价于 n^3</li>
<li>注意：大O表示法仅仅是一种粗略的分析模型，是一种估算，能帮助我们短时间内了解一个算法的执行效率</li>
</ul>
<h1 id="对数阶的细节"><a href="#对数阶的细节" class="headerlink" title="对数阶的细节"></a>对数阶的细节</h1><p>对数阶一般省略底数，不管是怎么以什么为底的对数，都是可以乘以一个<strong>常数</strong>，最后转化为以2为底的对数。所以在计算时间复杂度时，对数都统称为logn。<br>$$<br>\log_2n=\log_29*log_9n<br>$$</p>
<h1 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h1><table>
<thead>
<tr>
<th>执行次数</th>
<th>复杂度</th>
<th>非正式术语</th>
</tr>
</thead>
<tbody><tr>
<td>12</td>
<td>O(1)</td>
<td>常数阶</td>
</tr>
<tr>
<td>3n+1</td>
<td>O(n)</td>
<td>线性阶</td>
</tr>
<tr>
<td>2n^2+5n+6</td>
<td>O(n^2)</td>
<td>平方阶</td>
</tr>
<tr>
<td>4log_2n+25</td>
<td>O(logn)</td>
<td>对数阶</td>
</tr>
<tr>
<td>3n+2nlog_3n+15</td>
<td>O(nlogn)</td>
<td>nlogn阶</td>
</tr>
<tr>
<td>4n^3+3n^2+22n+10</td>
<td>O(n^3)</td>
<td>立方阶</td>
</tr>
<tr>
<td>2^n</td>
<td>O(2^n)</td>
<td>指数阶</td>
</tr>
</tbody></table>
<p>查看函数图像的网站：<a href="https://zh.numberempire.com/graphingcalculator.php" target="_blank" rel="noopener">https://zh.numberempire.com/graphingcalculator.php</a></p>
<h1 id="数据规模对比"><a href="#数据规模对比" class="headerlink" title="数据规模对比"></a>数据规模对比</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/2.jpg" alt=""></p>
<h1 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h1><p>斐波那契数列，下面有两种解法。递归和非递归。其实可以发现递归的时间复杂度是更高的，当是具规模越大的时候，递归就会越耗时。所以一般都不要使用递归，但是使用了递归也是可以优化的，例如：尾递归，备忘录优化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#时间复杂度O(2^n)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> fib1(n-<span class="number">2</span>)+fib(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#时间复杂度O(n)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        second+=first;</span><br><span class="line">        first=second+first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多个数据规模的情况"><a href="#多个数据规模的情况" class="headerlink" title="多个数据规模的情况"></a>多个数据规模的情况</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>时间复杂度：O(n+k)</p>
<h1 id="算法的优化方向"><a href="#算法的优化方向" class="headerlink" title="算法的优化方向"></a>算法的优化方向</h1><ul>
<li>用尽量少的存储空间</li>
<li>用尽量少的执行时间</li>
<li>空间换时间 OR 时间换空间</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>动态数组</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Web编程学习一：接受请求</title>
    <url>/posts/golang/2020/06/202006212020.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Go开发web服务器：接收请求"><a href="#Go开发web服务器：接收请求" class="headerlink" title="Go开发web服务器：接收请求"></a>Go开发web服务器：接收请求</h1><h2 id="Go的net-http标准库"><a href="#Go的net-http标准库" class="headerlink" title="Go的net/http标准库"></a>Go的net/http标准库</h2><ol>
<li>net/http 标准库的各个组成部分：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/go-net-http.jpg" alt="go-http"></p>
<ol start="2">
<li>Go服务器的处理请求：</li>
</ol>
<p>在启动了一个http服务器之后，就可以就收客户端发过来的请求，进行处理并相应。<code>net/http</code>标准库还提供了一个连接多路复用器的接口以及一个默认实现了的多路复用器。多路复用器根据客户端的请求路径，找到对应的处理器，处理器就会进行一系列的操作。最后把处理结果通过模板引擎在模板上显示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/handle-http.jpg" alt=""></p>
<h2 id="使用net-http标准库搭建一个简单web服务器"><a href="#使用net-http标准库搭建一个简单web服务器" class="headerlink" title="使用net/http标准库搭建一个简单web服务器"></a>使用net/http标准库搭建一个简单web服务器</h2><p>新建一个server.go以下代码。然后运行，在浏览器上访问<a href="http://localhost:8080，浏览器上就会出现一个空白页。至此一个简单地web服务器就这样搭建成功了。对比于Java">http://localhost:8080，浏览器上就会出现一个空白页。至此一个简单地web服务器就这样搭建成功了。对比于Java</a> Web，在搭建的时候还要使用Servlet，然后面向对象，需要写的代码量比Go会多很多。所以说Go比较适合做网络应用。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr:    <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">		Handler: <span class="literal">nil</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	err := server.ListenAndServe()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于<code>http.Server</code>的详细配置</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义Http服务器的运行参数</span></span><br><span class="line"><span class="comment">// 服务器的零值是有效配置</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Addr可以选择以“ host：port”的形式指定服务器侦听的TCP地址。如果为空，则使用“：http”（端口80）</span></span><br><span class="line">	<span class="comment">// 有关地址格式的详细信息，请参见net.Dial</span></span><br><span class="line">	Addr <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用的处理程序，如果为nil，则为http.DefaultServeMux</span></span><br><span class="line">	Handler Handler </span><br><span class="line"></span><br><span class="line">	<span class="comment">// TLSConfig optionally provides a TLS configuration for use</span></span><br><span class="line">	<span class="comment">// by ServeTLS and ListenAndServeTLS. Note that this value is</span></span><br><span class="line">	<span class="comment">// cloned by ServeTLS and ListenAndServeTLS, so it's not</span></span><br><span class="line">	<span class="comment">// possible to modify the configuration with methods like</span></span><br><span class="line">	<span class="comment">// tls.Config.SetSessionTicketKeys. To use</span></span><br><span class="line">	<span class="comment">// SetSessionTicketKeys, use Server.Serve with a TLS Listener</span></span><br><span class="line">	<span class="comment">// instead.</span></span><br><span class="line">	TLSConfig *tls.Config</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ReadTimeout is the maximum duration for reading the entire</span></span><br><span class="line">	<span class="comment">// request, including the body.</span></span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="comment">// Because ReadTimeout does not let Handlers make per-request</span></span><br><span class="line">	<span class="comment">// decisions on each request body's acceptable deadline or</span></span><br><span class="line">	<span class="comment">// upload rate, most users will prefer to use</span></span><br><span class="line">	<span class="comment">// ReadHeaderTimeout. It is valid to use them both.</span></span><br><span class="line">	ReadTimeout time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ReadHeaderTimeout is the amount of time allowed to read</span></span><br><span class="line">	<span class="comment">// request headers. The connection's read deadline is reset</span></span><br><span class="line">	<span class="comment">// after reading the headers and the Handler can decide what</span></span><br><span class="line">	<span class="comment">// is considered too slow for the body. If ReadHeaderTimeout</span></span><br><span class="line">	<span class="comment">// is zero, the value of ReadTimeout is used. If both are</span></span><br><span class="line">	<span class="comment">// zero, there is no timeout.</span></span><br><span class="line">	ReadHeaderTimeout time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// WriteTimeout is the maximum duration before timing out</span></span><br><span class="line">	<span class="comment">// writes of the response. It is reset whenever a new</span></span><br><span class="line">	<span class="comment">// request's header is read. Like ReadTimeout, it does not</span></span><br><span class="line">	<span class="comment">// let Handlers make decisions on a per-request basis.</span></span><br><span class="line">	WriteTimeout time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// IdleTimeout is the maximum amount of time to wait for the</span></span><br><span class="line">	<span class="comment">// next request when keep-alives are enabled. If IdleTimeout</span></span><br><span class="line">	<span class="comment">// is zero, the value of ReadTimeout is used. If both are</span></span><br><span class="line">	<span class="comment">// zero, there is no timeout.</span></span><br><span class="line">	IdleTimeout time.Duration</span><br><span class="line"></span><br><span class="line">	<span class="comment">// MaxHeaderBytes controls the maximum number of bytes the</span></span><br><span class="line">	<span class="comment">// server will read parsing the request header's keys and</span></span><br><span class="line">	<span class="comment">// values, including the request line. It does not limit the</span></span><br><span class="line">	<span class="comment">// size of the request body.</span></span><br><span class="line">	<span class="comment">// If zero, DefaultMaxHeaderBytes is used.</span></span><br><span class="line">	MaxHeaderBytes <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// TLSNextProto optionally specifies a function to take over</span></span><br><span class="line">	<span class="comment">// ownership of the provided TLS connection when an ALPN</span></span><br><span class="line">	<span class="comment">// protocol upgrade has occurred. The map key is the protocol</span></span><br><span class="line">	<span class="comment">// name negotiated. The Handler argument should be used to</span></span><br><span class="line">	<span class="comment">// handle HTTP requests and will initialize the Request's TLS</span></span><br><span class="line">	<span class="comment">// and RemoteAddr if not already set. The connection is</span></span><br><span class="line">	<span class="comment">// automatically closed when the function returns.</span></span><br><span class="line">	<span class="comment">// If TLSNextProto is not nil, HTTP/2 support is not enabled</span></span><br><span class="line">	<span class="comment">// automatically.</span></span><br><span class="line">	TLSNextProto <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(*Server, *tls.Conn, Handler)</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ConnState specifies an optional callback function that is</span></span><br><span class="line">	<span class="comment">// called when a client connection changes state. See the</span></span><br><span class="line">	<span class="comment">// ConnState type and associated constants for details.</span></span><br><span class="line">	ConnState <span class="function"><span class="keyword">func</span><span class="params">(net.Conn, ConnState)</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ErrorLog specifies an optional logger for errors accepting</span></span><br><span class="line">	<span class="comment">// connections, unexpected behavior from handlers, and</span></span><br><span class="line">	<span class="comment">// underlying FileSystem errors.</span></span><br><span class="line">	<span class="comment">// If nil, logging is done via the log package's standard logger.</span></span><br><span class="line">	ErrorLog *log.Logger</span><br><span class="line"></span><br><span class="line">	<span class="comment">// BaseContext optionally specifies a function that returns</span></span><br><span class="line">	<span class="comment">// the base context for incoming requests on this server.</span></span><br><span class="line">	<span class="comment">// The provided Listener is the specific Listener that's</span></span><br><span class="line">	<span class="comment">// about to start accepting requests.</span></span><br><span class="line">	<span class="comment">// If BaseContext is nil, the default is context.Background().</span></span><br><span class="line">	<span class="comment">// If non-nil, it must return a non-nil context.</span></span><br><span class="line">	BaseContext <span class="function"><span class="keyword">func</span><span class="params">(net.Listener)</span> <span class="title">context</span>.<span class="title">Context</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// ConnContext optionally specifies a function that modifies</span></span><br><span class="line">	<span class="comment">// the context used for a new connection c. The provided ctx</span></span><br><span class="line">	<span class="comment">// is derived from the base context and has a ServerContextKey</span></span><br><span class="line">	<span class="comment">// value.</span></span><br><span class="line">	ConnContext <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, c net.Conn)</span> <span class="title">context</span>.<span class="title">Context</span></span></span><br><span class="line"></span><br><span class="line">	disableKeepAlives <span class="keyword">int32</span>     <span class="comment">// accessed atomically.</span></span><br><span class="line">	inShutdown        <span class="keyword">int32</span>     <span class="comment">// accessed atomically (non-zero means we're in Shutdown)</span></span><br><span class="line">	nextProtoOnce     sync.Once <span class="comment">// guards setupHTTP2_* init</span></span><br><span class="line">	nextProtoErr      error     <span class="comment">// result of http2.ConfigureServer if used</span></span><br><span class="line"></span><br><span class="line">	mu         sync.Mutex</span><br><span class="line">	listeners  <span class="keyword">map</span>[*net.Listener]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">	activeConn <span class="keyword">map</span>[*conn]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">	doneChan   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">	onShutdown []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搭建一个提供https服务的服务器</p>
<ol>
<li><p>生成SSL证书和私钥</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"crypto/rand"</span></span><br><span class="line">	<span class="string">"crypto/rsa"</span></span><br><span class="line">	<span class="string">"crypto/x509"</span></span><br><span class="line">	<span class="string">"crypto/x509/pkix"</span></span><br><span class="line">	<span class="string">"encoding/pem"</span></span><br><span class="line">	<span class="string">"math/big"</span></span><br><span class="line">	<span class="string">"net"</span></span><br><span class="line">	<span class="string">"os"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	max := <span class="built_in">new</span>(big.Int).Lsh(big.NewInt(<span class="number">1</span>), <span class="number">128</span>)</span><br><span class="line">	serialNumber, _ := rand.Int(rand.Reader, max)</span><br><span class="line">	subject := pkix.Name&#123;</span><br><span class="line">		Organization:       []<span class="keyword">string</span>&#123;<span class="string">"com.msr"</span>&#125;,</span><br><span class="line">		OrganizationalUnit: []<span class="keyword">string</span>&#123;<span class="string">"better"</span>&#125;,</span><br><span class="line">		CommonName:         <span class="string">"go web"</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	template := x509.Certificate&#123;</span><br><span class="line">		SerialNumber: serialNumber,</span><br><span class="line">		Subject:      subject,</span><br><span class="line">		NotBefore:    time.Now(),</span><br><span class="line">		NotAfter:     time.Now().Add(<span class="number">365</span> * <span class="number">24</span> * time.Hour),</span><br><span class="line">		KeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,</span><br><span class="line">		ExtKeyUsage:  []x509.ExtKeyUsage&#123;x509.ExtKeyUsageServerAuth&#125;,</span><br><span class="line">		IPAddresses:  []net.IP&#123;net.ParseIP(<span class="string">"127.0.0.1"</span>)&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pk, _ := rsa.GenerateKey(rand.Reader, <span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">	derBytes, _ := x509.CreateCertificate(rand.Reader, &amp;template, &amp;template, &amp;pk.PublicKey, pk)</span><br><span class="line">	certOut, _ := os.Create(<span class="string">"cert.pem"</span>)</span><br><span class="line">	pem.Encode(certOut, &amp;pem.Block&#123;Type: <span class="string">"CERTIFICATE"</span>, Bytes: derBytes&#125;)</span><br><span class="line">	certOut.Close()</span><br><span class="line"></span><br><span class="line">	keyOut, _ := os.Create(<span class="string">"key.pem"</span>)</span><br><span class="line">	pem.Encode(keyOut, &amp;pem.Block&#123;Type: <span class="string">"RSA PRIVATE KEY"</span>, Bytes: x509.MarshalPKCS1PrivateKey(pk)&#125;)</span><br><span class="line">	keyOut.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用https，启动运行。访问<a href="https://localhost:8080" target="_blank" rel="noopener">https://localhost:8080</a></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr:    <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span><span class="string">",</span></span><br><span class="line"><span class="string">		Handler: nil,</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	err := server.ListenAndServeTLS("</span>cert.pem<span class="string">", "</span>key.pom<span class="string">")</span></span><br><span class="line"><span class="string">	if err != nil &#123;</span></span><br><span class="line"><span class="string">		fmt.Println(err.Error())</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="处理器和处理函数"><a href="#处理器和处理函数" class="headerlink" title="处理器和处理函数"></a>处理器和处理函数</h2><p><strong>处理器：</strong></p>
<p>Web应用中的处理器除了要接收和处理客户端发来的请求，还需要调用模板引擎，然后由模板引擎生成HTML并把数据填充到要回传到客户端的响应报文中。在<code>net/http</code>库中，一个处理器就是拥有一个ServeHTTP方法，这个方法一个参数是ResponseWriter 接口，而第二个参数则是一个指向Request 结构的指针。换句话说，任何接口只要拥有一个ServeHTTP 方法，并且该方法带有以下签名（signature），那么它就是一个处理器。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ServeHTTP(w ResponseWriter, r *Request)</span><br></pre></td></tr></table></figure>

<h3 id="自定义Handler处理请求"><a href="#自定义Handler处理请求" class="headerlink" title="自定义Handler处理请求"></a>自定义Handler处理请求</h3><p>创建了一个处理器并将它与服务器进行了绑定，以此来代替原本正在使用的默认多路复用器。这意味着服务器不会再通过URL匹配来将请求路由至不同的处理器，而是直接使用同一个处理器来处理所有请求，因此无论浏览器访问什么地址，服务器返回的都是同样的<code>Hello World！</code>响应。很显然这不是常用的方法。</p>
<p>这也是我们在Web应用中使用多路复用器的原因：对某些特殊用途的服务器来说，只使用一个处理器也许就可以很好地完成工作了，但是在大部分情况下，我们还是希望服务器可以根据不同的URL请求返回不同的响应，而不是一成不变地只返回一种响应。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *MyHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	handler := MyHandler&#123;&#125;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr:    <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">		Handler: &amp;handler,</span><br><span class="line">	&#125;</span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用多个Handler来处理不同请求"><a href="#使用多个Handler来处理不同请求" class="headerlink" title="使用多个Handler来处理不同请求"></a>使用多个Handler来处理不同请求</h3><p>不在Server结构的Handler字段中指定处理器，而是让服务器使用默认的<code>DefaultServeMux</code>作为处理器，然后通<code>http.Handle</code> 函数将处理器绑定至<code>DefaultServeMux</code>。需要注意的是，虽然Handle 函数来源于http 包，但它实际上是<code>ServeMux</code> 结构的方法：这些函数是为了操作便利而创建的函数，调用它们等同于调用<code>DefaultServeMux</code> 的某个方法。比如说，调用<code>http.Handle</code>实际上就是在调用<code>DefaultServeMux</code>的Handle 方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WorldHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *HelloHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"hello!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *WorldHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"world!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	hello := HelloHandler&#123;&#125;</span><br><span class="line">	world := WorldHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr: <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	http.Handle(<span class="string">"/hello"</span>, &amp;hello)</span><br><span class="line">	http.Handle(<span class="string">"/world"</span>, &amp;world)</span><br><span class="line"></span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理器函数"><a href="#处理器函数" class="headerlink" title="处理器函数"></a>处理器函数</h3><p>Go语言拥有一种<code>HandlerFunc</code>函数类型，它可以把一个带有正确签名的函数<code>f</code> 转换成一个带有方法<code>f</code>的Handler </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"hello!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">world</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">	w.Write([]<span class="keyword">byte</span>(<span class="string">"hello!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr: <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	http.HandleFunc(<span class="string">"/hello"</span>, hello)</span><br><span class="line">	http.HandleFunc(<span class="string">"/world"</span>, world)</span><br><span class="line"></span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Handle 函数将一个处理器绑定至URL的具体方法。<code>HandleFun</code>函数会将函数转换成一个Handler ，并将它与<code>DefaultServeMux</code>进行绑定，以此来简化创建并绑定Handler 的工作。换句话说，处理器函数只不过是创建处理器的一种便利的方法而已。</p>
<h3 id="串联多个处理器和处理函数"><a href="#串联多个处理器和处理函数" class="headerlink" title="串联多个处理器和处理函数"></a>串联多个处理器和处理函数</h3><p>Go语言并不是一门函数式编程语言，但它也拥有一些函数式编程语言的特性，如函数类型、匿名函数和闭包。正如前面的代码所示，在Go语言里面，程序可以将一个函数传递给另一个函数，又或者通过标识符去引用一个具名函数。这意味着，可以将函数<code>f1</code>传递给另一个函数<code>f2</code>，然后在函数<code>f2</code>执行完某些操作之后调用<code>f1</code> 。例如：在每个处理器被调用时，都都记录一下调用日志</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/chain-func.jpg" alt=""></p>
<p>代码示例：</p>
<p>log函数返回的是一个匿名的HandlerFunc函数。因为hello 函数就是一个HandlerFunc 类型的函数，所以代码log(hello) 实际上就是将hello 函数发送至log 函数之内，换句话说，这段代码串联起了log函数和hello 函数。protect函数也是如此。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h HelloHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">log</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		fmt.Fprintf(w,<span class="string">"Handler called - %T\n"</span>, h)</span><br><span class="line">		h.ServeHTTP(w, r)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">protect</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">		<span class="comment">// 假设有一系列操作....</span></span><br><span class="line">		fmt.Fprintf(w,<span class="string">"Handler called - %T\n"</span>, h)</span><br><span class="line">		h.ServeHTTP(w, r)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr: <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	hello := HelloHandler&#123;&#125;</span><br><span class="line">	http.Handle(<span class="string">"/hello"</span>, protect(log(hello)))</span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ServeMux和DefaultServeMux"><a href="#ServeMux和DefaultServeMux" class="headerlink" title="ServeMux和DefaultServeMux"></a>ServeMux和DefaultServeMux</h3><p>ServeMux是一个HTTP请求多路复用器，它负责接收HTTP请求并根据请求中的URL将请求重定向到正确的处理器</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/ServeMux.png" alt=""></p>
<p>ServeMux结构包含一个映射，这个映射会将URL映射到相应的处理器。ServeMux也实现了ServeHTTP方法，所以也是一个处理器。当ServeHTTP方法接收到一个请求的时候，它会在结构的映射里面找出与请求URL最匹配的URL，然后调用对应的处理器的ServeHTTP方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/ServeMux2.jpg" alt=""></p>
<p>ServeMux是一个结构体并不是一个接口，所以DefaultServeMux并不是ServeMux的实现。DefaultServeMux是ServeMux的实例。并且所有引入了net/http 标准库的程序都可以使用这个实例。当用户没有为Server结构指定处理器时，服务器就会使用DefaultServeMux作为ServeMux的默认实例。</p>
<p>因为ServeMux也是一个处理器 ，所以用户也可以在有需要的情况下对其实例实施处理器串联。</p>
<p>如果绑定根URL（/ ），那么匹配不成功的URL将会根据URL的层级进行下降，并最终降落在根URL之上。当浏览器访问<code>/random</code>的时候，因为服务器无法找到负责处理这个URL的处理器，所以它会把这个URL交给根URL的处理器处理。例如<code>/hello</code>绑定了处理器，当访问<code>/hello/mike</code>的时候，由于<code>/hello/mike</code>没有绑定处理器，就会降级给<code>/hello</code>的处理器去处理。</p>
<p><strong>最小惊讶原则:</strong></p>
<p>也称最小意外原则，是设计包括软件在内的一切事物的一条通用规则，它指的是我们在<br>进行设计的时候，应该做那些合乎常理的事情，使事物的行为总是显而易见、始终如一并且合乎情理。</p>
<h3 id="使用其他多路复用器（HttpRouter）"><a href="#使用其他多路复用器（HttpRouter）" class="headerlink" title="使用其他多路复用器（HttpRouter）"></a>使用其他多路复用器（HttpRouter）</h3><p>创建一个处理器和多路复用器唯一需要做的就是实现ServeHTTP方法，所以通过创建多路复用器来代替<code>net/http</code>包下的ServeMux是完全可行。</p>
<p>ServeMux 的一个缺陷是无法使用变量实现URL模式匹配。例如：<code>/user/123</code>查询id为123的用户，对于Go原生的ServeMux对URL进行语法分析提取<code>123</code>会比较麻烦，就必须在程序里面进行大量复杂的语法分析，并因此给程序带来额外的复杂度。</p>
<p>HttpRouter文档：<a href="https://github.com/julienschmidt/httprouter。" target="_blank" rel="noopener">https://github.com/julienschmidt/httprouter。</a></p>
<p>简单示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"github.com/julienschmidt/httprouter"</span></span><br><span class="line">	<span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request, p httprouter.Params)</span></span> &#123;</span><br><span class="line">	fmt.Fprintf(w, <span class="string">"hello, %s!\n"</span>, p.ByName(<span class="string">"name"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	mux := httprouter.New()</span><br><span class="line">	mux.GET(<span class="string">"/hello/:name"</span>, hello)</span><br><span class="line"></span><br><span class="line">	server := http.Server&#123;</span><br><span class="line">		Addr:    <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">		Handler: mux,</span><br><span class="line">	&#125;</span><br><span class="line">	server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于这些路由比配和变量获取很多的Web框架都有实现。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>GoWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx实践：rewrite规则</title>
    <url>/posts/nginx/2020/06/202006211318.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Rewrite规则"><a href="#Rewrite规则" class="headerlink" title="Rewrite规则"></a>Rewrite规则</h1><p>作用：rewrite规则可以实现对url的重写和重定向</p>
<p>主要应用场景：</p>
<ul>
<li>URL访问跳转，支持开发设计，如页面跳转，兼容性支持，展示效果</li>
<li>SEO优化</li>
<li>维护：后台维护、流量转发</li>
<li>安全</li>
</ul>
<h2 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h2><p>配置： rewrite regex replacement [flag];</p>
<p>作用域：server、location、if</p>
<p>参数：</p>
<p>last 停止rewrite检测【如果没有匹配到，会继续向下匹配】</p>
<p>break 停止rewrite检测【如果没有匹配到，则不再向下匹配，直接返回结果404】</p>
<p>redirect 返回302临时重定向，地址栏会显示跳转后的地址</p>
<p>permanent 返回301永久重定向，地址栏会显示跳转后的地址</p>
<h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;log&#x2F;host.access.log  main;</span><br><span class="line">     </span><br><span class="line">    root &#x2F;opt&#x2F;app&#x2F;code; </span><br><span class="line">    location ~ ^&#x2F;break &#123;</span><br><span class="line">        rewrite ^&#x2F;break &#x2F;test&#x2F; break;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    location ~ ^&#x2F;last &#123;</span><br><span class="line">         rewrite ^&#x2F;last &#x2F;test&#x2F; last;</span><br><span class="line">         #rewrite ^&#x2F;last &#x2F;test&#x2F; redirect;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;site &#123;</span><br><span class="line">         rewrite ^&#x2F;main http:&#x2F;&#x2F;www.baidu.com&#x2F; permanent;</span><br><span class="line">         #rewrite ^&#x2F;main http:&#x2F;&#x2F;www.baidu.com&#x2F; redirect;</span><br><span class="line">    &#125;    </span><br><span class="line"> </span><br><span class="line">    location &#x2F;test&#x2F; &#123;</span><br><span class="line">       default_type application&#x2F;json;</span><br><span class="line">       return 200 &#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redirect 表示临时的重定向 ，只要后端服务是开者的。每次访问 /site都会重定向到后面的url</p>
<p>permanent 表示永久重定向，第一次访问成功后，把后端服务关闭后，访问/site仍然会重定向到后面的url</p>
<p><strong>rewrite优先级规则</strong></p>
<ul>
<li>执行server 块的rewrite 指令。将所有的网站都重定向同一个网站。</li>
<li>执行location匹配。</li>
<li>执行选定的location中的rewrite。</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习二十一：select和GC</title>
    <url>/posts/golang/2020/06/202006201149.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="select简介"><a href="#select简介" class="headerlink" title="select简介"></a>select简介</h1><ul>
<li>Golang中select和switch结构特别像,但是select中case的条件只能是I/O</li>
<li>select 的语法(condition是条件)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">  <span class="keyword">case</span> condition:</span><br><span class="line">  <span class="keyword">case</span> condition:</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>select执行过程:<ul>
<li>每个case必须是一个IO操作</li>
<li>哪个case可以执行就执行哪个</li>
<li>多个case都可以执行,随机执行一个</li>
<li>所有case都不能执行时,执行default</li>
<li>所有case都不能执行,且没有default,将会阻塞</li>
</ul>
</li>
<li>代码示例<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line">   ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">   ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">   ch1 &lt;- <span class="number">1</span></span><br><span class="line">   ch2 &lt;- <span class="string">"hello"</span></span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> value := &lt;-ch1:</span><br><span class="line">      fmt.Println(value)</span><br><span class="line">   <span class="keyword">case</span> value := &lt;-ch2:</span><br><span class="line">      fmt.Println(value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>select多和for循环结合使用,下面例子演示出了一直在接收消息的例子<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">			ch &lt;- arg</span><br><span class="line">		&#125;(i)</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">//如果是一直接受消息,应该是死循环for&#123;&#125;,下面代码中是明确知道消息个数</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> c := &lt;-ch:</span><br><span class="line">			fmt.Println(<span class="string">"取出数据"</span>, c)</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="comment">//没有default会出现死锁</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>break可以对select生效,如果for中嵌套select,break选择最近结构</li>
</ul>
<h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><ul>
<li>GC英文全称 garbage collector</li>
<li>Go语言GC是相对C/C++语言非常重要的改进</li>
<li>一些常用GC算法<ul>
<li>引用计算法.当对象被引用时计算器加一.不被引用计数器减一<ul>
<li>PHP和Object-C使用</li>
<li>相互引用无法回收</li>
<li>计数增加消耗</li>
</ul>
</li>
<li>Mark And Sweep 标记和清除算法.停止程序运行,递归遍历对象,进行标记.标记完成后将所有没有引用的对象进行清除<ul>
<li>由于标记需要停止程序(Stop the world),当对象特别多时,标记和清除过程比较耗时(可能几百毫秒),很难接受</li>
</ul>
</li>
<li>三色标记法:是Mark And Sweep的改进版.从逻辑上分为白色区(未搜索),灰色区(正搜索),黑色区(已搜索).灰色区内容是子引用没有进行搜索,黑色区表示子引用存在</li>
<li>分代收集.一般情况都有三代,例如java中新生代,老年代,永久代.当新生代中带有阈值时会把对象放入到老年代,相同道理老年代内容达到阈值会放入到永久代</li>
</ul>
</li>
</ul>
<h1 id="Go语言中的GC"><a href="#Go语言中的GC" class="headerlink" title="Go语言中的GC"></a>Go语言中的GC</h1><ul>
<li>Go语言中采用Stop The World方式</li>
<li>Golang每个版本基本上都会对GC进行优化,从Golang1.5开始支持并发(concurrent )收集,从1.8版本已经把STW时间优化到了100微妙,通常只需要10微妙以下.且在1.10版本时再次优化减少GC对CPU占用</li>
<li>Go语言中GC是自动运行的,在下列情况下会触发GC<ul>
<li>当需要申请内存时,发现GC是上次GC两倍时会触发</li>
<li>每2分钟自动运行一次GC</li>
</ul>
</li>
<li>GC调优<ul>
<li>小对象复用,局部变量尽量少声明,多个小对象可以放入到结构体,方便GC扫描</li>
<li>少用string的”+”</li>
</ul>
</li>
<li>在runtime包下mgc.go中明确的说明了Golang的GC的解释<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Garbage collector (GC).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The GC runs concurrently with mutator threads, is type accurate (aka precise), allows multiple</span></span><br><span class="line"><span class="comment">// GC thread to run in parallel. It is a concurrent mark and sweep that uses a write barrier. It is</span></span><br><span class="line"><span class="comment">// non-generational and non-compacting. Allocation is done using size segregated per P allocation</span></span><br><span class="line"><span class="comment">// areas to minimize fragmentation while eliminating locks in the common case.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The algorithm decomposes into several steps.</span></span><br><span class="line"><span class="comment">// This is a high level description of the algorithm being used. For an overview of GC a good</span></span><br><span class="line"><span class="comment">// place to start is Richard Jones' gchandbook.org.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The algorithm's intellectual heritage includes Dijkstra's on-the-fly algorithm, see</span></span><br><span class="line"><span class="comment">// Edsger W. Dijkstra, Leslie Lamport, A. J. Martin, C. S. Scholten, and E. F. M. Steffens. 1978.</span></span><br><span class="line"><span class="comment">// On-the-fly garbage collection: an exercise in cooperation. Commun. ACM 21, 11 (November 1978),</span></span><br><span class="line"><span class="comment">// 966-975.</span></span><br><span class="line"><span class="comment">// For journal quality proofs that these steps are complete, correct, and terminate see</span></span><br><span class="line"><span class="comment">// Hudson, R., and Moss, J.E.B. Copying Garbage Collection without stopping the world.</span></span><br><span class="line"><span class="comment">// Concurrency and Computation: Practice and Experience 15(3-5), 2003.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. GC performs sweep termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Stop the world. This causes all Ps to reach a GC safe-point.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Sweep any unswept spans. There will only be unswept spans if</span></span><br><span class="line"><span class="comment">//    this GC cycle was forced before the expected time.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 2. GC performs the "mark 1" sub-phase. In this sub-phase, Ps are</span></span><br><span class="line"><span class="comment">// allowed to locally cache parts of the work queue.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Prepare for the mark phase by setting gcphase to _GCmark</span></span><br><span class="line"><span class="comment">//    (from _GCoff), enabling the write barrier, enabling mutator</span></span><br><span class="line"><span class="comment">//    assists, and enqueueing root mark jobs. No objects may be</span></span><br><span class="line"><span class="comment">//    scanned until all Ps have enabled the write barrier, which is</span></span><br><span class="line"><span class="comment">//    accomplished using STW.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Start the world. From this point, GC work is done by mark</span></span><br><span class="line"><span class="comment">//    workers started by the scheduler and by assists performed as</span></span><br><span class="line"><span class="comment">//    part of allocation. The write barrier shades both the</span></span><br><span class="line"><span class="comment">//    overwritten pointer and the new pointer value for any pointer</span></span><br><span class="line"><span class="comment">//    writes (see mbarrier.go for details). Newly allocated objects</span></span><br><span class="line"><span class="comment">//    are immediately marked black.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. GC performs root marking jobs. This includes scanning all</span></span><br><span class="line"><span class="comment">//    stacks, shading all globals, and shading any heap pointers in</span></span><br><span class="line"><span class="comment">//    off-heap runtime data structures. Scanning a stack stops a</span></span><br><span class="line"><span class="comment">//    goroutine, shades any pointers found on its stack, and then</span></span><br><span class="line"><span class="comment">//    resumes the goroutine.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    d. GC drains the work queue of grey objects, scanning each grey</span></span><br><span class="line"><span class="comment">//    object to black and shading all pointers found in the object</span></span><br><span class="line"><span class="comment">//    (which in turn may add those pointers to the work queue).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 3. Once the global work queue is empty (but local work queue caches</span></span><br><span class="line"><span class="comment">// may still contain work), GC performs the "mark 2" sub-phase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. GC stops all workers, disables local work queue caches,</span></span><br><span class="line"><span class="comment">//    flushes each P's local work queue cache to the global work queue</span></span><br><span class="line"><span class="comment">//    cache, and reenables workers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. GC again drains the work queue, as in 2d above.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 4. Once the work queue is empty, GC performs mark termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Stop the world.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Set gcphase to _GCmarktermination, and disable workers and</span></span><br><span class="line"><span class="comment">//    assists.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. Drain any remaining work from the work queue (typically there</span></span><br><span class="line"><span class="comment">//    will be none).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    d. Perform other housekeeping like flushing mcaches.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 5. GC performs the sweep phase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Prepare for the sweep phase by setting gcphase to _GCoff,</span></span><br><span class="line"><span class="comment">//    setting up sweep state and disabling the write barrier.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Start the world. From this point on, newly allocated objects</span></span><br><span class="line"><span class="comment">//    are white, and allocating sweeps spans before use if necessary.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. GC does concurrent sweeping in the background and in response</span></span><br><span class="line"><span class="comment">//    to allocation. See description below.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 6. When sufficient allocation has taken place, replay the sequence</span></span><br><span class="line"><span class="comment">// starting with 1 above. See discussion of GC rate below.</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习二十：golang并发编程入门</title>
    <url>/posts/golang/2020/06/202006201134.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><ul>
<li>Go语言中main()函数为主线程(协程),程序是从上向下执行的</li>
<li>可以通过time包下的Sleep(n)让程序阻塞多少纳秒<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">"1"</span>)</span><br><span class="line"><span class="comment">//单位是纳秒,表示阻塞多长时间</span></span><br><span class="line"><span class="comment">//e9表示10的9次方</span></span><br><span class="line">time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">fmt.Println(<span class="string">"2"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h1><ul>
<li>延迟指定时间后执行一次,但是需要注意在触发时程序没有结束<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line"> <span class="comment">//2秒后执行匿名函数</span></span><br><span class="line"> time.AfterFunc(<span class="number">2e9</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"延迟延迟触发"</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> time.Sleep(<span class="number">10e9</span>)<span class="comment">//一定要休眠,否则程序结束了</span></span><br><span class="line"> fmt.Println(<span class="string">"结束"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="goroutine简介"><a href="#goroutine简介" class="headerlink" title="goroutine简介"></a>goroutine简介</h1><ul>
<li><p>Golang中最迷人的一个优点就是从语言层面就支持并发</p>
</li>
<li><p>在Golang中的goroutine(协程)类似于其他语言的线程</p>
</li>
<li><p>并发和并行</p>
<ul>
<li>并行(parallelism)指不同的代码片段同时在不同的物理处理器上支持</li>
<li>并发(concurrency)指同时管理多个事情,物理处理器上可能运行某个内容一半后就处理其他事情</li>
<li>在一般看来并发的性能要好于并行.因为计算机的物理资源是固定的,较少的,而程序需要执行的内容是很多的.所以并发是”以较少的资源去去做更多事情”</li>
</ul>
</li>
<li><p>几种主流并发模型</p>
<ul>
<li>多线程,每个线程只处理一个请求,只有请求结束后,对应的线程才会接收下一个请求.这种模式在高并发下,性能开销极大.</li>
<li>基于回调的异步IO.在程序运行过程中可能产生大量回调导致维护成本加大,程序执行流程也不便于思维</li>
<li>协程.不需要抢占式调用,可以有效提升线程任务的并发性,弥补了多线程模式的缺点;Golang在语言层面就支持,而其他语言很少支持</li>
</ul>
</li>
<li><p>goroutine的语法</p>
<ul>
<li>表达式可以是一条语句</li>
<li>表达式也可以是函数,函数返回值即使有,也无效,当函数执行完成此goroutine自动结束<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> 表达式</span><br></pre></td></tr></table></figure>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2></li>
</ul>
</li>
<li><p>对比多次调用函数和使用goroutine的效果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//正常调用,输出3遍1 2 3 4 5(每个数字后换行)</span></span><br><span class="line">   <span class="comment">//for i:=1; i&lt;=3; i++ &#123;</span></span><br><span class="line">   <span class="comment">// go demo()</span></span><br><span class="line">   <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   添加go关键字后发现控制台什么也没有输出</span></span><br><span class="line"><span class="comment">   原因:把demo()设置到协程后没等到函数执行,主</span></span><br><span class="line"><span class="comment">   线程执行结束</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> demo(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"第%d次执行,i的值为:%d\n"</span>, index, i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加休眠等待goroutine执行结束</p>
</li>
<li><p>这种方式很大的问题就是休眠时间,如果休眠时间设置过小,可能goroutine并没有执行完成,如果休眠时间设置过大,影响程序执行执行.找到的本次执行的休眠时间,下次程序执行时这个休眠时间可能”过大”或”过小”</p>
</li>
<li><p>通过程序运行结果发现每次执行结果都不一定是一样的,因为每个demo()都是并发执行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//正常调用,输出3遍1 2 3 4 5(每个数字后换行)</span></span><br><span class="line">   <span class="comment">//for i:=1; i&lt;=3; i++ &#123;</span></span><br><span class="line">   <span class="comment">// go demo()</span></span><br><span class="line">   <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   添加go关键字后发现控制台什么也没有输出</span></span><br><span class="line"><span class="comment">   原因:把demo()设置到协程后没等到函数执行,主</span></span><br><span class="line"><span class="comment">   线程执行结束</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> demo(i)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   添加休眠,让主线程等待协程执行结束.</span></span><br><span class="line"><span class="comment">   具体休眠时间需要根据计算机性能去估计</span></span><br><span class="line"><span class="comment">   次数没有固定值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   time.Sleep(<span class="number">3e9</span>)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"第%d次执行,i的值为:%d\n"</span>, index, i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="WaitGroup简介"><a href="#WaitGroup简介" class="headerlink" title="WaitGroup简介"></a>WaitGroup简介</h1><ul>
<li>Golang中sync包提供了基本同步基元,如互斥锁等.除了Once和WaitGroup类型,    大部分都只适用于低水平程序线程,高水平同步线程使用channel通信更好一些</li>
<li>WaitGroup直译为等待组,其实就是计数器,只要计数器中有内容将一直阻塞</li>
<li>在Golang中WaitGroup存在于sync包中,在sync包中类型都是不应该被拷贝的.源码定义如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A WaitGroup waits for a collection of goroutines to finish.</span></span><br><span class="line"><span class="comment">// The main goroutine calls Add to set the number of</span></span><br><span class="line"><span class="comment">// goroutines to wait for. Then each of the goroutines</span></span><br><span class="line"><span class="comment">// runs and calls Done when finished. At the same time,</span></span><br><span class="line"><span class="comment">// Wait can be used to block until all goroutines have finished.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A WaitGroup must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> WaitGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">	noCopy noCopy</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 64-bit value: high 32 bits are counter, low 32 bits are waiter count.</span></span><br><span class="line">	<span class="comment">// 64-bit atomic operations require 64-bit alignment, but 32-bit</span></span><br><span class="line">	<span class="comment">// compilers do not ensure it. So we allocate 12 bytes and then use</span></span><br><span class="line">	<span class="comment">// the aligned 8 bytes in them as state.</span></span><br><span class="line">	state1 [<span class="number">12</span>]<span class="keyword">byte</span></span><br><span class="line">	sema   <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Go语言标准库中WaitGroup只有三个方法<ul>
<li>Add(delta int)表示向内部计数器添加增量(delta),其中参数delta可以是负数</li>
<li>Done()表示减少WaitGroup计数器的值,应当在程序最后执行.相当于Add(-1)</li>
<li>Wait()表示阻塞直到WaitGroup计数器为0<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> WaitGroup</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span> <span class="title">Add</span><span class="params">(delta <span class="keyword">int</span>)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span> <span class="title">Done</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span> <span class="title">Wait</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>使用WaitGroup可以有效解决goroutine未执行完成主协程执行完成,导致程序结束,goroutine未执行问题<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">      wg.Add(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">go</span> demo(i)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//阻塞,知道WaitGroup队列中所有任务执行结束时自动解除阻塞</span></span><br><span class="line">   fmt.Println(<span class="string">"开始阻塞"</span>)</span><br><span class="line">   wg.Wait()</span><br><span class="line">   fmt.Println(<span class="string">"任务执行结束,解除阻塞"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"第%d次执行,i的值为:%d\n"</span>, index, i)</span><br><span class="line">   &#125;</span><br><span class="line">   wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><ul>
<li>Go语言中多个协程操作一个变量时会出现冲突的问题</li>
<li>go run -race 可以查看竞争</li>
<li>可以使用<code>sync.Mutex</code>对内容加锁</li>
<li>互斥锁的使用场景<ul>
<li>多个goroutine访问同一个函数(代码段)</li>
<li>这个函数操作一个全局变量</li>
<li>为了保证共享变量安全性,值合法性</li>
</ul>
</li>
<li>使用互斥锁模拟售票窗口<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"sync"</span></span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">   <span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   <span class="comment">//票数</span></span><br><span class="line">   num = <span class="number">100</span></span><br><span class="line">   wg  sync.WaitGroup</span><br><span class="line">   <span class="comment">//互斥锁</span></span><br><span class="line">   mu sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sellTicker</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> wg.Done()</span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="comment">//加锁,多个goroutine互斥</span></span><br><span class="line">      mu.Lock()</span><br><span class="line">      <span class="keyword">if</span> num &gt;= <span class="number">1</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">"第"</span>, i, <span class="string">"个窗口卖了"</span>, num)</span><br><span class="line">         num = num - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//解锁</span></span><br><span class="line">      mu.Unlock()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> num &lt;= <span class="number">0</span> &#123;</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//添加休眠,防止结果可能出现在一个goroutine中</span></span><br><span class="line">      time.Sleep(time.Duration(rand.Int63n(<span class="number">1000</span>) * <span class="number">1e6</span>))</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//设置随机数种子</span></span><br><span class="line">   rand.Seed(time.Now().UnixNano())</span><br><span class="line">   <span class="comment">//计算器的起始值和票数相同</span></span><br><span class="line">   wg.Add(<span class="number">4</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">4</span>)</span><br><span class="line">   wg.Wait()</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"所有票卖完"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="RWMutex读写锁"><a href="#RWMutex读写锁" class="headerlink" title="RWMutex读写锁"></a>RWMutex读写锁</h1><ul>
<li>RWMutex 源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// There is a modified copy of this file in runtime/rwmutex.go.</span></span><br><span class="line"><span class="comment">// If you make any changes here, see if you should make them there.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A RWMutex is a reader/writer mutual exclusion lock.</span></span><br><span class="line"><span class="comment">// The lock can be held by an arbitrary number of readers or a single writer.</span></span><br><span class="line"><span class="comment">// The zero value for a RWMutex is an unlocked mutex.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A RWMutex must not be copied after first use.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a goroutine holds a RWMutex for reading and another goroutine might</span></span><br><span class="line"><span class="comment">// call Lock, no goroutine should expect to be able to acquire a read lock</span></span><br><span class="line"><span class="comment">// until the initial read lock is released. In particular, this prohibits</span></span><br><span class="line"><span class="comment">// recursive read locking. This is to ensure that the lock eventually becomes</span></span><br><span class="line"><span class="comment">// available; a blocked Lock call excludes new readers from acquiring the</span></span><br><span class="line"><span class="comment">// lock.</span></span><br><span class="line"><span class="keyword">type</span> RWMutex <span class="keyword">struct</span> &#123;</span><br><span class="line">	w           Mutex  <span class="comment">// held if there are pending writers</span></span><br><span class="line">	writerSem   <span class="keyword">uint32</span> <span class="comment">// semaphore for writers to wait for completing readers</span></span><br><span class="line">	readerSem   <span class="keyword">uint32</span> <span class="comment">// semaphore for readers to wait for completing writers</span></span><br><span class="line">	readerCount <span class="keyword">int32</span>  <span class="comment">// number of pending readers</span></span><br><span class="line">	readerWait  <span class="keyword">int32</span>  <span class="comment">// number of departing readers</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Go语言标准库中API如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> RWMutex</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span><span class="params">()</span>//禁止其他协程读写</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span><span class="params">()</span>//禁止其他协程写入,只能读取</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLocker</span><span class="params">()</span> <span class="title">Locker</span></span></span><br></pre></td></tr></table></figure></li>
<li>Go语言中的map不是线程安全的,多个goroutine同时操作会出现错误.</li>
<li>RWMutex可以添加多个读锁或一个写锁.读写锁不能同时存在.<ul>
<li>map在并发下读写就需要结合读写锁完成</li>
<li>互斥锁表示锁的代码同一时间只能有一个人goroutine运行,而读写锁表示在锁范围内数据的读写操作<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"sync"</span></span><br><span class="line">   <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> rwm sync.RWMutex</span><br><span class="line">   m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">   <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">   wg.Add(<span class="number">10</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">         <span class="comment">//没有锁在map时可能出现问题</span></span><br><span class="line">         rwm.Lock()</span><br><span class="line">         m[<span class="string">"key"</span>+strconv.Itoa(j)] = <span class="string">"value"</span> + strconv.Itoa(j)</span><br><span class="line">         fmt.Println(m)</span><br><span class="line">         rwm.Unlock()</span><br><span class="line">         wg.Done()</span><br><span class="line">      &#125;(i)</span><br><span class="line">   &#125;</span><br><span class="line">   wg.Wait()</span><br><span class="line">   fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><ul>
<li>线程通信在每个编程语言中都是重难点,在Golang中提供了语言级别的goroutine之间通信:channel</li>
<li>channel不同的翻译资料叫法不一样.常见的几种叫法<ul>
<li>管道</li>
<li>信道</li>
<li>通道</li>
</ul>
</li>
<li>channel是进程内通信方式,每个channel只能传递一个类型的值.这个类型需要在声明channel时指定</li>
<li>channel在Golang中主要的两个作用<ul>
<li>同步</li>
<li>通信</li>
</ul>
</li>
<li>Go语言中channel的关键字是chan</li>
<li>声明channel的语法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 名称 <span class="keyword">chan</span> 类型</span><br><span class="line"><span class="keyword">var</span> 名称 <span class="keyword">chan</span> &lt;- 类型 <span class="comment">//只写</span></span><br><span class="line"><span class="keyword">var</span> 名称 &lt;- <span class="keyword">chan</span> 类型<span class="comment">//只读</span></span><br><span class="line">名称:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">//无缓存channel</span></span><br><span class="line">名称:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">0</span>)<span class="comment">//无缓存channel</span></span><br><span class="line">名称:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">100</span>)<span class="comment">//有缓存channel</span></span><br></pre></td></tr></table></figure></li>
<li>操作channel的语法:(假设定义一个channel名称为ch)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ch &lt;- 值 <span class="comment">//向ch中添加一个值</span></span><br><span class="line">&lt;- ch <span class="comment">//从ch中取出一个值</span></span><br><span class="line">a:=&lt;-ch <span class="comment">//从ch中取出一个值并赋值给a</span></span><br><span class="line">a,b:=&lt;-ch<span class="comment">//从ch中取出一个值赋值给a,如果ch已经关闭或ch中没有值,b为false</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>简单无缓存通道代码示例<ul>
<li>此代码中如果没有从channel中取值c,d=&lt;-ch语句,程序结束时go func并没有执行</li>
<li>下面代码示例演示了同步操作,类似与WaitGroup功能,保证程序结束时goroutine已经执行完成</li>
<li>向goroutine中添加内容的代码会阻塞goroutine执行,所以要把ch&lt;-1放入到goroutine有效代码最后一行</li>
<li>无论是向channel存数据还是取数据都会阻塞</li>
<li>close(channel)关闭channel,关闭后只读不可写<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"进入goroutine"</span>)</span><br><span class="line">      <span class="comment">// 添加一个内容后控制台输出:1 true</span></span><br><span class="line">      <span class="comment">//ch&lt;-1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//关闭ch控制台输出:0 false</span></span><br><span class="line">      <span class="built_in">close</span>(ch)</span><br><span class="line">   &#125;()</span><br><span class="line">   c, d := &lt;-ch </span><br><span class="line">   fmt.Println(c, d)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>使用channel实现goroutine之间通信<ul>
<li>channel其实就是消息通信机制实现方案,在Golang中没有使用共享内存完成线程通信,而是使用channel实现goroutine之间通信.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//用于goroutine之间传递数据</span></span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">   <span class="comment">//用于控制程序执行</span></span><br><span class="line">   ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"执行第一个goroutine,等待第二个goroutine传递数据"</span>)</span><br><span class="line">      content := &lt;-ch</span><br><span class="line">      fmt.Println(<span class="string">"接收到的数据为:"</span>, content)</span><br><span class="line">      ch2 &lt;- <span class="string">"第一个"</span></span><br><span class="line">   &#125;()</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"进入到第二个,开始传递数据"</span>)</span><br><span class="line">      ch &lt;- <span class="string">"内容随意"</span></span><br><span class="line">      <span class="built_in">close</span>(ch)</span><br><span class="line">      fmt.Println(<span class="string">"发送数据完成"</span>)</span><br><span class="line">      ch2 &lt;- <span class="string">"第二个"</span></span><br><span class="line">   &#125;()</span><br><span class="line">   result1 := &lt;-ch2</span><br><span class="line">   fmt.Println(result1, <span class="string">"执行完成"</span>)</span><br><span class="line">   result2 := &lt;-ch2</span><br><span class="line">   fmt.Println(result2, <span class="string">"执行完成"</span>)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>可以使用for range获取channel中内容<ul>
<li>不需要确定channel中数据个数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">   ch2:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">97</span>;i&lt;<span class="number">97</span>+<span class="number">26</span>;i++&#123;</span><br><span class="line">         ch &lt;- strconv.Itoa(i)</span><br><span class="line">      &#125;</span><br><span class="line">      ch2&lt;<span class="number">-1</span></span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> c := <span class="keyword">range</span> ch&#123;</span><br><span class="line">         fmt.Println(<span class="string">"取出来的"</span>,c)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line">   &lt;-ch2</span><br><span class="line">   fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>channel是安全的.多个goroutine同时操作时,同一时间只能有一个goroutine存取数据<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">         fmt.Println(j, <span class="string">"开始"</span>)</span><br><span class="line">         ch &lt;- j</span><br><span class="line">         fmt.Println(j, <span class="string">"结束"</span>)</span><br><span class="line">      &#125;(i)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">      time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">      &lt;-ch</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul>
<li>在主goroutine中向无缓存channel添加内容或在主goroutine中向channel添加内容且添加内容的个数已经大于channel缓存个数就会产生死锁<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal error : all goroutines are asleep -deadlock!</span><br></pre></td></tr></table></figure></li>
<li>死锁:在程序中多个进程(Golang中goroutine)由于相互竞争资源而产生的阻塞(等待)状态,而这种状态一直保持下去,此时称这个线程是死锁状态</li>
<li>在Golang中使用无缓存channel时一定要注意.以下是一个最简单的死锁程序<ul>
<li>主协程中有ch&lt;-1,无缓存channel无论添加还是取出数据都会阻塞goroutine,当前程序无其他代码,主goroutine会一直被阻塞下去,此时主goroutine就是死锁状态<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>而下面代码就不会产生死锁<ul>
<li>通过代码示例可以看出,在使用无缓存channel时,特别要注意的是在主协程中有操作channel代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      ch &lt;- <span class="number">1</span></span><br><span class="line">      fmt.Println(<span class="string">"执行goroutine"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   time.Sleep(<span class="number">5e9</span>)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h1 id="有缓存通道"><a href="#有缓存通道" class="headerlink" title="有缓存通道"></a>有缓存通道</h1><ul>
<li>创建一个有缓存通道<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//缓存大小3,里面消息个数小于等于3时都不会阻塞goroutine</span></span><br><span class="line">   ch &lt;- <span class="number">1</span></span><br><span class="line">   ch &lt;- <span class="number">2</span></span><br><span class="line">   ch &lt;- <span class="number">3</span></span><br><span class="line">   ch &lt;- <span class="number">4</span> <span class="comment">//此行出现死锁,超过缓存大小数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在Golang中有缓存channel的缓存大小是不能改变的,但是只要不超过缓存数量大小,都不会出现阻塞状态<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//缓存大小3,里面消息个数小于等于3时都不会阻塞goroutine</span></span><br><span class="line">   ch &lt;- <span class="number">1</span></span><br><span class="line">   fmt.Println(&lt;-ch)</span><br><span class="line">   ch &lt;- <span class="number">2</span></span><br><span class="line">   fmt.Println(&lt;-ch)</span><br><span class="line">   ch &lt;- <span class="number">3</span></span><br><span class="line">   ch &lt;- <span class="number">4</span></span><br><span class="line">   fmt.Println(<span class="built_in">len</span>(ch))<span class="comment">//输出2,表示channel中有两个消息</span></span><br><span class="line">   fmt.Println(<span class="built_in">cap</span>(ch))<span class="comment">//输出3,表示缓存大小总量为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十九：日志</title>
    <url>/posts/golang/2020/06/202006201131.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="日志简介"><a href="#日志简介" class="headerlink" title="日志简介"></a>日志简介</h1><ul>
<li>使用开发工具时,控制台打印的信息就是日志信息</li>
<li>项目最终发布后是没有开发工具的,而需要记录日志应该把信息输出到文件中,这个功能也是日志的功能</li>
<li>在Go语言标准的log包提供了对日志的支持</li>
<li>有三种级别日志输出<ul>
<li>Print() 输出日志信息</li>
<li>Panic()  打印日志信息,并触发panic,日志信息为Panic信息</li>
<li>Fatal()  打印日志信息后调用os.Exit(1)</li>
</ul>
</li>
<li>所有日志信息打印时都带有时间,且颜色为红色</li>
<li>每种级别日志打印都提供了三个函数<ul>
<li>Println()</li>
<li>Print()</li>
<li>Printf()</li>
</ul>
</li>
<li>日志文件扩展名为log<h1 id="普通日志信息打印"><a href="#普通日志信息打印" class="headerlink" title="普通日志信息打印"></a>普通日志信息打印</h1></li>
<li>官方源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	std.Output(<span class="number">2</span>, fmt.Sprintln(v...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>直接使用log包调用Println()即可<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">log.Println(<span class="string">"打印日志信息"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="Panic日志信息打印"><a href="#Panic日志信息打印" class="headerlink" title="Panic日志信息打印"></a>Panic日志信息打印</h1></li>
<li>通过源码可以看出在日志信息打印后调用了panic()函数,且日志信息为panic信息<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Panicln is equivalent to Println() followed by a call to panic().</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Panicln</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	s := fmt.Sprintln(v...)</span><br><span class="line">	std.Output(<span class="number">2</span>, s)</span><br><span class="line">	<span class="built_in">panic</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>执行后输出日志信息,同时也会触发panic<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">log.Panicln(<span class="string">"打印日志信息"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="致命日志信息"><a href="#致命日志信息" class="headerlink" title="致命日志信息"></a>致命日志信息</h1></li>
<li>打印日志后,终止程序<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fatal is equivalent to Print() followed by a call to os.Exit(1).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fatal</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	std.Output(<span class="number">2</span>, fmt.Sprint(v...))</span><br><span class="line">	os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>执行日志打印后,程序被终止<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">log.Fatal(<span class="string">"打印日志信息"</span>)</span><br></pre></td></tr></table></figure>
<h1 id="打印日志信息到文件中"><a href="#打印日志信息到文件中" class="headerlink" title="打印日志信息到文件中"></a>打印日志信息到文件中</h1></li>
<li>Go语言标准库支持输出日志信息到文件中.</li>
<li>输出日志时的几种状态<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	Ldate         = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span>     <span class="comment">// the date in the local time zone: 2009/01/23</span></span><br><span class="line">	Ltime                         <span class="comment">// the time in the local time zone: 01:23:23</span></span><br><span class="line">	Lmicroseconds                 <span class="comment">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span></span><br><span class="line">	Llongfile                     <span class="comment">// full file name and line number: /a/b/c/d.go:23</span></span><br><span class="line">	Lshortfile                    <span class="comment">// final file name element and line number: d.go:23. overrides Llongfile</span></span><br><span class="line">	LUTC                          <span class="comment">// if Ldate or Ltime is set, use UTC rather than the local time zone</span></span><br><span class="line">	LstdFlags     = Ldate | Ltime <span class="comment">// initial values for the standard logger</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>代码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, _ := os.OpenFile(<span class="string">"D:/golog.log"</span>, os.O_APPEND|os.O_CREATE, <span class="number">07777</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">logger := log.New(f, <span class="string">"[info]\t"</span>, log.Ltime)</span><br><span class="line">logger.Println(<span class="string">"输出日志信息"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十八：XML操作</title>
    <url>/posts/goalng/2020/06/202006201125.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Go语言标准库提供的API"><a href="#Go语言标准库提供的API" class="headerlink" title="Go语言标准库提供的API"></a>Go语言标准库提供的API</h1><ul>
<li>在encoding/xml包下提供了对XML序列化和反序列化的API</li>
<li>使用Unmarshal可以直接把XML字节切片数据转换为结构体</li>
<li>转换时按照特定的转换规则进行转换,且数据类型可以自动转换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 如果结构体字段的类型为字符串或者[]byte，且标签为&quot;,innerxml&quot;，</span><br><span class="line">  Unmarshal函数直接将对应原始XML文本写入该字段，其余规则仍适用。</span><br><span class="line">* 如果结构体字段类型为xml.Name且名为XMLName，Unmarshal会将元素名写入该字段</span><br><span class="line">* 如果字段XMLName的标签的格式为&quot;name&quot;或&quot;namespace-URL name&quot;，</span><br><span class="line">  XML元素必须有给定的名字（以及可选的名字空间），否则Unmarshal会返回错误。</span><br><span class="line">* 如果XML元素的属性的名字匹配某个标签&quot;,attr&quot;为字段的字段名，或者匹配某个标签为&quot;name,attr&quot;</span><br><span class="line">  的字段的标签名，Unmarshal会将该属性的值写入该字段。</span><br><span class="line">* 如果XML元素包含字符数据，该数据会存入结构体中第一个具有标签&quot;,chardata&quot;的字段中，</span><br><span class="line">  该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</span><br><span class="line">* 如果XML元素包含注释，该数据会存入结构体中第一个具有标签&quot;,comment&quot;的字段中，</span><br><span class="line">  该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</span><br><span class="line">* 如果XML元素包含一个子元素，其名称匹配格式为&quot;a&quot;或&quot;a&gt;b&gt;c&quot;的标签的前缀，反序列化会深入</span><br><span class="line">  XML结构中寻找具有指定名称的元素，并将最后端的元素映射到该标签所在的结构体字段。</span><br><span class="line">  以&quot;&gt;&quot;开始的标签等价于以字段名开始并紧跟着&quot;&gt;&quot; 的标签。</span><br><span class="line">* 如果XML元素包含一个子元素，其名称匹配某个结构体类型字段的XMLName字段的标签名，</span><br><span class="line">  且该结构体字段本身没有显式指定标签名，Unmarshal会将该元素映射到该字段。</span><br><span class="line">* 如果XML元素的包含一个子元素，其名称匹配够格结构体字段的字段名，且该字段没有任何模式选项</span><br><span class="line">  （&quot;,attr&quot;、&quot;,chardata&quot;等），Unmarshal会将该元素映射到该字段。</span><br><span class="line">* 如果XML元素包含的某个子元素不匹配以上任一条，而存在某个字段其标签为&quot;,any&quot;，</span><br><span class="line">  Unmarshal会将该元素映射到该字段。</span><br><span class="line">* 匿名字段被处理为其字段好像位于外层结构体中一样。</span><br><span class="line">* 标签为&quot;-&quot;的结构体字段永不会被反序列化填写。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="XML文件读取"><a href="#XML文件读取" class="headerlink" title="XML文件读取"></a>XML文件读取</h1><ul>
<li>给定XML文件内容如下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">people</span> <span class="attr">id</span>=<span class="string">"888"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>msr<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>中国上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>新建结构体,装载XML数据<ul>
<li>结构体中属性首字母必须大写,否则无法装配<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	XMLName xml.Name <span class="string">`xml:"people"`</span></span><br><span class="line">	Id      <span class="keyword">int</span>      <span class="string">`xml:"id,attr"`</span></span><br><span class="line">	Name    <span class="keyword">string</span>   <span class="string">`xml:"name"`</span></span><br><span class="line">	Address <span class="keyword">string</span>   <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := <span class="built_in">new</span>(People)</span><br><span class="line">	b, err := ioutil.ReadFile(<span class="string">"demo.xml"</span>)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">	fmt.Println(<span class="string">"111:"</span>, err)</span><br><span class="line">	err = xml.Unmarshal(b, peo)</span><br><span class="line">	fmt.Println(<span class="string">"2222"</span>, err)</span><br><span class="line">	fmt.Println(peo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="多层嵌套XML文件读取"><a href="#多层嵌套XML文件读取" class="headerlink" title="多层嵌套XML文件读取"></a>多层嵌套XML文件读取</h1></li>
</ul>
</li>
<li>给定XML中数据如下<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">peoples</span> <span class="attr">version</span>=<span class="string">"0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">people</span> <span class="attr">id</span>=<span class="string">"888"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>msr<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>中国上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">people</span> <span class="attr">id</span>=<span class="string">"998"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maishuren<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>中国上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">peoples</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写读取XML数据代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Peoples <span class="keyword">struct</span> &#123;</span><br><span class="line">	XMLName xml.Name <span class="string">`xml:"peoples"`</span></span><br><span class="line">	Version <span class="keyword">string</span>   <span class="string">`xml:"version,attr"`</span></span><br><span class="line">	Peos    []People <span class="string">`xml:"people"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	XMLName xml.Name <span class="string">`xml:"people"`</span></span><br><span class="line">	Id      <span class="keyword">int</span>      <span class="string">`xml:"id,attr"`</span></span><br><span class="line">	Name    <span class="keyword">string</span>   <span class="string">`xml:"name"`</span></span><br><span class="line">	Address <span class="keyword">string</span>   <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := <span class="built_in">new</span>(Peoples)</span><br><span class="line">	b, err := ioutil.ReadFile(<span class="string">"demo.xml"</span>)</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">	fmt.Println(<span class="string">"111:"</span>, err)</span><br><span class="line">	err = xml.Unmarshal(b, peo)</span><br><span class="line">	fmt.Println(<span class="string">"2222"</span>, err)</span><br><span class="line">	fmt.Println(peo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="生成XML"><a href="#生成XML" class="headerlink" title="生成XML"></a>生成XML</h1><ul>
<li>生成XML只要在学习下encoding/xml包下的Marshal()函数,结合输入流就可以完成xml文件生成</li>
<li>在encoding/xml中有常量,常量中是xml文档头<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	<span class="comment">// Header is a generic XML header suitable for use with the output of Marshal.</span></span><br><span class="line">	<span class="comment">// This is not automatically added to any output of this package,</span></span><br><span class="line">	<span class="comment">// it is provided as a convenience.</span></span><br><span class="line">	Header = <span class="string">`&lt;?xml version="1.0" encoding="UTF-8"?&gt;`</span> + <span class="string">"\n"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>使用Marshal()函数生成的[]byte没有格式化</li>
<li>使用MarshalIndent()可以对内容进行格式化<ul>
<li>第一个参数:结构体对象</li>
<li>第二个参数:每行的前缀</li>
<li>第三个参数:层级缩进内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	XMLName xml.Name <span class="string">`xml:"people"`</span></span><br><span class="line">	Id      <span class="keyword">int</span>      <span class="string">`xml:"id,attr"`</span></span><br><span class="line">	Name    <span class="keyword">string</span>   <span class="string">`xml:"name"`</span></span><br><span class="line">	Address <span class="keyword">string</span>   <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := People&#123;Id: <span class="number">123</span>, Name: <span class="string">"maishuren"</span>, Address: <span class="string">"中国上海"</span>&#125;</span><br><span class="line">	b, _ := xml.MarshalIndent(peo, <span class="string">""</span>, <span class="string">"	"</span>)</span><br><span class="line">	b = <span class="built_in">append</span>([]<span class="keyword">byte</span>(xml.Header), b...)</span><br><span class="line">	ioutil.WriteFile(<span class="string">"D:/peo.xml"</span>, b, <span class="number">0666</span>)</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十七：反射</title>
    <url>/posts/goalng/2020/06/202006201120.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="反射介绍"><a href="#反射介绍" class="headerlink" title="反射介绍"></a>反射介绍</h1><ul>
<li>在Go语言标准库中reflect包提供了运行时反射,程序运行过程中动态操作结构体</li>
<li>当变量存储结构体属性名称,想要对结构体这个属性赋值或查看时,就可以使用反射.</li>
<li>反射还可以用作判断变量类型</li>
<li>整个reflect包中最重要的两个类型<ul>
<li>reflect.Type 类型</li>
<li>reflect.Value 值</li>
</ul>
</li>
<li>获取到Type和Value的函数<ul>
<li>reflect.TypeOf(interface{}) 返回Type</li>
<li>reflect.ValueOf(interface{}) 返回值Value</li>
</ul>
</li>
</ul>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><ul>
<li>判断变量类型<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a:=<span class="number">1.5</span></span><br><span class="line">fmt.Println(reflect.TypeOf(a))</span><br></pre></td></tr></table></figure></li>
<li>获取结构体属性的值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">ype People <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="keyword">int</span></span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"asdf"</span>)</span><br><span class="line"></span><br><span class="line">   peo := People&#123;<span class="number">1</span>, <span class="string">"张三"</span>&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取peo的值</span></span><br><span class="line">   v := reflect.ValueOf(peo)</span><br><span class="line">   <span class="comment">//获取属性个数,如果v不是结构体类型panic</span></span><br><span class="line">   fmt.Println(v.NumField())</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取第0个属性,id,并转换为int64类型</span></span><br><span class="line">   fmt.Println(v.Field(<span class="number">0</span>).Int())</span><br><span class="line">   <span class="comment">//获取第1个属性,转换换为string类型</span></span><br><span class="line">   fmt.Println(v.Field(<span class="number">1</span>).String())</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据名字获取类型,并把类型名称转换为string类型</span></span><br><span class="line">   idValue := v.FieldByName(<span class="string">"Id"</span>)</span><br><span class="line">   fmt.Println(idValue.Kind().String())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>设置结构体属性的值时要传递结构体指针,否者无法获取设置的结构体对象<ul>
<li>反射直射结构体属性时,要求属性名首字母必须大写,否则无法设置<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="keyword">int</span></span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"asdf"</span>)</span><br><span class="line">   peo := People&#123;<span class="number">1</span>, <span class="string">"张三"</span>&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   反射时获取peo的地址.</span></span><br><span class="line"><span class="comment">   Elem()获取指针指向地址的封装.</span></span><br><span class="line"><span class="comment">   地址的值必须调用Elem()才可以继续操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   v := reflect.ValueOf(&amp;peo).Elem()</span><br><span class="line"></span><br><span class="line">   fmt.Println(v.FieldByName(<span class="string">"Id"</span>).CanSet())</span><br><span class="line">   v.FieldByName(<span class="string">"Id"</span>).SetInt(<span class="number">123</span>)</span><br><span class="line">   v.FieldByName(<span class="string">"Name"</span>).SetString(<span class="string">"李四"</span>)</span><br><span class="line">   fmt.Println(peo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>结构体支持标记(tag),标记通常都是通过反射技术获取到.结构体标记语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type 结构体名称 struct&#123;</span><br><span class="line">  属性名 类型 &#96;key:&quot;Value&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>获取结构体标记(tag)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name    <span class="keyword">string</span> <span class="string">`xml:"name"`</span></span><br><span class="line">	Address <span class="keyword">string</span> <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	t:=reflect.TypeOf(People&#123;&#125;)</span><br><span class="line">	name,_:=t.FieldByName(<span class="string">"Name"</span>)</span><br><span class="line">	fmt.Println(name.Tag)<span class="comment">//获取完整标记</span></span><br><span class="line">	fmt.Println(name.Tag.Get(<span class="string">"xml"</span>))<span class="comment">//获取标记中xml对应内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十六：文件操作</title>
    <url>/posts/goalng/2020/06/202006201116.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="os包结构介绍"><a href="#os包结构介绍" class="headerlink" title="os包结构介绍"></a>os包结构介绍</h1><ul>
<li>Go语言标准库中os包提供了不依赖平台的操作系统接口</li>
<li>设计为Unix风格的，而错误处理是go风格的,失败的调用会返回错误值而非错误码。通常错误值里包含更多信息</li>
<li>os包及子包功能<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- os 包</span><br><span class="line">  --os&#x2F;exec 包,负责执行外部命令.</span><br><span class="line">  --os&#x2F;signal对输入信息的访问</span><br><span class="line">  --os&#x2F;user 通过名称或ID	查询用户账户</span><br></pre></td></tr></table></figure></li>
<li>在os/user中提供了User结构体,表示操作系统用户<ul>
<li>Uid 用户id</li>
<li>Gid 所属组id</li>
<li>Username 用户名</li>
<li>Name 所属组名</li>
<li>HomeDir 用户对应文件夹路径<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// User represents a user account.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Uid is the user ID.</span></span><br><span class="line">	<span class="comment">// On POSIX systems, this is a decimal number representing the uid.</span></span><br><span class="line">	<span class="comment">// On Windows, this is a security identifier (SID) in a string format.</span></span><br><span class="line">	<span class="comment">// On Plan 9, this is the contents of /dev/user.</span></span><br><span class="line">	Uid <span class="keyword">string</span></span><br><span class="line">	<span class="comment">// Gid is the primary group ID.</span></span><br><span class="line">	<span class="comment">// On POSIX systems, this is a decimal number representing the gid.</span></span><br><span class="line">	<span class="comment">// On Windows, this is a SID in a string format.</span></span><br><span class="line">	<span class="comment">// On Plan 9, this is the contents of /dev/user.</span></span><br><span class="line">	Gid <span class="keyword">string</span></span><br><span class="line">	<span class="comment">// Username is the login name.</span></span><br><span class="line">	Username <span class="keyword">string</span></span><br><span class="line">	<span class="comment">// Name is the user's real or display name.</span></span><br><span class="line">	<span class="comment">// It might be blank.</span></span><br><span class="line">	<span class="comment">// On POSIX systems, this is the first (or only) entry in the GECOS field</span></span><br><span class="line">	<span class="comment">// list.</span></span><br><span class="line">	<span class="comment">// On Windows, this is the user's display name.</span></span><br><span class="line">	<span class="comment">// On Plan 9, this is the contents of /dev/user.</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	<span class="comment">// HomeDir is the path to the user's home directory (if they have one).</span></span><br><span class="line">	HomeDir <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>在os/user中的Group表示用户所属组<ul>
<li>Gid 组的id</li>
<li>Name 组的名称<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Group represents a grouping of users.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// On POSIX systems Gid contains a decimal number representing the group ID.</span></span><br><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">	Gid  <span class="keyword">string</span> <span class="comment">// group ID</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="comment">// group name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>整个os/user包中内容比较少,提供了两个错误类型和获取当前用户,查找用户<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> UnknownUserError</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(e UnknownUserError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="keyword">type</span> UnknownUserIdError</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(e UnknownUserIdError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="keyword">type</span> User</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">Current</span><span class="params">()</span> <span class="params">(*User, error)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">Lookup</span><span class="params">(username <span class="keyword">string</span>)</span> <span class="params">(*User, error)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">LookupId</span><span class="params">(uid <span class="keyword">string</span>)</span> <span class="params">(*User, error)</span></span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>可以获取当前用户或查找用户后获取用户信息<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取当前登录用户</span></span><br><span class="line"><span class="comment">//u,_:=user.Current()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Lookup()参数是用户名,按照用户名查找指定用户对象</span></span><br><span class="line"><span class="comment">注意:必须使用完整名称不可以只写zhang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">u, _ := user.Lookup(<span class="string">`LAPTOP-APM56\maishuren`</span>)</span><br><span class="line">fmt.Println(u.Name)</span><br><span class="line">fmt.Println(u.Gid)</span><br><span class="line">fmt.Println(u.HomeDir)</span><br><span class="line">fmt.Println(u.Uid)</span><br><span class="line">fmt.Println(u.Username)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="os包内容介绍"><a href="#os包内容介绍" class="headerlink" title="os包内容介绍"></a>os包内容介绍</h1><ul>
<li><p>使用os包中内容进行操作系统文件或目录</p>
</li>
<li><p>File结构体表示操作系统文件(夹)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// File represents an open file descriptor.</span></span><br><span class="line"><span class="keyword">type</span> File <span class="keyword">struct</span> &#123;</span><br><span class="line">	*file <span class="comment">// os specific</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file is the real representation of *File.</span></span><br><span class="line"><span class="comment">// The extra level of indirection ensures that no clients of os</span></span><br><span class="line"><span class="comment">// can overwrite this data, which could cause the finalizer</span></span><br><span class="line"><span class="comment">// to close the wrong file descriptor.</span></span><br><span class="line"><span class="keyword">type</span> file <span class="keyword">struct</span> &#123;</span><br><span class="line">	pfd     poll.FD</span><br><span class="line">	name    <span class="keyword">string</span></span><br><span class="line">	dirinfo *dirInfo <span class="comment">// nil unless directory being read</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>操作系统的文件都是有权限控制的,包含可读,可写等,在os包中FileMode表示文件权限,本质是uint32,可取值都以常量形式提供</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A FileMode represents a file's mode and permission bits.</span></span><br><span class="line"><span class="comment">// The bits have the same definition on all systems, so that</span></span><br><span class="line"><span class="comment">// information about files can be moved from one system</span></span><br><span class="line"><span class="comment">// to another portably. Not all bits apply to all systems.</span></span><br><span class="line"><span class="comment">// The only required bit is ModeDir for directories.</span></span><br><span class="line"><span class="keyword">type</span> FileMode <span class="keyword">uint32</span></span><br></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The defined file mode bits are the most significant bits of the FileMode.</span></span><br><span class="line"><span class="comment">// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.</span></span><br><span class="line"><span class="comment">// The values of these bits should be considered part of the public API and</span></span><br><span class="line"><span class="comment">// may be used in wire protocols or disk representations: they must not be</span></span><br><span class="line"><span class="comment">// changed, although new bits might be added.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	<span class="comment">// The single letters are the abbreviations</span></span><br><span class="line">	<span class="comment">// used by the String method's formatting.</span></span><br><span class="line">	ModeDir        FileMode = <span class="number">1</span> &lt;&lt; (<span class="number">32</span> - <span class="number">1</span> - <span class="literal">iota</span>) <span class="comment">// d: is a directory</span></span><br><span class="line">	ModeAppend                                     <span class="comment">// a: append-only</span></span><br><span class="line">	ModeExclusive                                  <span class="comment">// l: exclusive use</span></span><br><span class="line">	ModeTemporary                                  <span class="comment">// T: temporary file; Plan 9 only</span></span><br><span class="line">	ModeSymlink                                    <span class="comment">// L: symbolic link</span></span><br><span class="line">	ModeDevice                                     <span class="comment">// D: device file</span></span><br><span class="line">	ModeNamedPipe                                  <span class="comment">// p: named pipe (FIFO)</span></span><br><span class="line">	ModeSocket                                     <span class="comment">// S: Unix domain socket</span></span><br><span class="line">	ModeSetuid                                     <span class="comment">// u: setuid</span></span><br><span class="line">	ModeSetgid                                     <span class="comment">// g: setgid</span></span><br><span class="line">	ModeCharDevice                          <span class="comment">// c: Unix character device, when ModeDevice is set</span></span><br><span class="line">	ModeSticky                                     <span class="comment">// t: sticky</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Mask for the type bits. For regular files, none will be set.</span></span><br><span class="line">	ModeType = ModeDir | ModeSymlink | ModeNamedPipe | ModeSocket | ModeDevice</span><br><span class="line"></span><br><span class="line">	ModePerm FileMode = <span class="number">0777</span> <span class="comment">// Unix permission bits</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>FIleInfo是一个interface表示文件的信息</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A FileInfo describes a file and is returned by Stat and Lstat.</span></span><br><span class="line"><span class="keyword">type</span> FileInfo <span class="keyword">interface</span> &#123;</span><br><span class="line">	Name() <span class="keyword">string</span>       <span class="comment">// base name of the file</span></span><br><span class="line">	Size() <span class="keyword">int64</span>        <span class="comment">// length in bytes for regular files; system-dependent for others</span></span><br><span class="line">	Mode() FileMode     <span class="comment">// file mode bits</span></span><br><span class="line">	ModTime() time.Time <span class="comment">// modification time</span></span><br><span class="line">	IsDir() <span class="keyword">bool</span>        <span class="comment">// abbreviation for Mode().IsDir()</span></span><br><span class="line">	Sys() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// underlying data source (can return nil)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h2></li>
<li><p>在获取系统资源时资源路径分为相对路径和绝对路径</p>
</li>
<li><p>相对路径:在Go语言中相对路径用于是GOPATH,也就是项目的根目录</p>
</li>
<li><p>绝对路径:磁盘根目录开始表示资源详细路径的描述</p>
<h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2></li>
<li><p>Go语言标准库中提供了两种创建文件夹的方式</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要求文件夹不存在且父目录必须存在,才能创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//error := os.Mkdir("D:/godir", os.ModeDir)</span></span><br><span class="line"><span class="comment">//if error != nil &#123;</span></span><br><span class="line"><span class="comment">//	fmt.Println("文件夹创建失败",error)</span></span><br><span class="line"><span class="comment">//	return</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//fmt.Println("文件夹创建成功")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果文件夹已经存在,不报错,保留原文件夹</span></span><br><span class="line"><span class="comment">如果父目录不存在帮助创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error := os.MkdirAll(<span class="string">"D:/godir/a/b"</span>, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"文件夹创建失败"</span>,error)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件夹创建成功"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>创建空文件<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建文件时要求文件目录必须已经存在</span></span><br><span class="line"><span class="comment">如果文件已经存在则会创建一个空文件覆盖之前的文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">file, err := os.Create(<span class="string">"D:/godir/test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"文件创建失败,"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件创建成功"</span>,file.Name())</span><br></pre></td></tr></table></figure></li>
<li>重命名文件或文件夹<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个参数:原文件夹名称,要求此路径是必须存在的</span></span><br><span class="line"><span class="comment">第二个参数:新文件夹名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err := os.Rename(<span class="string">"D:/godir"</span>, <span class="string">"D:/godir1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"重命名文件夹失败,"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件夹重命名成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重命名文件和重命名文件夹用法相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err = os.Rename(<span class="string">"D:/godir1/test.txt"</span>, <span class="string">"D:/godir1/test1.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"重命名文件失败,"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件重命名成功"</span>)</span><br></pre></td></tr></table></figure></li>
<li>获取文件(夹)信息<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"D:/godir1/test1.txt"</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close() <span class="comment">//文件打开后要关闭,释放资源</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"打开文件失败"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileInfo, err := f.Stat()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"获取文件信息失败"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(fileInfo.Name())    <span class="comment">//文件名</span></span><br><span class="line">fmt.Println(fileInfo.IsDir())   <span class="comment">//是否是文件夹,返回bool,true表示文件夹,false表示文件</span></span><br><span class="line">fmt.Println(fileInfo.Mode())    <span class="comment">//文件权限</span></span><br><span class="line">fmt.Println(fileInfo.ModTime()) <span class="comment">//修改时间</span></span><br><span class="line">fmt.Println(fileInfo.Size())    <span class="comment">//文件大小</span></span><br></pre></td></tr></table></figure></li>
<li>删除文件或文件夹<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除的内容只能是一个文件或空文件夹且必须存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//err := os.Remove("D:/godir1/a")</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//	fmt.Println("文件删除失败", err)</span></span><br><span class="line"><span class="comment">//	return</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//fmt.Println("删除成功")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">只要文件夹存在,删除文件夹.</span></span><br><span class="line"><span class="comment">无论文件夹是否有内容都会删除</span></span><br><span class="line"><span class="comment">如果删除目标是文件,则删除文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err := os.RemoveAll(<span class="string">"D:/godir1/a.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"删除失败"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"删除成功"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h1><ul>
<li><p>流(stream)是应用程序和外部资源进行数据交互的纽带</p>
</li>
<li><p>流分为输入流和输出流,输入和输出都是相对于程序,把外部数据传入到程序中叫做输入,反之叫做输出流</p>
</li>
<li><p>输入流(Input Stream),输入流(Output Stream) 平时所说的I/O流</p>
</li>
<li><p>在Go语言标准库中io包下是Reader接口表示输入流,只要实现这个接口就属于输入流</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Reader is the interface that wraps the basic Read method.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Read reads up to len(p) bytes into p. It returns the number of bytes</span></span><br><span class="line"><span class="comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span></span><br><span class="line"><span class="comment">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span></span><br><span class="line"><span class="comment">// If some data is available but not len(p) bytes, Read conventionally</span></span><br><span class="line"><span class="comment">// returns what is available instead of waiting for more.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When Read encounters an error or end-of-file condition after</span></span><br><span class="line"><span class="comment">// successfully reading n &gt; 0 bytes, it returns the number of</span></span><br><span class="line"><span class="comment">// bytes read. It may return the (non-nil) error from the same call</span></span><br><span class="line"><span class="comment">// or return the error (and n == 0) from a subsequent call.</span></span><br><span class="line"><span class="comment">// An instance of this general case is that a Reader returning</span></span><br><span class="line"><span class="comment">// a non-zero number of bytes at the end of the input stream may</span></span><br><span class="line"><span class="comment">// return either err == EOF or err == nil. The next Read should</span></span><br><span class="line"><span class="comment">// return 0, EOF.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Callers should always process the n &gt; 0 bytes returned before</span></span><br><span class="line"><span class="comment">// considering the error err. Doing so correctly handles I/O errors</span></span><br><span class="line"><span class="comment">// that happen after reading some bytes and also both of the</span></span><br><span class="line"><span class="comment">// allowed EOF behaviors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementations of Read are discouraged from returning a</span></span><br><span class="line"><span class="comment">// zero byte count with a nil error, except when len(p) == 0.</span></span><br><span class="line"><span class="comment">// Callers should treat a return of 0 and nil as indicating that</span></span><br><span class="line"><span class="comment">// nothing happened; in particular it does not indicate EOF.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementations must not retain p.</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">	Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ul>
<li>可以使用strings包下的NewReader创建字符串流<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := strings.NewReader(<span class="string">"hello 世界"</span>)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, r.Size())<span class="comment">//创建字节切片,存放流中数据,根据流数据大小创建切片大小</span></span><br><span class="line">n, err := r.Read(b)<span class="comment">//把流中数据读取到切片中</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"读取失败,"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"读取数据长度,"</span>, n)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"流中数据"</span>,<span class="keyword">string</span>(b))<span class="comment">//以字符串形式输入切片中数据</span></span><br></pre></td></tr></table></figure></li>
<li>最常用的是文件流,把外部文件中数据读取到程序中<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"D:/go.txt"</span>)<span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"文件读取失败,"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileInfo, err := f.Stat()<span class="comment">//获取文件信息</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"文件信息获取失败,"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())<span class="comment">//根据文件中数据大小创建切片</span></span><br><span class="line">_, err = f.Read(b)<span class="comment">//读取数据到切片中</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"文件流读取失败:"</span>, err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件中内容为:"</span>, <span class="keyword">string</span>(b))<span class="comment">//以字符串形式输入切片中数据</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="输入流-1"><a href="#输入流-1" class="headerlink" title="输入流"></a>输入流</h1><ul>
<li>输入流就是把程序中数据写出到外部资源</li>
<li>Go语言标准库中输出流是Writer接口<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Writer is the interface that wraps the basic Write method.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Write writes len(p) bytes from p to the underlying data stream.</span></span><br><span class="line"><span class="comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class="line"><span class="comment">// and any error encountered that caused the write to stop early.</span></span><br><span class="line"><span class="comment">// Write must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class="line"><span class="comment">// Write must not modify the slice data, even temporarily.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementations must not retain p.</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">	Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h2><ul>
<li>注意:输入流时不要使用<code>os.Open()</code>因为这种方式获取的文件是只读的<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fp := <span class="string">"D:/go.txt"</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第三个参数表示文件权限</span></span><br><span class="line"><span class="comment">第 1 位在权限中总是为 0</span></span><br><span class="line"><span class="comment">第 2 位为 0 表示文件不可以被读， 为 1 表示可以被读</span></span><br><span class="line"><span class="comment">第 3 位为 0 表示文件不可以被写， 为 1 表示可以被写</span></span><br><span class="line"><span class="comment">第 4 位为 0 表示文件不可以被执行， 为 1 表示可以被执行</span></span><br><span class="line"><span class="comment">整理如下:</span></span><br><span class="line"><span class="comment">   0(0000): 不可读写,不能被执行</span></span><br><span class="line"><span class="comment">   1(0001): 不可读写,能被执行</span></span><br><span class="line"><span class="comment">   2(0010): 可写不可读,不能被执行</span></span><br><span class="line"><span class="comment">   3(0011): 可写不可读,能被执行</span></span><br><span class="line"><span class="comment">   4(0100): 可读不可写,不能被执行</span></span><br><span class="line"><span class="comment">   5(0101): 可读不可写,能被执行</span></span><br><span class="line"><span class="comment">   6(0110): 可读写,不能执行</span></span><br><span class="line"><span class="comment">   7(0111): 可读写,可执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0666:</span></span><br><span class="line"><span class="comment">第一个 0 表示这个数是 八进制</span></span><br><span class="line"><span class="comment">第一个 6 表示文件拥有者有读写权限，但没有执行权限</span></span><br><span class="line"><span class="comment">第二个 6 表示文件拥有者同组用户有读写权限，但没有执行权限</span></span><br><span class="line"><span class="comment">第三个 6 表示其它用户有读写权限，但没有执行权限</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个参数表示文件内容追加</span></span><br><span class="line"><span class="comment">//第三个参数表示创建文件时文件权限</span></span><br><span class="line">f, err := os.OpenFile(fp, os.O_APPEND, <span class="number">0660</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"文件不存在,创建文件"</span>)</span><br><span class="line">	f, _ = os.Create(fp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内容中识别特殊字符</span></span><br><span class="line"><span class="comment">\r\n 换行</span></span><br><span class="line"><span class="comment">\t 缩进</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用文件对象重写的Writer接口,参数是[]byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">f.Write([]<span class="keyword">byte</span>(<span class="string">"使用Writer接口写数据\r\n"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用stringWriter接口的方法,参数是字符串,使用更方便</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">f.WriteString(<span class="string">"写了\t一段\r\n内容123"</span>)</span><br><span class="line">fmt.Println(<span class="string">"程序执行结束"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="ioutil包"><a href="#ioutil包" class="headerlink" title="ioutil包"></a>ioutil包</h1><ul>
<li>ioutil包下提供了对文件读写的工具函数,通过这些函数快速实现文件的读写操作</li>
<li>ioutil包下提供的函数比较少,但是都是很方便使用的函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func NopCloser(r io.Reader) io.ReadCloser</span><br><span class="line">func ReadAll(r io.Reader) ([]byte, error)</span><br><span class="line">func ReadFile(filename string) ([]byte, error)</span><br><span class="line">func WriteFile(filename string, data []byte, perm os.FileMode) error</span><br><span class="line">func ReadDir(dirname string) ([]os.FileInfo, error)</span><br><span class="line">func TempDir(dir, prefix string) (name string, err error)</span><br><span class="line">func TempFile(dir, prefix string) (f *os.File, err error)</span><br></pre></td></tr></table></figure>
<h2 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h2></li>
<li>打开完文件后可以使用ReadAll把文件中所有内容都读取到<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"D:/go.txt"</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">b, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件中内容:\n"</span>, <span class="keyword">string</span>(b))</span><br></pre></td></tr></table></figure></li>
<li>也可以直接读取文件中内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">b, err := ioutil.ReadFile(<span class="string">"D:/go.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br></pre></td></tr></table></figure></li>
<li>写文件也很简单,直接使用WriteFile函数即可,但是源码中已经规定此文件只能是可写状态,且不是尾加数据<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">err := ioutil.WriteFile(<span class="string">"D:/abc.txt"</span>, []<span class="keyword">byte</span>(<span class="string">"内容123123"</span>), <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">	fmt.Println(err)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"数据写入成功"</span>)</span><br></pre></td></tr></table></figure></li>
<li>还提供了快速获取某个文件夹中所有文件信息的函数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fs,_:=ioutil.ReadDir(<span class="string">"D:/"</span>)</span><br><span class="line"><span class="keyword">for</span> _,n := <span class="keyword">range</span> fs &#123;</span><br><span class="line">	fmt.Println(n.Name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十五：错误异常处理</title>
    <url>/posts/goalng/2020/06/202006201059.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><ul>
<li><p>在程序执行过程中出现的不正常情况称为错误</p>
</li>
<li><p>Go语言中使用builtin包下error接口作为错误类型,官方源码定义如下</p>
<ul>
<li>只包含了一个方法,方法返回值是string,表示错误信息<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The error built-in interface type is the conventional interface for</span></span><br><span class="line"><span class="comment">// representing an error condition, with the nil value representing no error.</span></span><br><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">	Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Go语言中错误都作为方法/函数的返回值,因为Go语言认为使用其他语言类似try…catch这种方式会影响到程序结构</p>
</li>
<li><p>在Go语言标准库的errors包中提供了error接口的实现结构体errorString,并重写了error接口的Error()方法.额外还提供了快速创建错误的函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> errors</span><br><span class="line"></span><br><span class="line"><span class="comment">// New returns an error that formats as the given text.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// errorString is a trivial implementation of error.</span></span><br><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123;</span><br><span class="line">	s <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> e.s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果错误信息由很多变量(小块)组成,可以借助<code>fmt.Errorf(&quot;verb&quot;,...)</code>完成错误信息格式化,因为底层还是errors.New()</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Errorf formats according to a format specifier and returns the string</span></span><br><span class="line"><span class="comment">// as a value that satisfies error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> errors.New(Sprintf(format, a...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h1></li>
<li><p>使用Go语言标准库创建错误,并返回</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">		e = errors.New(<span class="string">"初始不能为0"</span>)</span><br><span class="line">		d=<span class="number">0</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d = i / k</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	result,error:=demo(<span class="number">6</span>,<span class="number">0</span>)</span><br><span class="line">	fmt.Println(result,error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果错误信息由多个内容组成,可以使用下面实现方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">		e = fmt.Errorf(<span class="string">"%s%d和%d"</span>, <span class="string">"除数不能是0,两个参数分别是:"</span>, i, k)</span><br><span class="line">		d = <span class="number">0</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d = i / k</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	result, error := demo(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">	fmt.Println(result, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Go语言中错误处理方式"><a href="#Go语言中错误处理方式" class="headerlink" title="Go语言中错误处理方式"></a>Go语言中错误处理方式</h1></li>
<li><p>可以忽略错误信息,使用占位符</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">		e = fmt.Errorf(<span class="string">"%s%d和%d"</span>, <span class="string">"除数不能是0,两个参数分别是:"</span>, i, k)</span><br><span class="line">		d = <span class="number">0</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d = i / k</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	result, _ := demo(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用if处理错误,原则上每个错误都应该解决</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">		e = fmt.Errorf(<span class="string">"%s%d和%d"</span>, <span class="string">"除数不能是0,两个参数分别是:"</span>, i, k)</span><br><span class="line">		d = <span class="number">0</span></span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	d = i / k</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	result, error := demo(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"发生错误"</span>, error)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序执行成功,结果为:"</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="defer使用"><a href="#defer使用" class="headerlink" title="defer使用"></a>defer使用</h1><ul>
<li>Go语言中defer可以完成延迟功能,当前函数执行完成后执行defer功能</li>
<li>defer最常用的就是关闭连接(数据库连接,文件等)可以打开连接后代码紧跟defer进行关闭,后面在执行其他功能<ul>
<li>在很多语言中要求必须按照顺序执行,也就是必须把关闭代码写在最后,但是经常会忘记关闭导致内存溢出,而Golang中defer很好的解决了这个问题.无论defer写到哪里都是最后执行<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开连接"</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"关闭连接"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"进行操作"</span>)</span><br><span class="line">   <span class="comment">//输出:打开连接 进行操作 关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="多个defer"><a href="#多个defer" class="headerlink" title="多个defer"></a>多个defer</h1><ul>
<li><p>多重defer采用栈结构执行,先产生后执行</p>
</li>
<li><p>在很多代码结构中都可能出现产生多个对象,而程序希望这些对象倒序关闭,多个defer正好可以解决这个问题</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开连接A"</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"关闭连接A"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"打开连接B"</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"关闭连接B"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"进行操作"</span>)</span><br><span class="line">   <span class="comment">//输出:打开连接A 打开连接B 进行操作 关闭连接B 关闭连接A</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="defer和return结合"><a href="#defer和return结合" class="headerlink" title="defer和return结合"></a>defer和return结合</h1></li>
<li><p>defer与return同时存在时,要把return理解成两条执行结合(不是原子指令),一个指令是给返回值赋值,另一个指令返回跳出函数</p>
</li>
<li><p>defer和return时整体执行顺序</p>
<ul>
<li>先给返回值赋值</li>
<li>执行defer</li>
<li>返回跳出函数</li>
</ul>
</li>
<li><p>没有定义返回值接收变量,执行defer时返回值已经赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	i:=<span class="number">0</span></span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		i=i+<span class="number">2</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(f())<span class="comment">//输出:0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>声明接收返回值变量,执行defer时修改了返回值内容.</p>
<ul>
<li>由于return后面没有内容,就无法给返回值赋值,所以执行defer时返回值才有内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">		i=i+<span class="number">2</span></span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(f())<span class="comment">//输出:2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h1><ul>
<li>panic是builtin中函数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The panic built-in function stops normal execution of the current</span></span><br><span class="line"><span class="comment">// goroutine. When a function F calls panic, normal execution of F stops</span></span><br><span class="line"><span class="comment">// immediately. Any functions whose execution was deferred by F are run in</span></span><br><span class="line"><span class="comment">// the usual way, and then F returns to its caller. To the caller G, the</span></span><br><span class="line"><span class="comment">// invocation of F then behaves like a call to panic, terminating G's</span></span><br><span class="line"><span class="comment">// execution and running any deferred functions. This continues until all</span></span><br><span class="line"><span class="comment">// functions in the executing goroutine have stopped, in reverse order. At</span></span><br><span class="line"><span class="comment">// that point, the program is terminated and the error condition is reported,</span></span><br><span class="line"><span class="comment">// including the value of the argument to panic. This termination sequence</span></span><br><span class="line"><span class="comment">// is called panicking and can be controlled by the built-in function</span></span><br><span class="line"><span class="comment">// recover.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panic</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br></pre></td></tr></table></figure></li>
<li>panic有点类似与其他编程语言的throw,抛出异常.当执行到panic后终止剩余代码执行.并打印错误栈信息<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">"panic执行了,哈哈"</span>)</span><br><span class="line">   fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>执行结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">panic: panic执行了,哈哈</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">	D:&#x2F;gowork&#x2F;c&#x2F;main.go:7 +0x80</span><br></pre></td></tr></table></figure></li>
<li>注意panic不是立即停止程序(os.Exit(0)),defer还是执行的.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"defer执行"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">"panic执行了,哈哈"</span>)</span><br><span class="line">   fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h1><ul>
<li><p>recover()表示恢复程序的panic(),让程序正常运行</p>
</li>
<li><p>recover()是和panic(v)一样都是builtin中函数,可以接收panic的信息,恢复程序的正常运行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The recover built-in function allows a program to manage behavior of a</span></span><br><span class="line"><span class="comment">// panicking goroutine. Executing a call to recover inside a deferred</span></span><br><span class="line"><span class="comment">// function (but not any function called by it) stops the panicking sequence</span></span><br><span class="line"><span class="comment">// by restoring normal execution and retrieves the error value passed to the</span></span><br><span class="line"><span class="comment">// call of panic. If recover is called outside the deferred function it will</span></span><br><span class="line"><span class="comment">// not stop a panicking sequence. In this case, or when the goroutine is not</span></span><br><span class="line"><span class="comment">// panicking, or if the argument supplied to panic was nil, recover returns</span></span><br><span class="line"><span class="comment">// nil. Thus the return value from recover reports whether the goroutine is</span></span><br><span class="line"><span class="comment">// panicking.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recover</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>recover()一般用在defer内部,如果没有panic信息返回nil,如果有panic,recover会把panic状态取消</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> error:=<span class="built_in">recover</span>();error!=<span class="literal">nil</span>&#123;</span><br><span class="line">			fmt.Println(<span class="string">"出现了panic,使用reover获取信息:"</span>,error)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	fmt.Println(<span class="string">"11111111111"</span>)</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">"出现panic"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"22222222222"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11111111111</span><br><span class="line">出现了panic,使用reover获取信息: 出现panic</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="函数调用过程中panic和recover"><a href="#函数调用过程中panic和recover" class="headerlink" title="函数调用过程中panic和recover()"></a>函数调用过程中panic和recover()</h1><ul>
<li>recover()只能恢复当前函数级或当前函数调用函数中的panic(),恢复后调用当前级别函数结束,但是调用此函数的函数可以继续执行.</li>
<li>panic会一直向上传递,如果没有recover()则表示终止程序,但是碰见了recover(),recover()所在级别函数表示没有panic,panic就不会向上传递<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">"demo1上半部分"</span>)</span><br><span class="line">	demo2()</span><br><span class="line">	fmt.Println(<span class="string">"demo1下半部分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="built_in">recover</span>()<span class="comment">//此处进行恢复</span></span><br><span class="line">	&#125;()</span><br><span class="line">	fmt.Println(<span class="string">"demo2上半部分"</span>)</span><br><span class="line">	demo3()</span><br><span class="line">	fmt.Println(<span class="string">"demo2下半部分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">"demo3上半部分"</span>)</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">"在demo3出现了panic"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"demo3下半部分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"程序开始"</span>)</span><br><span class="line">	demo1()</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx实践：静态资源Web服务、代理服务、负载均衡调度器SLB和动态缓存</title>
    <url>/posts/nginx/2020/06/202006191422.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="静态资源服务"><a href="#静态资源服务" class="headerlink" title="静态资源服务"></a>静态资源服务</h1><h2 id="核心配置和文件压缩"><a href="#核心配置和文件压缩" class="headerlink" title="核心配置和文件压缩"></a>核心配置和文件压缩</h2><ol>
<li><p>配置语法：文件读取</p>
<p>配置：sendfile on | off。默认：sendfile off。作用域：http, server, location，if in location</p>
<p>sendfile 是一种高效传输文件的模式。sendfile设置为on表示启动高效传输文件的模式。sendfile可以让Nginx在传输文件时直接在磁盘和tcp socket之间传输数据。如果这个参数不开启，会先在用户空间（Nginx进程空间）申请一个buffer，用read函数把数据从磁盘读到cache，再从cache读取到用户空间的buffer，再用write函数把数据从用户空间的buffer写入到内核的buffer，最后到tcp socket。开启这个参数后可以让数据不用经过用户buffer。</p>
</li>
<li><p>配置语法：tcp_nopush</p>
<p>配置：tcp_nopush on | off</p>
<p>默认：tcp_nopush off</p>
<p>作用域：http, server, location</p>
<p>tcp_nopush是在sendfile开启的情况下，提高网络包的传输效率。tcp_nopush指令，在连接套接字时启用Linux系统下的TCP_CORK。该选项告诉TCP堆栈附加数据包，并在它们已满或当应用程序通过显式删除TCP_CORK指示发送数据包时发送它们。 这使得发送的数据分组是最优量，并且因此提高了网络数据包的传输效率。<br>也就是说 tcp_nopush=on 时，结果就是数据包不会马上传送出去，等到数据包最大时，一次性的传输出去，这样有助于解决网络堵塞，虽然有一点点延迟。</p>
</li>
<li><p>配置语法：tcp_nodelay</p>
<p>配置：tcp_nodelay on | off;</p>
<p>默认： tcp_nodelay on;</p>
<p>作用域：http, server, location</p>
<p>tcp_nodelay是在 keepalive 连接下，提高网络数据包的传输实时性。tcp_nodelay选项和tcp_nopush正好相反，数据包不等待，实时发送给用户。</p>
</li>
<li><p>配置语法：gzip压缩</p>
<p>压缩传输，提高传输效率。开启压缩，可以加快资源响应速度节省网络带宽资源</p>
<p>gizp配置语法：</p>
<p>​    配置：gzip on | off;</p>
<p>​    默认：gzip off;</p>
<p>​    作用域：http, server, location, if in location</p>
<p>配置压缩比：压缩等级配置（压缩等级越高，越消耗服务器资源）</p>
<p>​    配置：gzip_comp_level level;</p>
<p>​    默认：gzip_comp_level 1;</p>
<p>​    作用域： http, server, location</p>
<p>gzip协议版本配置：</p>
<p>​    配置：gzip_http_version 1.0 | 1.1;</p>
<p>​    默认：gzip_http_version 1.1;</p>
<p>​    作用域：http, server, location;</p>
<p>压缩扩展模块：预读gzip功能 ngx_http_gzip_static_module</p>
<p>​    配置： gzip_static on | off | always;</p>
<p>​    默认：gzip_static off;</p>
<p>​    作用域：http, server, location</p>
<p> gunzip的压缩方式 ngx_http_gunzip_module</p>
<p>​    配置：gunzip on | off;</p>
<p>​    默认：gunzip off;</p>
<p>​    作用域：http, server, location</p>
<p>​    </p>
<p>​    配置：gunzip_buffers number size;</p>
<p>​    默认：gunzip_buffers 32 4k|16 8k;</p>
<p>​    作用域：http, server, location;</p>
</li>
</ol>
<h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p>配置图片压缩，在/opt/work/code/images目录下准备一张图片，第一次请求先关闭gzip，禁止Chrome缓存，打开开发者工具，然后请求图片，在network里查看图片的size。开启gzip，再次请求该图片，会发现图片被压缩变小了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(jpg|gif|png)$ &#123;</span><br><span class="line">            gzip on;</span><br><span class="line">            gzip_http_version 1.1;</span><br><span class="line">            gzip_comp_level 2;</span><br><span class="line">            gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">            root  /opt/work/code/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于txt，html等文件，与上述同理</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(txt|xml)$ &#123;</span><br><span class="line">            gzip on;</span><br><span class="line">            gzip_http_version 1.1;</span><br><span class="line">            gzip_comp_level 1;</span><br><span class="line">            gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">            root  /opt/work/code/doc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置访问压缩的静态资源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ ^&#x2F;download &#123;</span><br><span class="line">            gzip_static on;</span><br><span class="line">            tcp_nopush on;</span><br><span class="line">            root &#x2F;opt&#x2F;work&#x2F;code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/browser_cache.jpg" alt=""></p>
<p>过期检验机制</p>
<ol>
<li>检验是否过期：Expires、Cache-Controller(max-age)</li>
<li>协议中的Etag头信息校验：Etag</li>
<li>Last-Modified头信息校验：Last-Modified</li>
</ol>
<h3 id="expires配置"><a href="#expires配置" class="headerlink" title="expires配置"></a>expires配置</h3><p>配置：expires time</p>
<p>默认：expires off</p>
<p>作用域：http，server，location，if in lacation</p>
<h3 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(txt|xml)$ &#123;</span><br><span class="line">	expires 24h;</span><br><span class="line">	root /opt/work/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于txt、html文件设置过期时间24小时。配置好之后再去访问这些配置了expires的文件，通过浏览器的开发工具观看，可以看到，第一次请求status是200，再次请求status就变成了304，说明读取了缓存。响应头就会出现如下信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: max-age&#x3D;86400</span><br><span class="line">TETag: &quot;5ee9b0ef-12d&quot;</span><br><span class="line">Expires: Sat, 20 Jun 2020 08:11:21 GMT</span><br><span class="line">Last-Modified: Wed, 17 Jun 2020 05:58:07 GMT</span><br></pre></td></tr></table></figure>

<h2 id="跨域访问处理"><a href="#跨域访问处理" class="headerlink" title="跨域访问处理"></a>跨域访问处理</h2><p>通过add_header可以在响应头中添加Access-Controller-Allow-Origin头信息来允许客户端实现跨域访问。</p>
<h3 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h3><p>配置：add_header name value;</p>
<p>作用域：http，server，location，if in location;</p>
<h3 id="配置示例-2"><a href="#配置示例-2" class="headerlink" title="配置示例"></a>配置示例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"><span class="meta">	#</span><span class="bash">允许跨域访问所有的域名，也可以指定域名如：http://www.baidu.com</span></span><br><span class="line">	add_header Access-Controller-Allow-Origin *;</span><br><span class="line"><span class="meta">	#</span><span class="bash">允许这些方法进行跨域访问</span></span><br><span class="line">	add_header Access-Controller-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class="line">	root /opt/work/html;</span><br><span class="line">	index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于跨域访问，也可以通过服务端的代码来实现，例如Java，golang等服务端语言都可以实现。</p>
<h2 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h2><p>防盗链可以防止网站的资源被盗用。nginx可以实现简单的防盗链功能。</p>
<h3 id="基于http-refer防盗链配置模块"><a href="#基于http-refer防盗链配置模块" class="headerlink" title="基于http_refer防盗链配置模块"></a>基于http_refer防盗链配置模块</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(txt|xml)$ &#123;</span><br><span class="line">	valid_referers none blocked *.maishuren.top maishuren.top server_names ~\.google\. ~\.baidu\.;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">    	return 403;</span><br><span class="line">    &#125;</span><br><span class="line">	gzip on;</span><br><span class="line">	gzip_http_version 1.1;</span><br><span class="line">	gzip_comp_level 1;</span><br><span class="line">	gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">	root  html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h1><p>在现实生活中，有着代购这一现象，就是我们通过代购来购买一些东西。同样的基于nginx的代理服务就是，客户端与服务段之间是通过nginx这一代理来完成请求和响应的。如图</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx_proxy.jpg" alt=""></p>
<p>nginx能都代理的服务有很多，而代理服务又有正向代理和反向代理</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx-proxy_detail.jpg" alt=""></p>
<h2 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h2><p>所谓正向代理就是顺着请求的方向进行的代理，即代理服务器他是由你配置为你服务，去请求目标服务器地址。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/eg_forward_proxy.jpg" alt=""></p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>所谓反向代理正好与正向代理相反，代理服务器是为目标服务器服务的，虽然整体的请求返回路线都是一样的都是Client到Proxy到Server。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/eg_reverse_proxy.jpg" alt=""></p>
<p>使用配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.xxx.com;            #外部访问的域名</span><br><span class="line">    location ~ /test.html$ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080;#代理转发</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">内部访问的服务</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/work/html;</span><br><span class="line">        index  index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缓冲区、重定向、头信息、超时配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.xxx.com;            #外部访问的域名</span><br><span class="line">    location ~ &#x2F;test.html$ &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;#代理转发</span><br><span class="line">        proxy_redirect default;</span><br><span class="line">        </span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header x-Real-IP $remote_addr;</span><br><span class="line">        </span><br><span class="line">        proxy_connect_timeout 30;</span><br><span class="line">        proxy_send_timeout 60;</span><br><span class="line">        proxy_read_timeout 60;</span><br><span class="line">        </span><br><span class="line">        proxy_buffer_size 32k;</span><br><span class="line">        proxy_buffering on;</span><br><span class="line">        proxy_buffers 4 128k;</span><br><span class="line">        proxy_busy_buffers_size 256k;</span><br><span class="line">        proxy_max_temp_file_size 256k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>proxy_redirect default;　</p>
<ul>
<li><p>没有重定向就配置成默认，除非后端返回301情况下设置成具体重定向地址　　</p>
<p>proxy_set_header Host $http_host;</p>
<p>proxy_set_header X-Real-IP $remote_addr;</p>
</li>
<li><p>设置字段重新定义或附加到传递给代理服务器的请求头</p>
</li>
</ul>
<p>proxy_connect_timeout 30;</p>
<ul>
<li>设置代理连接超时时间</li>
</ul>
<p>proxy_read_timeout 60;</p>
<ul>
<li><p>设置从代理服务器读取响应的超时时间</p>
<p>proxy_send_timeout 60;</p>
</li>
<li><p>设置向代理服务器发送请求的超时时间</p>
<p>proxy_buffering on;</p>
</li>
<li><p>设置启用或禁用来自代理服务器的响应缓冲</p>
</li>
</ul>
<p>proxy_buffer_size 32k;</p>
<ul>
<li>设置用于读取从代理服务器接收的响应的第一部分的缓冲区的大小</li>
</ul>
<p>proxy_buffers 4 128k</p>
<ul>
<li><p>设置用于从代理服务器读取响应的缓冲区的数量和大小，用于单个连接。</p>
<p>proxy_busy_buffers_size 256k;</p>
</li>
<li><p>设置当启用来自代理服务器的响应缓冲时，限制可能忙于向响应客户端发送响应的缓冲区的总大小，而响应尚未完全读取。</p>
</li>
</ul>
<p>proxy_max_temp_file_size 256k;</p>
<ul>
<li>设置当启用来自代理服务器的响应缓冲，并且整个响应不适合proxy_buffer_size和proxy_buffers指令设置的缓冲区时，响应的一部分可以保存到临时文件中。 该指令设置临时文件的最大大小。 一次写入临时文件的数据大小由proxy_temp_file_write_size指令设置。</li>
</ul>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><ol>
<li>Nginx负载均衡</li>
</ol>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx-load-banlance1.jpg" alt=""></p>
<ol start="2">
<li>GSLB(全局负载均衡)</li>
</ol>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/GSLB.jpg" alt=""></p>
<ul>
<li>调度中心节点：一个全局的调度节点；</li>
<li>调度节点：一个局部调度节点；</li>
<li>应用服务中心节点：一个全局的应用服务调度节点；</li>
<li>应用服务：一个局部应用服务节点；</li>
<li>调度中心节点管理着调度节点；</li>
<li>应用服务中心节点管理着应用服务；</li>
</ul>
<ol start="3">
<li>SLB负载均衡</li>
</ol>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx4.png" alt=""></p>
<p>调度节点与服务节点处于一个逻辑单元里面，这样对于部分服务的实时性，影响性非常好。Nginx就是使用SLB负载均衡</p>
<ol start="4">
<li><p>四层负载均衡</p>
<p>按照OSI网络模型中，第四层是传输层，传输层支持tcp/ip协议，所以只需要转发tcp/ip协议包，就可以实现负载均衡。性能十分好，只需要在最底层应用处理，不需要进行复杂的逻辑，只需要转发包就行了。</p>
</li>
</ol>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/network/OSI.jpg" alt=""></p>
<p>5.七层负载均衡</p>
<p>如上图的OSI模型，七层负载均衡主要是在应用层使用，所以它可以完成很多应用层的协议请求，比如HTTP协议的负载均衡，它可以实现HTTP信息的改写，头信息的改写，应用规则的控制。Nginx就是典型的七层负载均衡SLB。</p>
<h2 id="nginx负载均衡的配置"><a href="#nginx负载均衡的配置" class="headerlink" title="nginx负载均衡的配置"></a>nginx负载均衡的配置</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/upstream.jpg" alt=""></p>
<p>在conf.d文件夹下新建三个server配置文件：server1.conf、server2.conf、server3.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">server1.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/work/html;</span><br><span class="line">        index  server1.html server1.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">server2.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8081;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/work/html;</span><br><span class="line">        index  server2.html server2.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">server3.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       8082;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /opt/work/html;</span><br><span class="line">        index  server3.html server3.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主配置文件nginx.conf中配置，默认是使用轮询策略</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">        server 192.168.74.129:8080;</span><br><span class="line">        server 192.168.74.129:8081;</span><br><span class="line">        server 192.168.74.129:8082;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.maishuren.com;</span><br><span class="line">    resolver  8.8.8.8;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://imotestoc;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后端服务器在负载均衡调度中的状态</p>
<p>down：当前的server暂时不参与负载均衡</p>
<p>backup：预留的备份服务器</p>
<p>max_fails：允许请求失败的次数</p>
<p>fail_timeout：经过max_fails失败后，服务暂停的时间</p>
<p>max_conns：限制最大的接收连接数</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">	server 192.168.74.129:8080 down;</span><br><span class="line">    server 192.168.74.129:8081 backup;</span><br><span class="line">    server 192.168.74.129:8082 max_fails&#x3D;1 fail_timeout&#x3D;30s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.maishuren.com;</span><br><span class="line">    resolver  8.8.8.8;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;imotestoc;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="nginx负载均衡算法"><a href="#nginx负载均衡算法" class="headerlink" title="nginx负载均衡算法"></a>nginx负载均衡算法</h2><p>轮询：按时间顺序逐一分配到不同的后端服务器</p>
<p>加权轮询：weight值越大，分配到的访问几率越高</p>
<p>ip_hash：每个请求按照访问的IP的hash结果分配，这样来自同一个IP的访问就会固定访问一个后端服务器</p>
<p>url_hash：按照访问的URL的hash结果来分配服务器，是每个URL定向到同一个后端服务器</p>
<p>hash关键数值：hash自定义的key</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">	#ip_hash;</span><br><span class="line">	#hash $request_uri</span><br><span class="line">	server 192.168.74.129:8080;</span><br><span class="line">    server 192.168.74.129:8081 weight&#x3D;2;</span><br><span class="line">    server 192.168.74.129:8082 weight&#x3D;5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">include &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;*.conf;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.maishuren.com;</span><br><span class="line">    resolver  8.8.8.8;</span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;imotestoc;</span><br><span class="line">        proxy_redirect default;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="动态缓存"><a href="#动态缓存" class="headerlink" title="动态缓存"></a>动态缓存</h1><h2 id="nginx缓存服务"><a href="#nginx缓存服务" class="headerlink" title="nginx缓存服务"></a>nginx缓存服务</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx5.jpg" alt=""></p>
<p>上图描述的很清楚，当nginx开启了缓存服务时，可以缓存服务端的数据，提高响应效率</p>
<h2 id="配置语法-1"><a href="#配置语法-1" class="headerlink" title="配置语法"></a>配置语法</h2><p><strong>proxy_cache_path配置语法</strong></p>
<p>配置: proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</p>
<p>默认: —</p>
<p>作用域: http </p>
<p><strong>proxy_cache配置语法</strong></p>
<p>配置: proxy_cache <em>zone</em> | off;</p>
<p>默认: proxy_cache off;</p>
<p>作用域: http, server, location</p>
<p><strong>proxy_cache_valid配置语法</strong></p>
<p>Syntax: proxy_cache_valid [<em>code</em> …] <em>time</em>;</p>
<p>Default: —</p>
<p>Context: http, server, location</p>
<p><strong>proxy_cache_key配置语法</strong></p>
<p>配置: proxy_cache_key <em>string</em>;</p>
<p>默认: proxy_cache_key $scheme$proxy_host$request_uri;</p>
<p>作用域: http, server, location</p>
<h2 id="配置实例"><a href="#配置实例" class="headerlink" title="配置实例"></a>配置实例</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream test &#123;</span><br><span class="line">        server 192.168.74.129:8080;</span><br><span class="line">        server 192.168.74.129:8081;</span><br><span class="line">        server 192.168.74.129:8082;</span><br><span class="line">&#125;</span><br><span class="line">    #需要首先配置 缓存目录，文件目录层级2级，空间名字 10m大小，目录最大大小(超过启动nginx自己的淘汰规则)，在60分钟的时间内没有被访问就会被清理，存放临时文件</span><br><span class="line">    proxy_cache_path /opt/app/cache levels=1:2 keys_zone=nginx_cache:10m max_size=10g inactive=60m use_temp_path=off;</span><br><span class="line"> </span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost www.maishuren.com;</span><br><span class="line">    </span><br><span class="line">    #如果url中包含以下路径参数，那么 cookie_nocache 的值为1-----1.设置某些访问路径不缓存</span><br><span class="line">    if($request_uri ~^/(url3|login|register|password\/reset))&#123;</span><br><span class="line">        set $cookie_nocache 1;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_cache off;  #开启缓存，imooc_cache对应上面keys_zone=imooc_cache:10m ；关闭off</span><br><span class="line">        proxy_pass http://test;</span><br><span class="line">        proxy_cache_valid 200 304 12h; #200和304头信息过期时间12小时</span><br><span class="line">        proxy_cache_valid any 10m;  #其他过期时间10分钟</span><br><span class="line">        proxy_cache_key $host$uri$is_args$args; #定义缓存的key</span><br><span class="line">        add_header  Nginx-Cache "$upstream_cache_status";#增加一个头信息</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        #部分不设置缓存 cookie_nocache上面配置的参数</span><br><span class="line">        #cookie_nocache不为0或者空那么是不会进行缓存的-----2.设置某些访问路径不缓存</span><br><span class="line">        proxy_no_cache $cookie_nocache $arg_nocache $arg_comment;</span><br><span class="line">        proxy_no_cache $http_pragma $http_authorization;</span><br><span class="line"> </span><br><span class="line"><span class="meta"> 		#</span><span class="bash"> 一个服务报错请求下一个</span></span><br><span class="line">        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; </span><br><span class="line">        include proxy_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h1><ol>
<li>启动一个tomcat，并编写一个index.jsp</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.util.*"</span> pageEncoding=<span class="string">"utf-8"</span>%&gt;  </span><br><span class="line">&lt;HTML&gt;</span><br><span class="line">    &lt;HEAD&gt;</span><br><span class="line">        &lt;TITLE&gt;JSP Test Page&lt;/TITLE&gt;</span><br><span class="line">    &lt;/HEAD&gt;</span><br><span class="line">    &lt;BODY&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">            out.println(<span class="string">"&lt;h1&gt;Random number:&lt;/h1&gt;"</span>);</span><br><span class="line">            out.println(rand.nextInt(<span class="number">99</span>)+<span class="number">100</span>);</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/BODY&gt;</span><br><span class="line">&lt;/HTML&gt;</span><br></pre></td></tr></table></figure>



<ol>
<li>编写nginx的html页面</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试动静分离<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>  </span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;  </span></span><br><span class="line"><span class="actionscript">        type: <span class="string">"GET"</span>,  </span></span><br><span class="line"><span class="actionscript">        url: <span class="string">"http://www.maishuren.com/java_test.jsp"</span>,</span></span><br><span class="line"><span class="actionscript">        success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#get_data"</span>).html(data)</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        error: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;  </span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">"fail!!!,请刷新再试!"</span>);  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>测试动静分离<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.maishuren.com/img/nginx.png"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"get_data"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置nginx配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream java_api&#123;</span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost www.maishuren.com;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line">    root /opt/app/code;  </span><br><span class="line"></span><br><span class="line">    location ~ \.jsp$ &#123;</span><br><span class="line">    	#转去请求动态资源的服务器</span><br><span class="line">        proxy_pass http://java_api;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    location ~ \.(jpg|png|gif)$ &#123;</span><br><span class="line">        expires 1h;</span><br><span class="line">        gzip on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /&#123;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504 404  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置了动静分离这样可以减轻服务端的压力，当在只请求静态资源的时候，直接通过中间件就可以获取静态资源，不需要通过程序框架和逻辑再去获取。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十四：golang中的面向对象</title>
    <url>/posts/golang/2020/06/202006182355.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Go语言中的面向对象"><a href="#Go语言中的面向对象" class="headerlink" title="Go语言中的面向对象"></a>Go语言中的面向对象</h1><ul>
<li><p>面向对象是一种思想,到目前为止还没有一个非常明确的定义,老程序员在不同时期对面向对象的理解是不同的.Go语言中对面向对象有着自己的理解</p>
<blockquote>
<p>Although there is no universally accepted definition of object-oriented programming, for our purposes, an object is simply a value or variable that has methods , and a method is a function assiociated with a particular type.</p>
</blockquote>
</li>
<li><p>通过上面解释看出了Go语言开发者认为:面向对象就是特定类型(结构体)有这自己的方法,利用这个方法完成面向对象编程,并没有提封装、继承、多态.所有Go语言进行面向对象编程时,重点在于灵活使用方法.Go语言通过这样的设计降低了语言学习的压力.</p>
</li>
<li><p>Go语言有着自己对面向对象的理解,他也有着自己的封装、继承、多态</p>
</li>
</ul>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><ul>
<li>封装主要体现在两个方面:封装数据、封装业务</li>
<li>Go语言中通过首字母大小控制访问权限.属性首字母小写对外提供访问方法是封装数据最常见的实现方式</li>
<li>可以通过方法封装业务<ul>
<li>提出方法是封装</li>
<li>控制结构体属性访问,对外提供访问方法也是封装</li>
</ul>
</li>
<li>在面向对象中封装的好处:<ul>
<li>安全性.结构体属性访问受到限制,必须按照特定访问渠道</li>
<li>可复用性,封装的方法实现可复用性</li>
<li>可读写,多段增加代码可读性</li>
</ul>
</li>
</ul>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ul>
<li>Go语言同包任意位置可以访问全局内容,封装控制可以控制包外访问结构体中数据<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span> <span class="comment">//姓名</span></span><br><span class="line">	age  <span class="keyword">int</span>    <span class="comment">//体重.单位斤</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	p.name = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> p.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">SetAge</span><span class="params">(age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	p.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">GetAge</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> p.age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>封装业务就是根据自己的需求提取代码,使用Go语言标准库中的函数过程就属性封装业务(代码)</li>
</ul>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul>
<li>按照传统面向对象思想,继承就是把同一类事物提出共同点为父类,让子类可以复用父类的可访问性内容.</li>
<li>继承有多种实现方式<ul>
<li>通过关键字继承,强耦合实现方式</li>
<li>组合式继承,松耦合继承方式</li>
</ul>
</li>
<li>使用过Java或C#的应该知道尽量少用继承而是使用组合代替继承,可以使用高内聚,低耦合.Java之父之前在一次采访的时候也说过,如果给他一次机会重新做Java,他最希望修改的地方就是继承</li>
<li>Go语言中的继承是通过组合实现</li>
</ul>
<h2 id="匿名属性"><a href="#匿名属性" class="headerlink" title="匿名属性"></a>匿名属性</h2><ul>
<li>在Go语言中支持匿名属性(结构体中属性名字),但是每个最多只能存在匿名属性.编译器认为类型就是属性名,我们在使用时就把类型当作属性名进行使用<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="keyword">string</span></span><br><span class="line">	<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	p:=People&#123;<span class="string">"msr"</span>,<span class="number">22</span>&#125;</span><br><span class="line">	fmt.Println(p.<span class="keyword">string</span>,p.<span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="结构体之间的关系"><a href="#结构体之间的关系" class="headerlink" title="结构体之间的关系"></a>结构体之间的关系</h2><ul>
<li>传统面向对象中类与类之间的关系<ul>
<li>继承:is-a,强耦合性,一般认为类与类之间具有强关系</li>
<li>实现:like-a,接口和实现类之间的关系</li>
<li>依赖:use-a,具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A,一般作为方法参数</li>
<li>关联:has-a一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的</li>
<li>聚合:has-a,整体与部分、拥有的关系</li>
<li>组合:contains-a,他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束</li>
<li>组合&gt;聚合&gt;关联&gt;依赖</li>
</ul>
</li>
<li>Go语言中标准的组合关系<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">	peo       People</span><br><span class="line">	classroom <span class="keyword">string</span> <span class="comment">//班级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	teacher := Teacher&#123;People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;, <span class="string">"302教室"</span>&#125;</span><br><span class="line">	<span class="comment">//必须通过包含的变量名调用另一个结构体中内容</span></span><br><span class="line">	fmt.Println(teacher.classroom, teacher.peo.age, teacher.peo.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="使用匿名属性完成Go语言中的继承"><a href="#使用匿名属性完成Go语言中的继承" class="headerlink" title="使用匿名属性完成Go语言中的继承"></a>使用匿名属性完成Go语言中的继承</h2><ul>
<li>Go语言中的继承很好实现,把另一个结构体类型当作另一个结构体的属性,可以直接调用另一个结构体中的内容</li>
<li>因为Go语言中结构体不能相互转换,所以不能把子结构体变量赋值给父结构体变量<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span> &#123;</span><br><span class="line">	People</span><br><span class="line">	classroom <span class="keyword">string</span> <span class="comment">//班级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	teacher := Teacher&#123;People&#123;<span class="string">"msr"</span>, <span class="number">22</span>&#125;, <span class="string">"302教室"</span>&#125;</span><br><span class="line">	fmt.Println(teacher.classroom, teacher.age, teacher.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ul>
<li><p>接口解释:接口是一组行为规范的定义.</p>
</li>
<li><p>接口中只能有方法声明,方法只能有名称、参数、返回值,不能有方法体</p>
</li>
<li><p>每个接口中可以有多个方法声明,结构体把接口中 <strong>所有</strong> 方法都重写后,结构体就属于接口类型</p>
</li>
<li><p>Go语言中接口和结构体之间的关系是传统面向对象中is-like-a的关系</p>
</li>
<li><p>定义接口类型关键字是interface</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口名 <span class="keyword">interface</span>&#123;</span><br><span class="line">  方法名(参数列表) 返回值列表</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口可以继承接口,且Go语言推荐把接口中方法拆分成多个接口</p>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>接口中声明完方法,结构体重写接口中方法后,编译器认为结构体实现了接口<ul>
<li>重写的方法要求必须和接口中方法名称、方法参数(参数名称可以不同)、返回值列表完全相同<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">	run(run <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">run</span><span class="params">(run <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"正在跑步,跑了,"</span>, run, <span class="string">"米"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := People&#123;<span class="string">"张三"</span>, <span class="number">17</span>&#125;</span><br><span class="line">	peo.run(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>如果接口中有多个方法声明,接口体必须重写接口中全部方法才任务结构体实现了接口<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">	run(run <span class="keyword">int</span>)</span><br><span class="line">	eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">run</span><span class="params">(run <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"正在跑步,跑了,"</span>, run, <span class="string">"米"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"正在吃饭"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := People&#123;<span class="string">"张三"</span>, <span class="number">17</span>&#125;</span><br><span class="line">	peo.run(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接口可以继承接口(组合),上面代码可以改写成下面代码</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">	run(run <span class="keyword">int</span>)</span><br><span class="line">	Eat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Eat <span class="keyword">interface</span> &#123;</span><br><span class="line">	eat()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">run</span><span class="params">(run <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"正在跑步,跑了,"</span>, run, <span class="string">"米"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"正在吃饭"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := People&#123;<span class="string">"张三"</span>, <span class="number">17</span>&#125;</span><br><span class="line">	peo.run(<span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><ul>
<li>多态:同一件事情由于条件不同产生的结果不同</li>
<li>由于Go语言中结构体不能相互转换,所以没有结构体(父子结构体)的多态,只有基于接口的多态.这也符合Go语言对面向对象的诠释</li>
<li>多态在代码层面最常见的一种方式是接口当作方法参数</li>
</ul>
<h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li><p>结构体实现了接口的全部方法,就认为结构体属于接口类型,这是可以把结构体变量赋值给接口变量</p>
</li>
<li><p>重写接口时接收者为<code>Type</code>和<code>*Type</code>的区别</p>
<ul>
<li><code>*Type</code>可以调用<code>*Type</code>和<code>Type</code>作为接收者的方法.所以只要接口中多个方法中至少出现一个使用<code>*Type</code>作为接收者进行重写的方法,就必须把结构体指针赋值给接口变量,否则编译报错</li>
<li><code>Type</code>只能调用<code>Type</code>作为接收者的方法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">	run()</span><br><span class="line">	eat()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"正在跑步"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p People)</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(p.name, <span class="string">"在吃饭"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//重写接口时</span></span><br><span class="line">	<span class="keyword">var</span> run Live = &amp;People&#123;<span class="string">"张三"</span>&#125;</span><br><span class="line">	run.run()</span><br><span class="line">	run.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>既然接口可以接收实现接口所有方法的结构体变量,接口也就可以作为方法(函数)参数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Live <span class="keyword">interface</span> &#123;</span><br><span class="line">	run()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> Animate <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"人在跑"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animate)</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"动物在跑"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sport</span><span class="params">(live Live)</span></span> &#123;</span><br><span class="line">	fmt.Println(live.run)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo := &amp;People&#123;&#125;</span><br><span class="line">	peo.run() <span class="comment">//输出:人在跑</span></span><br><span class="line">	ani := &amp;Animate&#123;&#125;</span><br><span class="line">	ani.run() <span class="comment">//输出:动物在跑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h1><ul>
<li><p>只要实现了接口的全部方法认为这个类型属于接口类型,如果编写一个接口,这个接口中没有任何方法,这时认为所有类型都实现了这个接口.所以Go语言中<code>interface{}</code>代表任意类型</p>
</li>
<li><p>如果<code>interface{}</code>作为方法参数就可以接收任意类型,但是在程序中有时有需要知道这个参数到底是什么类型,这个时候就需要使用断言</p>
</li>
<li><p>断言使用时使用interface{}变量点括号,括号中判断是否属于的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">i <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">i.(Type)</span><br></pre></td></tr></table></figure></li>
<li><p>断言的两大作用:</p>
<ul>
<li>判断是否是指定类型</li>
<li>把interface{}转换为特定类型<h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2></li>
</ul>
</li>
<li><p>断言可以有一个返回值,如果判断结果是指定类型返回变量值,如果不是指定类型报错</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;</span><br><span class="line">	result:=i.(<span class="keyword">int</span>)</span><br><span class="line">	fmt.Println(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	参数是456时,程序运行正常,输出:</span></span><br><span class="line"><span class="comment">		456</span></span><br><span class="line"><span class="comment">	参数是false时报错：</span></span><br><span class="line"><span class="comment">		panic: interface conversion: interface &#123;&#125; is bool, not int</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	demo(<span class="number">456</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>断言也可以有两个返回值,这时无论是否是指定类型都不报错.</p>
<ul>
<li>第一个参数:<ul>
<li>如果正确:返回值变量值</li>
<li>如果错误:返回判断类型的默认值</li>
</ul>
</li>
<li>第二个参数:<ul>
<li>返回值为bool类型,true表示正确,false表示错误<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	result, ok := i.(<span class="keyword">int</span>)</span><br><span class="line">	fmt.Println(result, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	参数是456时,程序运行正常,输出:</span></span><br><span class="line"><span class="comment">		456	true</span></span><br><span class="line"><span class="comment">	参数是字符串"abc"时程序运行正常,输出:</span></span><br><span class="line"><span class="comment">		0 false</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	demo(<span class="string">"abc"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十三：结构体</title>
    <url>/posts/golang/2020/06/202006182349.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><ul>
<li>结构体解释:将一个或多个变量组合到一起,形成新的类型.这个类型就是结构体</li>
<li>Go语言中的结构体和C++结构体有点类似,而Java或C#中类本质就是结构体</li>
<li>结构体是值类型</li>
<li>结构体定义语法<ul>
<li>通过语法可以看出,Go语言发明者明确认为结构体就是一种自定义类型<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 结构体名称 <span class="keyword">struct</span>&#123;</span><br><span class="line">  名称 类型<span class="comment">//成员或属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li><p>定义结构体</p>
<ul>
<li>结构体可以定义在函数内部或函数外部(与普通变量一样),定义位置影响到结构体的访问范围</li>
<li>如果结构体定义在函数外面,结构体名称首字母是否大写影响到结构体是否能跨包访问</li>
<li>如果结构体能跨包访问,属性首字母是否大写影响到属性是否跨包访问<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">	Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>声明结构体变量</p>
<ul>
<li>由于结构体是值类型,所以声明后就会开辟内存空间</li>
<li>所有成员为类型对应的初始值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> peo People</span><br><span class="line">fmt.Print(peo)<span class="comment">//输出:&#123;0 &#125;</span></span><br><span class="line">fmt.Printf(<span class="string">"%p"</span>,&amp;peo)<span class="comment">//会打印内存地址值</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>可以直接给结构体多个属性赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> peo People</span><br><span class="line"><span class="comment">//按照结构体中属性的顺序进行赋值,可以省略属性名称</span></span><br><span class="line">peo = People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line">fmt.Println(peo)</span><br><span class="line"><span class="comment">//明确指定给哪些属性赋值.可以都赋值,也可以只给其中一部分赋值</span></span><br><span class="line">peo = People&#123;Age: <span class="number">18</span>, Name: <span class="string">"maishuren"</span>&#125;</span><br><span class="line">fmt.Println(peo)</span><br></pre></td></tr></table></figure></li>
<li><p>也可以通过结构体变量名称获取到属性进行赋值或查看</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> peo People</span><br><span class="line">peo.Name=<span class="string">"msr"</span></span><br><span class="line">peo.Age=<span class="number">17</span></span><br><span class="line">fmt.Println(peo)</span><br><span class="line">fmt.Println(peo.Name)</span><br><span class="line">fmt.Println(peo.Age)</span><br></pre></td></tr></table></figure>
<h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2></li>
<li><p>双等(==)判断结构体中内容是否相等</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p1 := People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line">p2 := People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%p %p\n"</span>, &amp;p1, &amp;p2) <span class="comment">//输出地址不同</span></span><br><span class="line">fmt.Println(p1 == p2)           <span class="comment">//输出:true</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h1><ul>
<li>由于结构体是值类型,在方法传递时希望传递结构体地址,可以使用时结构体指针完成</li>
<li>可以结合new(T)函数创建结构体指针<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">peo := <span class="built_in">new</span>(People)</span><br><span class="line"><span class="comment">//因为结构体本质是值类型,所以创建结构体指针时已经开辟了内存空间</span></span><br><span class="line">fmt.Println(peo == <span class="literal">nil</span>) <span class="comment">//输出:false</span></span><br><span class="line"><span class="comment">//由于结构体中属性并不是指针类型,所以可以直接调用</span></span><br><span class="line">peo.Name = <span class="string">"msr"</span></span><br><span class="line">fmt.Println(peo)<span class="comment">//输出:&amp;&#123;msr 0&#125;</span></span><br><span class="line">peo1:=peo</span><br><span class="line">peo1.Name=<span class="string">"maishuren"</span></span><br><span class="line">fmt.Println(peo1,peo)<span class="comment">//输出:&amp;&#123;maishuren 0&#125; &amp;&#123;maishuren 0&#125;</span></span><br></pre></td></tr></table></figure></li>
<li>如果不想使用new(T)函数,可以直接声明结构体指针并赋值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明结构体指针</span></span><br><span class="line"><span class="keyword">var</span> peo *People</span><br><span class="line"><span class="comment">//给结构体指针赋值</span></span><br><span class="line">peo = &amp;People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">上面代码使用短变量方式如下</span></span><br><span class="line"><span class="comment">peo:= &amp;People&#123;"msr", 17&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">fmt.Println(peo)</span><br></pre></td></tr></table></figure>
<h2 id="判断-1"><a href="#判断-1" class="headerlink" title="判断"></a>判断</h2></li>
<li>结构体指针比较的是地址</li>
<li>(*结构体指针)取出地址中对应的值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">p1 := People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line">p2 := People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%p %p\n"</span>, &amp;p1, &amp;p2) <span class="comment">//输出地址不同</span></span><br><span class="line">fmt.Println(p1 == p2)           <span class="comment">//输出:true</span></span><br><span class="line"></span><br><span class="line">p3 := <span class="built_in">new</span>(People)</span><br><span class="line">p3 = &amp;People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line"><span class="comment">//结构体变量不能和指针比较,使用*指针取出地址中值</span></span><br><span class="line">fmt.Println(p1 == *p3) <span class="comment">//输出:true</span></span><br><span class="line"></span><br><span class="line">p4 := &amp;People&#123;<span class="string">"msr"</span>, <span class="number">17</span>&#125;</span><br><span class="line"><span class="comment">//指针比较的是地址</span></span><br><span class="line">fmt.Println(p3 == p4) <span class="comment">//输出:false</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ul>
<li><p>方法和函数语法比较像,区别是函数属于包,通过包调用函数,而方法属于结构体,通过结构体变量调用</p>
</li>
<li><p>默认是函数,隶属于包,所以需要添加标识.告诉编译器这个方法属性哪个结构体</p>
<ul>
<li>调用方法时就把调用者赋值给接收者(下面的变量名就是接受者)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(变量名 结构体类型)</span> 方法名<span class="params">(参数列表)</span> 返回值列表</span>&#123;</span><br><span class="line">  <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Go语言中已经有函数了,又添加了对方法的支持主要是保证Go语言是面向对象的.Go语言官方对面向对象的解释</p>
<ul>
<li>翻译如下:虽然面向对象没有统一的定义，但是对于我们来说对象仅仅是一个有着方法的值或变量,而方法就是一个属于特定类型的函数</li>
</ul>
<p><img src="images/2_7_3_method.png" alt=""></p>
</li>
<li><p>从上面的解释可以看出,官方给出可明确说明,方法类似于函数.方法归属于特定类型</p>
</li>
</ul>
<h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>定义一个People类型结构体,在对People结构体定义个run()方法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span><span class="comment">//姓名</span></span><br><span class="line">	Weight	<span class="keyword">float64</span><span class="comment">//体重.单位斤</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p People)</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(p.Name,<span class="string">"正在跑步"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo:=People&#123;<span class="string">"张三"</span>,<span class="number">17</span>&#125;</span><br><span class="line">	peo.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果设定需求,在每次跑步后体重都减少0.1斤.上面代码就需要修改了.因为结构体是值类型,修改方法中结构体变量p的值,主函数中peo的值不会改变,因为传递的是值副本.所以修改方法中结构体类型为结构体指针类型就可以完成设定需求<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name <span class="keyword">string</span><span class="comment">//姓名</span></span><br><span class="line">	Weight	<span class="keyword">float64</span><span class="comment">//体重.单位斤</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(p.Name,<span class="string">"正在跑步,体重为:"</span>,p.Weight)<span class="comment">//输出:张三 正在跑步,体重为: 17</span></span><br><span class="line">	p.Weight-=<span class="number">0.1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	peo:=&amp;People&#123;<span class="string">"张三"</span>,<span class="number">17</span>&#125;</span><br><span class="line">	peo.run()</span><br><span class="line">	fmt.Println(peo.Name,<span class="string">"跑完步后的体重是"</span>,peo.Weight)<span class="comment">//输出:张三 跑完步后的体重是 16.9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十二：值传递和引用传递</title>
    <url>/posts/gloang/2020/06/202006182347.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li>讨论值传递和引用传递时,其实就是看值类型变量和引用类型变量作为函数参数时,修改形参是否会影响到实参</li>
<li>在Go语言中五个引用类型变量,其他都是值类型<ul>
<li>slice</li>
<li>map</li>
<li>channel</li>
<li>interface</li>
<li>func()</li>
</ul>
</li>
<li>引用类型作为参数时,称为浅拷贝,形参改变,实参数跟随变化.因为传递的是地址,形参和实参都指向同一块地址</li>
<li>值类型作为参数时,称为深拷贝,形参改变,实参不变,因为传递的是值的副本,形参会新开辟一块空间,与实参指向不同</li>
<li>如果希望值类型数据在修改形参时实参跟随变化,可以把参数设置为指针类型</li>
</ul>
<h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><ul>
<li>值类型作为参数代码演示<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i <span class="keyword">int</span>, s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	i = <span class="number">5</span></span><br><span class="line">	s = <span class="string">"改变"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">1</span></span><br><span class="line">	s := <span class="string">"原值"</span></span><br><span class="line">	demo(i, s)</span><br><span class="line">	fmt.Println(i, s) <span class="comment">//输出:1 原值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>引用传递代码示例<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(arg []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   arg[<span class="built_in">len</span>(arg)<span class="number">-1</span>] = <span class="number">110</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">   demo(s)</span><br><span class="line">   fmt.Println(s) <span class="comment">//输出:[1 2 110]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果希望值类型实参跟随形参变化,可以把值类型指针作为参数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//行参指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i *<span class="keyword">int</span>, s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">//需要在变量前面带有*表示指针变量</span></span><br><span class="line">   *i = <span class="number">5</span></span><br><span class="line">   s = <span class="string">"改变"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   i := <span class="number">1</span></span><br><span class="line">   s := <span class="string">"原值"</span></span><br><span class="line">   <span class="comment">//注意此处第一个参数是i的地址,前面&amp;</span></span><br><span class="line">   <span class="comment">//s保留为值类型</span></span><br><span class="line">   demo(&amp;i, s)</span><br><span class="line">   fmt.Println(i, s) <span class="comment">//输出:5 原值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十一：包的访问权限、变量作用域、闭包</title>
    <url>/posts/golang/2020/06/202006182343.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="包概述"><a href="#包概述" class="headerlink" title="包概述"></a>包概述</h1><ul>
<li>包(package)是Go语言中组织单元.包是逻辑上的分组.而物理上的分组是不同的文件夹,文件夹和包一般是对应的</li>
<li>把多个文件放入同一个文件夹中,这些文件就是在同一个包中.</li>
<li>虽然允许源码文件的package和文件夹名不同但是最终编译后都会把文件的package编译成文件夹名称.所以为防止错误最好把文件的package和文件夹名称设置成相同的</li>
<li>一个Go语言项目必须要有main包,其他自定义名称的包个数任意,根据自己的需求即可.</li>
<li>Go语言在寻找包时会从GOPATH/src 路径中寻找包,如果不存在去GOROOT/src(Go语言标准库源码所在文件夹)下找</li>
<li>不同包下资源可以相互访问,在导入其他包后,可以访问包下首字母大写的内容</li>
<li>同包下不同文件中全局资源可以随意访问</li>
</ul>
<h1 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h1><ul>
<li>新建项目后在项目下新建src文件夹,在src文件夹中新建demo文件</li>
<li>在demo文件中新建demo1.go和demo2.go文件</li>
<li>demo1.go文件源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo<span class="comment">//包为demo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">"执行demo1"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>demo2.go文件源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo<span class="comment">//包为demo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Demo2</span><span class="params">()</span></span>  &#123;<span class="comment">//函数名大写才能被其他包访问</span></span><br><span class="line">	fmt.Println(<span class="string">"执行demo2"</span>)</span><br><span class="line">	demo1()<span class="comment">//同包下内容任意访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在项目根目录下新建main.go,源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"demo"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	demo.Demo2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行整个项目后,发现可以正常调用Demo2()函数</li>
<li>整个程序目录结构如下<br><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/project.png" alt=""></li>
</ul>
<h1 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h1><ul>
<li>变量声明位置决定了变量的可访问范围(哪里能调用到变量)</li>
<li>Go语言中变量的有效范围如下<ul>
<li>函数级别:变量声明在函数内部,只有在函数内部才能访问,称变量为局部变量</li>
<li>package 包级别,在当前包下都可以访问.称变量为全局变量.变量声明在函数外面</li>
<li>应用级别,在整个应用下任何包内都可以访问.通过首字母大小写控制</li>
</ul>
</li>
</ul>
<h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><ul>
<li>局部变量一定是在函数内部</li>
<li>在哪个{}内部声明,只能在哪个{}内部访问<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">2</span> <span class="comment">//从此处开始到test1结束&#125;任何位置都能调用i</span></span><br><span class="line">	<span class="keyword">if</span> i&gt;=<span class="number">2</span>&#123;</span><br><span class="line">		j:=<span class="number">3</span></span><br><span class="line">		fmt.Println(i+j)<span class="comment">//此处可以访问i</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line">	<span class="comment">//fmt.Println(j)//此处不能调用j,超出声明j时&#123;&#125;外</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(i) <span class="comment">//此处无法调用test1()中的i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2></li>
<li>全局变量声明到函数外部,整个包都可以访问</li>
<li>如果全局变量首字母大写,跨包也可以访问.</li>
<li>声明全局变量时规范是<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	变量名</span><br><span class="line">	变量名=值</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>全局变量代码示例<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	name = <span class="string">"smallming"</span></span><br><span class="line">	age  = <span class="number">17</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span> &#123;</span><br><span class="line">  	fmt.Println(<span class="string">"名字:"</span>,name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo2</span><span class="params">()</span></span> &#123;</span><br><span class="line">  	fmt.Println(<span class="string">"年龄:"</span>,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="闭包概述"><a href="#闭包概述" class="headerlink" title="闭包概述"></a>闭包概述</h1><ul>
<li>闭包不是Go语言独有的概念,在很多编程语言中都有闭包</li>
<li>闭包就是解决局部变量不能被外部访问一种解决方案</li>
<li>是把函数当作返回值的一种应用</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ul>
<li>总体思想为:在函数内部定义局部变量,把另一个函数当作返回值,局部变量对于返回值函数就相当于全局变量,所以多次调用返回值函数局部变量的值跟随变化<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//res其实就是test1返回值函数,和之前匿名函数变量一个道理</span></span><br><span class="line">	res := test1()</span><br><span class="line">	fmt.Println(res()) <span class="comment">//输出2</span></span><br><span class="line">	fmt.Println(res()) <span class="comment">//输出3</span></span><br><span class="line">	fmt.Println(res()) <span class="comment">//输出4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意此处,返回值类型是func int</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	i := <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		i = i + <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>如果重新调用test1()会重新声明及赋值局部变量i<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := test1()</span><br><span class="line">	fmt.Println(<span class="string">"f的地址"</span>, f) <span class="comment">//输出匿名函数地址</span></span><br><span class="line">	fmt.Println(<span class="string">"f:"</span>, f()) <span class="comment">//调用匿名函数输出2</span></span><br><span class="line">	fmt.Println(<span class="string">"f:"</span>, f()) <span class="comment">//调用匿名函数输出3</span></span><br><span class="line">	k := test1()</span><br><span class="line">	fmt.Println(<span class="string">"k的地址"</span>, k) <span class="comment">//输出匿名函数地址,与f相等</span></span><br><span class="line">	fmt.Println(<span class="string">"k:"</span>, k()) <span class="comment">//调用匿名函数输出2</span></span><br><span class="line">	fmt.Println(<span class="string">"f:"</span>, f()) <span class="comment">//输出:4</span></span><br><span class="line">	fmt.Println(<span class="string">"k:"</span>, k()) <span class="comment">//输出:3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test1</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	i := <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		i++</span><br><span class="line">		<span class="comment">// 每调用一次test1()输出的地址不一样</span></span><br><span class="line">		fmt.Println(<span class="string">"i的地址:"</span>, &amp;i)</span><br><span class="line">		<span class="keyword">return</span> i</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习十：函数</title>
    <url>/posts/golang/2020/06/202006182334.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>函数:一段代码块</li>
<li>所有的流程控制代码和业务代码都只能写在函数内部</li>
<li>为什么使用函数:<ul>
<li>把一个功能提出作为一个函数便于后期维护,结构清晰</li>
</ul>
</li>
<li>函数声明的语法<ul>
<li>函数声明后不会执行,必须调用后才会执行<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span> 返回值</span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>函数调用的语法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">返回值:=函数名(参数)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="无参数无返回值函数"><a href="#无参数无返回值函数" class="headerlink" title="无参数无返回值函数"></a>无参数无返回值函数</h1><ul>
<li><p>函数可以有参数也可以没有参数,可以有返回值也可以没有返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	demo1()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">"执行demo1函数"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码等同于</span></span><br><span class="line"><span class="comment">//func main()&#123;</span></span><br><span class="line"><span class="comment">//	fmt.Println("执行demo1函数")</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>
<h1 id="有参数函数"><a href="#有参数函数" class="headerlink" title="有参数函数"></a>有参数函数</h1></li>
<li><p>函数的参数可以有多个,且每个参数类型都可以不同</p>
</li>
<li><p>参数表示调用函数方想要给函数内部传递的值,给函数使用的.</p>
</li>
<li><p>声明函数时的参数叫做形参数,调用函数时参数叫做实参</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i:=<span class="number">5</span></span><br><span class="line">	s:=<span class="string">"msr"</span></span><br><span class="line">	show(s,i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(name <span class="keyword">string</span>,age <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">"姓名:"</span>,name,<span class="string">"年龄"</span>,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="有返回值函数"><a href="#有返回值函数" class="headerlink" title="有返回值函数"></a>有返回值函数</h1></li>
<li><p>函数的返回值是给调用方返回的数据,给调用方使用的.</p>
</li>
<li><p>具有返回值的函数,必须要有return</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">	fmt.Println(add(a,b))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(c, d <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c + d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>也可以在返回值类型前面添加变量,return关键字后不写内容,表示变量是什么返回值什么</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">	fmt.Println(add2(a,b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(c, d <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	sum = c + d</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="多返回值函数"><a href="#多返回值函数" class="headerlink" title="多返回值函数"></a>多返回值函数</h1><ul>
<li><p>在Go语言中每个函数声明时都可以定义成多返回值函数</p>
</li>
<li><p>Go语言中所有的错误都是通过返回值返回的</p>
</li>
<li><p>声明多返回值函数的语法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数名<span class="params">(参数列表)</span> <span class="params">(返回值,返回值)</span></span>&#123;</span><br><span class="line">  <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用函数的语法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">变量,变量:=函数名(参数)</span><br></pre></td></tr></table></figure></li>
<li><p>调用函数时如果不想接收可以使用下划线占位</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">变量,_:=函数名(参数)</span><br></pre></td></tr></table></figure>
</li>
<li><p>理论上函数返回值个数可以无限多个,但是一般不去定义特别多个返回值(用结构体代替多返回值)</p>
</li>
</ul>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ul>
<li>函数的返回值可以不接收,表示执行函数</li>
<li>函数的返回值如果接收,用于接收返回值的变量个数与返回值个数相同</li>
<li>不想接收的使用占位符(_)占位<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//不接收函数返回值</span></span><br><span class="line">	demo()</span><br><span class="line"></span><br><span class="line">	<span class="comment">//每个返回值都接收</span></span><br><span class="line">	a, b := demo()</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//不希望接收的返回值使用下划线占位</span></span><br><span class="line">	c, _ := demo()</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"msr"</span>, <span class="number">17</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>多返回值函数也可以给返回值定义变量,return后面就不需要编写内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">()</span> <span class="params">(name <span class="keyword">string</span>, age <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	name = <span class="string">"nsr"</span></span><br><span class="line">	age = <span class="number">17</span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="可变参数函数"><a href="#可变参数函数" class="headerlink" title="可变参数函数"></a>可变参数函数</h1><ul>
<li>Go语言支持可变参数函数</li>
<li>可变参数指调用参数时,参数的个数可以是任意个</li>
<li>可变参数必须在参数列表最后的位置,在参数名和类型之间添加三个点表示可变参数函数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> 函数<span class="params">(参数,参数,名称 ... 类型 )</span></span>&#123;</span><br><span class="line">	<span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>输出语句就是可变参数函数,源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Fprintln(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>声明函数时,在函数体把可变参数当作切片使用即可</li>
</ul>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul>
<li>声明可变参数声明与调用<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	demo(<span class="string">"看书"</span>, <span class="string">"写代码"</span>, <span class="string">"看抖音视频"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(hover ... <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> a, b := <span class="keyword">range</span> hover &#123;</span><br><span class="line">		fmt.Println(a, b)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可变参数必须存在其他参数后面,一个函数不能有多个可变参数.<ul>
<li>因为前面普通参数个数是确定的,编译器知道,哪个实参给哪个形参<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	demo(<span class="string">"张三"</span>, <span class="string">"看书"</span>, <span class="string">"写代码"</span>, <span class="string">"看抖音视频"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(name <span class="keyword">string</span>, hover ... <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	fmt.Println(name, <span class="string">"的爱好是"</span>)</span><br><span class="line">	<span class="keyword">for</span> a, b := <span class="keyword">range</span> hover &#123;</span><br><span class="line">		fmt.Println(a, b)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><ul>
<li><p>匿名函数就是没有名称的函数</p>
</li>
<li><p>正常函数可以通过名称多次调用,而匿名函数由于没有函数名,所以大部分情况都是在当前位置声明并立即调用(函数变量除外)</p>
</li>
<li><p>匿名函数声明完需要调用,在函数结束大括号后面紧跟小括号</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;()<span class="comment">//括号表示调用</span></span><br></pre></td></tr></table></figure></li>
<li><p>匿名函数都是声明在其他函数内部</p>
<h2 id="匿名函数演示"><a href="#匿名函数演示" class="headerlink" title="匿名函数演示"></a>匿名函数演示</h2></li>
<li><p>无参数匿名函数</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"这是匿名函数"</span>)</span><br><span class="line">   &#125;()<span class="comment">//括号表示调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>有参数匿名函数</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">      fmt.Println(s, <span class="string">"这是匿名函数"</span>)</span><br><span class="line">   &#125;(<span class="string">"传递参数"</span>) <span class="comment">//调用时传递参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有参数有返回值匿名函数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		fmt.Println(s, <span class="string">"这是匿名函数"</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">110</span></span><br><span class="line">	&#125;(<span class="string">"传递参数"</span>) <span class="comment">//调用时传递参数</span></span><br><span class="line">	fmt.Println(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h1><ul>
<li><p>在Go语言中函数也是一种类型,函数有多少种形式,函数变量就有多少种写法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">()</span>           //无参数无返回值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span>        //有一个<span class="title">int</span>类型参数</span></span><br><span class="line"><span class="keyword">var</span> c <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">string</span> //有一个<span class="title">int</span>类型参数和<span class="title">string</span>类型返回值</span></span><br><span class="line">fmt.Println(a, b, c)   <span class="comment">//输出:&lt;nil&gt; &lt;nil&gt; &lt;nil&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>定义完函数变量后,可以使用匿名函数进行赋值.也可以使用已经定义好的函数进行赋值</p>
</li>
<li><p>函数变量定义以后与普通函数调用语法相同,变量名就是普通函数声明的函数名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">	a = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"执行函数"</span>)</span><br><span class="line">	&#125;   <span class="comment">//注意此处没有括号,有括号表示调用函数,变量a就表示接收函数返回值</span></span><br><span class="line">	a() <span class="comment">//调用函数</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	也可以使用短变量方式定义函数变量</span></span><br><span class="line"><span class="comment">	等效于</span></span><br><span class="line"><span class="comment">	func b(s string)&#123;</span></span><br><span class="line"><span class="comment">		//...</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	b := <span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"执行第二个函数"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	b(<span class="string">"参数"</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用定义好的函数</span></span><br><span class="line">	d := c</span><br><span class="line">	d()</span><br><span class="line">	<span class="comment">//函数名称c也是一个变量</span></span><br><span class="line">	c()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">c</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"c函数"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>函数类型变量是除了slice、map、channel、interface外第五种引用类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">	a = b</span><br><span class="line">	a()</span><br><span class="line">	<span class="keyword">var</span> c <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">	c = a</span><br><span class="line">	c()</span><br><span class="line">	fmt.Printf(<span class="string">"%p %p"</span>, a, c)<span class="comment">//输出地址相同</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">b</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"b"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数作为参数或返回值"><a href="#函数作为参数或返回值" class="headerlink" title="函数作为参数或返回值"></a>函数作为参数或返回值</h2></li>
<li><p>变量可以作为函数的参数或返回值类型.而函数既然可以当做变量看待,函数变量也可以当做函数的参数或返回值</p>
</li>
<li><p>函数作为参数时,类型写成对应的类型即可</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a(<span class="function"><span class="keyword">func</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">		fmt.Println(s)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(b <span class="keyword">func</span>(s <span class="keyword">string</span>)</span>)</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"a执行"</span>)</span><br><span class="line">	b(<span class="string">"传递给s的内容"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>函数作为返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//此时result指向返回值函数.</span></span><br><span class="line">	result := a()</span><br><span class="line">	<span class="comment">//调用函数,才能获取结果</span></span><br><span class="line">	fmt.Println(result())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">110</span><span class="keyword">go</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习九：sort包、map、双向链表、双向循环链表</title>
    <url>/posts/golang/2020/06/202006182323.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="sort包"><a href="#sort包" class="headerlink" title="sort包"></a>sort包</h1><ul>
<li>Go语言标准库中sort提供了排序API</li>
<li>sort包提供了多种排序算法,这些算法是内部实现的,每次使用sort包排序时,会自动选择最优算法实现<ul>
<li>插入排序</li>
<li>快速排序</li>
<li>堆排</li>
</ul>
</li>
<li>sort包中最上层是一个名称为Interface的接口,只要满足sort.Interface类型都可以排序<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A type, typically a collection, that satisfies sort.Interface can be</span></span><br><span class="line"><span class="comment">// sorted by the routines in this package. The methods require that the</span></span><br><span class="line"><span class="comment">// elements of the collection be enumerated by an integer index.</span></span><br><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">	Len() <span class="keyword">int</span></span><br><span class="line">	<span class="comment">// Less reports whether the element with</span></span><br><span class="line">	<span class="comment">// index i should sort before the element with index j.</span></span><br><span class="line">	Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">	<span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">	Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Go语言标准库默认提供了对int、float64、string进行排序的API</li>
<li>很多函数的参数都是sort包下类型,需要进行转换.</li>
</ul>
<h1 id="排序实现"><a href="#排序实现" class="headerlink" title="排序实现"></a>排序实现</h1><ul>
<li>对int类型切片排序<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := [] <span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>&#125;</span><br><span class="line">sort.Ints(num) <span class="comment">//升序</span></span><br><span class="line">fmt.Println(num)</span><br><span class="line">sort.Sort(sort.Reverse(sort.IntSlice(num))) <span class="comment">//降序</span></span><br><span class="line">fmt.Println(num)</span><br></pre></td></tr></table></figure></li>
<li>对float64类型切片排序<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">f := [] <span class="keyword">float64</span>&#123;<span class="number">1.5</span>, <span class="number">7.2</span>, <span class="number">5.8</span>, <span class="number">2.3</span>, <span class="number">6.9</span>&#125;</span><br><span class="line">sort.Float64s(f) <span class="comment">//升序</span></span><br><span class="line">fmt.Println(f)</span><br><span class="line">sort.Sort(sort.Reverse(sort.Float64Slice(f))) <span class="comment">//降序</span></span><br><span class="line">fmt.Println(f)</span><br></pre></td></tr></table></figure></li>
<li>对string类型切片排序<ul>
<li>按照编码表数值进行排序</li>
<li>多字符串中按照第一个字符进行比较</li>
<li>如果第一个字符相同,比较第二个字符<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="keyword">string</span>&#123;<span class="string">"我"</span>, <span class="string">"我是Goer"</span>, <span class="string">"a"</span>, <span class="string">"d"</span>, <span class="string">"国家"</span>, <span class="string">"你"</span>, <span class="string">"我a"</span>&#125;</span><br><span class="line">sort.Sort(sort.StringSlice(s)) <span class="comment">//升序</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">//查找内容的索引,如果不存在,返回内容应该在升序排序切片的哪个位置插入</span></span><br><span class="line">fmt.Println(sort.SearchStrings(s, <span class="string">"你是"</span>))</span><br><span class="line">sort.Sort(sort.Reverse(sort.StringSlice(s)))</span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><ul>
<li><p>map以散列表方式存储键值对集合</p>
</li>
<li><p>map中每个元素都是键值对</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map[key]Value</span><br></pre></td></tr></table></figure></li>
<li><p>key是操作map的唯一标准.可以通过key对map中元素进行增加/删除/修改/查看</p>
</li>
<li><p>key是唯一的,添加重复的key会覆盖之前的元素.</p>
</li>
<li><p>map是值类型,只声明时为空指针(nil)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(m == <span class="literal">nil</span>) <span class="comment">//输出:true</span></span><br><span class="line">fmt.Printf(<span class="string">"%p"</span>, m)   <span class="comment">//输出:0x0</span></span><br></pre></td></tr></table></figure></li>
<li><p>map读写数据时并不是并发安全的,可以结合RWMutex保证并发安全(RWMutex在后面讲解)</p>
</li>
</ul>
<h2 id="实例化map的几种方式"><a href="#实例化map的几种方式" class="headerlink" title="实例化map的几种方式"></a>实例化map的几种方式</h2><ul>
<li>使用make函数实例化一个没有初始值的map<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">fmt.Println(m==<span class="literal">nil</span>)<span class="comment">//输出:false</span></span><br><span class="line">fmt.Printf(<span class="string">"%p"</span>, m)<span class="comment">//输出:内存地址</span></span><br></pre></td></tr></table></figure></li>
<li>可以在声明map时直接给map赋初始值.注意初始值在一行和在多行写时的语法区别<ul>
<li>map中元素键值对语法满足: key:value</li>
<li>key和value的类型必须和map[key]value类型严格对应<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"msr"</span>, <span class="string">"address"</span>: <span class="string">"中国广东"</span>&#125;</span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">	<span class="string">"name"</span>:     <span class="string">"msr"</span>,</span><br><span class="line">	<span class="string">"addresss"</span>: <span class="string">"中国广东"</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m, m1)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="操作map中的元素"><a href="#操作map中的元素" class="headerlink" title="操作map中的元素"></a>操作map中的元素</h2><ul>
<li>使用key判断,如果key不存在向map中新增数据,如果key存在会覆盖map中元素<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">m[<span class="string">"money"</span>] = <span class="number">5</span></span><br><span class="line">fmt.Println(m) <span class="comment">//输出:map[money:5]</span></span><br><span class="line">m[<span class="string">"money"</span>] = <span class="number">6</span></span><br><span class="line">fmt.Println(m) <span class="comment">//map[money:6]</span></span><br></pre></td></tr></table></figure></li>
<li>Go语言标准库中提供了对map元素删除的函数,使用顶层delete()即可完成删除<ul>
<li>如果key存在执行删除元素</li>
<li>如果key不存在,map中内容不变,也不会有错误<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">m[<span class="string">"money"</span>] = <span class="number">5</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"没有的key"</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">//输出:map[money:5]</span></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"money"</span>)</span><br><span class="line">fmt.Println(m) <span class="comment">//输出:map[]</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>获取map中指定key对应的值<ul>
<li>使用:map变量[key]获取key对应的值</li>
<li>如果key不存在返回map[key]Value中Value类型的默认值.例如:Value是string类型就返回””</li>
<li>返回值可以是一个,也可以是两个.<ul>
<li>一个表示key对应的值</li>
<li>两个分别表示:key对应的值和这个key是否存在<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"msr"</span>, <span class="string">"address"</span>: <span class="string">"中国广东"</span>&#125;</span><br><span class="line">fmt.Println(m[<span class="string">"name"</span>]) <span class="comment">//输出:msr</span></span><br><span class="line">fmt.Println(m[<span class="string">"age"</span>])  <span class="comment">//输出:空字符串</span></span><br><span class="line">value, ok := m[<span class="string">"age"</span>]</span><br><span class="line">fmt.Println(value, ok) <span class="comment">//输出:空字符串 false</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>如果希望把map中所有元素都遍历,可以使用for结合range实现<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"name"</span>: <span class="string">"msr"</span>, <span class="string">"address"</span>: <span class="string">"中国广东"</span>&#125;</span><br><span class="line"><span class="comment">//range遍历map时返回值分别表示key和value</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> m &#123;</span><br><span class="line">	fmt.Println(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="双向链表概述"><a href="#双向链表概述" class="headerlink" title="双向链表概述"></a>双向链表概述</h1><ul>
<li><p>双向链表结构如下<br><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/lianbiao.png" alt="双向链表"></p>
</li>
<li><p>双向链表结构中元素在内存中不是紧邻空间,而是每个元素中存放上一个元素和后一个元素的地址</p>
<ul>
<li>第一个元素称为头(head)元素,前连接(前置指针域)为nil</li>
<li>最后一个元素称为尾(foot)元素,后连接(后置指针域)为nil</li>
</ul>
</li>
<li><p>双向链表的优点:</p>
<ul>
<li>在执行新增元素或删除元素时效率高,获取任意一个元素,可以方便的在这个元素前后插入元素</li>
<li>充分利用内存空间,实现内存灵活管理</li>
<li>可实现正序和逆序遍历</li>
<li>头元素和尾元素新增或删除时效率较高</li>
</ul>
</li>
<li><p>双向链表的缺点</p>
<ul>
<li>链表增加了元素的指针域,空间开销比较大</li>
<li>遍历时跳跃性查找内容,大量数据遍历性能低<h2 id="双向链表容器List"><a href="#双向链表容器List" class="headerlink" title="双向链表容器List"></a>双向链表容器List</h2></li>
</ul>
</li>
<li><p>在Go语言标准库的container/list 包提供了双向链表List</p>
</li>
<li><p>List结构体定义如下</p>
<ul>
<li>root表示根元素</li>
<li>len表示链表中有多少个元素<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// List represents a doubly linked list.</span></span><br><span class="line"><span class="comment">// The zero value for List is an empty list ready to use.</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">	root Element <span class="comment">// sentinel list element, only &amp;root, root.prev, and root.next are used</span></span><br><span class="line">	<span class="built_in">len</span>  <span class="keyword">int</span>     <span class="comment">// current list length excluding (this) sentinel element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>其中Element结构体定义如下</p>
<ul>
<li>next表示下一个元素,使用Next()可以获取到</li>
<li>prev表示上一个元素,使用Prev()可以获取到</li>
<li>list表示元素属于哪个链表</li>
<li>Value表示元素的值,interface{}在Go语言中表示任意类型<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Element is an element of a linked list.</span></span><br><span class="line"><span class="keyword">type</span> Element <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Next and previous pointers in the doubly-linked list of elements.</span></span><br><span class="line">	<span class="comment">// To simplify the implementation, internally a list l is implemented</span></span><br><span class="line">	<span class="comment">// as a ring, such that &amp;l.root is both the next element of the last</span></span><br><span class="line">	<span class="comment">// list element (l.Back()) and the previous element of the first list</span></span><br><span class="line">	<span class="comment">// element (l.Front()).</span></span><br><span class="line">	next, prev *Element</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The list to which this element belongs.</span></span><br><span class="line">	list *List</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The value stored with this element.</span></span><br><span class="line">	Value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="操作List"><a href="#操作List" class="headerlink" title="操作List"></a>操作List</h2><ul>
<li>直接使用container/list包下的New()新建一个空的List<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mylist := list.New()</span><br><span class="line">fmt.Println(mylist)       <span class="comment">//输出list中内容</span></span><br><span class="line">fmt.Println(mylist.Len()) <span class="comment">//查看链表中元素的个数</span></span><br><span class="line">fmt.Printf(<span class="string">"%p"</span>, mylist)  <span class="comment">//输出地址</span></span><br></pre></td></tr></table></figure></li>
<li>Go语言标准库中提供了很多向双向链表中添加元素的函数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加到最后,List["a"]</span></span><br><span class="line">mylist.PushBack(<span class="string">"a"</span>)</span><br><span class="line">   <span class="comment">//添加到最前面,List["b","a"]</span></span><br><span class="line">mylist.PushFront(<span class="string">"b"</span>) </span><br><span class="line"><span class="comment">//向第一个元素后面添加元素,List["b","c","a"]</span></span><br><span class="line">mylist.InsertAfter(<span class="string">"c"</span>, mylist.Front()) </span><br><span class="line"><span class="comment">//向最后一个元素前面添加元素,List["b","c","d","a"]</span></span><br><span class="line">mylist.InsertBefore(<span class="string">"d"</span>, mylist.Back())</span><br></pre></td></tr></table></figure></li>
<li>取出链表中的元素<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(mylist.Back().Value)  <span class="comment">//最后一个元素的值</span></span><br><span class="line">fmt.Println(mylist.Front().Value) <span class="comment">//第一个元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只能从头向后找,或从后往前找,获取元素内容</span></span><br><span class="line">n := <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> curr *list.Element</span><br><span class="line"><span class="keyword">if</span> n &gt; <span class="number">0</span> &amp;&amp; n &lt;= mylist.Len() &#123;</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">		curr = mylist.Front()</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> n == mylist.Len() &#123;</span><br><span class="line">		curr = mylist.Back()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		curr = mylist.Front()</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">1</span>; i &lt; n; i++ &#123;</span><br><span class="line">			curr = curr.Next()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"n的数值不对"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历所有值</span></span><br><span class="line"><span class="keyword">for</span> e := mylist.Front(); e != <span class="literal">nil</span>; e = e.Next() &#123;</span><br><span class="line">	fmt.Println(e.Value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>移动元素的顺序<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mylist.MoveToBack(mylist.Front()) <span class="comment">//把第一个移动到后面</span></span><br><span class="line">mylist.MoveToFront(mylist.Back()) <span class="comment">//把最后一个移动到前面</span></span><br><span class="line">mylist.MoveAfter(mylist.Front(),mylist.Back())<span class="comment">//把第一个参数元素,移动到第二个参数元素后面</span></span><br><span class="line">mylist.MoveBefore(mylist.Front(),mylist.Back())<span class="comment">//把第一个参数元素,移动到第二个参数元素前面</span></span><br></pre></td></tr></table></figure></li>
<li>删除元素<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">mylist.Remove(mylist.Front())</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h1><ul>
<li><p>循环链表特点是没有节点的指针域为nil,通过任何一个元素都可以找到其他元素</p>
</li>
<li><p>环形链表结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">	A --&gt;B	</span><br><span class="line">	B --&gt;C	</span><br><span class="line">	C --&gt;D	</span><br><span class="line">	D --&gt;E</span><br><span class="line">	E --&gt;D</span><br><span class="line">	A --&gt;E</span><br><span class="line">	E --&gt;A</span><br><span class="line">	D --&gt;C</span><br><span class="line">	C --&gt;B</span><br><span class="line">	B --&gt;A</span><br></pre></td></tr></table></figure></li>
<li><p>双向循环链表和双向链表区别</p>
<ul>
<li>双向循环链表没有严格意义上的头元素和尾元素</li>
<li>没有元素的前连接和后连接为nil</li>
<li>一个长度为n的双向循环链表,通过某个元素向某个方向移动,在查找最多n-1次后一定会找到另一个元素</li>
</ul>
</li>
</ul>
<h2 id="Go语言中的双向循环链表"><a href="#Go语言中的双向循环链表" class="headerlink" title="Go语言中的双向循环链表"></a>Go语言中的双向循环链表</h2><ul>
<li><p>在container/ring包下结构体Ring源码如下</p>
<ul>
<li>官方明确说明了Ring是循环链表的元素,又是环形链表.</li>
<li>实际使用时Ring遍历就是环形链表第一个元素<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A Ring is an element of a circular list, or ring.</span></span><br><span class="line"><span class="comment">// Rings do not have a beginning or end; a pointer to any ring element</span></span><br><span class="line"><span class="comment">// serves as reference to the entire ring. Empty rings are represented</span></span><br><span class="line"><span class="comment">// as nil Ring pointers. The zero value for a Ring is a one-element</span></span><br><span class="line"><span class="comment">// ring with a nil Value.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">type</span> Ring <span class="keyword">struct</span> &#123;</span><br><span class="line">	next, prev *Ring</span><br><span class="line">	Value      <span class="keyword">interface</span>&#123;&#125; <span class="comment">// for use by client; untouched by this library</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Go语言标准库中对container/ring包提供的API如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Ring</span><br><span class="line">	<span class="comment">//实例化长度为n的环形链表</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(n <span class="keyword">int</span>)</span> *<span class="title">Ring</span></span></span><br><span class="line">	<span class="comment">//长度</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span></span><br><span class="line">	<span class="comment">//下一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Next</span><span class="params">()</span> *<span class="title">Ring</span></span></span><br><span class="line">	<span class="comment">//上一个元素</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Prev</span><span class="params">()</span> *<span class="title">Ring</span></span></span><br><span class="line">	<span class="comment">//移动n次,支持负数</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Move</span><span class="params">(n <span class="keyword">int</span>)</span> *<span class="title">Ring</span></span></span><br><span class="line">	<span class="comment">//合并s和r</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Link</span><span class="params">(s *Ring)</span> *<span class="title">Ring</span></span></span><br><span class="line">	<span class="comment">//删除r后面n%r.Len()元素,删除多个,当前元素前面的不删除</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Unlink</span><span class="params">(n <span class="keyword">int</span>)</span> *<span class="title">Ring</span></span></span><br><span class="line">	<span class="comment">//循环遍历,i是当前元素的值</span></span><br><span class="line">	<span class="function"><span class="keyword">func</span> <span class="params">(r *Ring)</span> <span class="title">Do</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2></li>
<li><p>实例化、赋值、遍历</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := ring.New(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; r.Len(); i++ &#123;</span><br><span class="line">	r.Move(i).Value = i</span><br><span class="line">&#125;</span><br><span class="line">r.Do(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>实例化后的r就是链表中第一个创建的元素.可以找到元素的前后元素</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Println(r.Next().Value)<span class="comment">//输出:1</span></span><br><span class="line">fmt.Println(r.Next().Next().Value)<span class="comment">//输出:2</span></span><br><span class="line">fmt.Println(r.Next().Next().Next().Value)<span class="comment">//输出:0</span></span><br><span class="line">fmt.Println(r.Move(<span class="number">-1</span>).Value)<span class="comment">//输出:2</span></span><br><span class="line">fmt.Println(r.Prev().Value)<span class="comment">//输出:2</span></span><br></pre></td></tr></table></figure></li>
<li><p>可以向环形链表添加或删除链表</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := ring.New(<span class="number">1</span>)</span><br><span class="line">s.Value = <span class="number">13</span></span><br><span class="line"><span class="comment">//r是哪个元素,就把新的链表添加到哪个元素后面</span></span><br><span class="line">r.Link(s)</span><br><span class="line">r.Do(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Print(i, <span class="string">" "</span>)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line"><span class="comment">//从r元素向后,n/r.Len()个元素被删除,当前元素和前面的保留</span></span><br><span class="line">r.Unlink(<span class="number">1</span>)</span><br><span class="line">r.Do(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Print(i, <span class="string">" "</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装docker</title>
    <url>/posts/docker/2020/06/202006161622.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><p>1.查看内核版本</p>
<p>linux操作系统Centos7，linux 3.10 内核，docker官方说至少3.8以上（ubuntu下要linux内核3.8以上）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# uname -a</span><br><span class="line">Linux msr-server 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>2.更新yum包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# yum update</span><br></pre></td></tr></table></figure>

<p>3.安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# yum -y install gcc</span><br><span class="line">[root@msr-server ~]# yum -y install gcc-c++</span><br><span class="line">[root@msr-server ~]# yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>4.设置阿里云的yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>5.查看仓库中docker版本，可以指定安装，不指定安装最新版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# yum list docker-ce --showduplicates | sort -r</span><br><span class="line">Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Installed Packages</span><br><span class="line">docker-ce.x86_64            3:19.03.5-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.5-3.el7                    @docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:19.03.4-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.3-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.2-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.1-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:19.03.0-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.9-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                    docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                   docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable </span><br><span class="line">Determining fastest mirrors</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure>

<p>6.安装docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# yum makecache fast</span><br><span class="line">[root@msr-server ~]# yum install docker-ce-18.03.1.ce</span><br></pre></td></tr></table></figure>

<p>7.启动Docker，加入开机启动，验证安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@msr-server ~]# systemctl start docker</span><br><span class="line">[root@msr-server ~]# systemctl enable  docker</span><br><span class="line">[root@msr-server ~]# docker version</span><br></pre></td></tr></table></figure>

<p>8.配置阿里云镜像加速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# mkdir -p /etc/docker</span><br><span class="line">[root@msr-server ~]# tee /etc/docker/daemon.json &lt;&lt;-'EOF' </span><br><span class="line">&#123; </span><br><span class="line">"registry-mirrors": ["https://****.mirror.aliyuncs.com"] </span><br><span class="line">&#125; </span><br><span class="line">EOF</span><br><span class="line">[root@msr-server ~]# systemctl daemon-reload </span><br><span class="line">[root@msr-server ~]# systemctl restart docker</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>云计算</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx入门之配置语法</title>
    <url>/posts/nginx/2020/06/202006161551.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="默认的配置文件"><a href="#默认的配置文件" class="headerlink" title="默认的配置文件"></a>默认的配置文件</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">	access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">	sendfile        on;</span><br><span class="line"><span class="meta">	#</span><span class="bash">tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">	keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line"><span class="meta">	#</span><span class="bash">gzip  on;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	#</span><span class="bash">include /etc/nginx/conf.d/*.conf;</span></span><br><span class="line">	server &#123;</span><br><span class="line">		listen       80;</span><br><span class="line">		server_name  localhost;</span><br><span class="line"></span><br><span class="line">		location / &#123;</span><br><span class="line">   			root   /usr/share/nginx/html;</span><br><span class="line">	    	index  index.html index.htm;</span><br><span class="line">		&#125;</span><br><span class="line">		error_page   500 502 503 504 404  /50x.html;</span><br><span class="line">		location = /50x.html &#123;</span><br><span class="line">    		root   /usr/share/nginx/html;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>user:设置nginx服务的系统使用用户</li>
<li>worker_processes:工作进程数</li>
<li>error_log:nginx的错误日志</li>
<li>pid:nginx服务启动时候pid</li>
<li>events：<ul>
<li>worker_connections:每个进程允许最大连接数</li>
<li>use:工作进程数</li>
</ul>
</li>
<li>server:<ul>
<li>listen 80 监听服务器80端口</li>
<li>server_name 可配置域名</li>
<li>location /:根目录<ul>
<li>root &amp; index:默认访问页面</li>
</ul>
</li>
<li>error_page: 错误页面，500 502 503 504 404这些状态码都会跳转到/50x.html</li>
<li>location = /50x.html:响应50x.html的访问，根目录下的50x.html</li>
</ul>
</li>
<li>keepalive_timeout:客户端超时时间</li>
<li>include /etc/nginx/conf.d/*.conf:引入配置文件，一般一个配置文件一个server</li>
</ul>
<h1 id="日志格式log-format"><a href="#日志格式log-format" class="headerlink" title="日志格式log_format"></a>日志格式log_format</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认配置</span></span><br><span class="line">log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br></pre></td></tr></table></figure>

<p>1.Http变量：arg_PARAMETER、http_HEADER、sent_http_HEADER</p>
<p>​        eg:log_format  main ‘$arg_PARAMETER $http_HEADER $sent_http_HEADER’</p>
<p>2.内置变量：</p>
<p>​        内置变量存放在 ngx_http_core_module 模块中，变量的命名方式和apache 服务器变量是一致的。总而言之，这些变量代表着客户端请求头的内容。下面是nginx支持的内置变量：</p>
<p><strong>$arg_name</strong></p>
<p>请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name</p>
<p><strong>$args</strong></p>
<p>请求中的参数值</p>
<p><strong>$binary_remote_addr</strong></p>
<p>客户端地址的二进制形式, 固定长度为4个字节</p>
<p><strong>$body_bytes_sent</strong></p>
<p>传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的“%B”参数保持兼容</p>
<p><strong>$bytes_sent</strong></p>
<p>传输给客户端的字节数 (1.3.8, 1.2.5)</p>
<p><strong>$connection</strong></p>
<p>TCP连接的序列号 (1.3.8, 1.2.5)</p>
<p><strong>$connection_requests</strong></p>
<p>TCP连接当前的请求数量 (1.3.8, 1.2.5)</p>
<p><strong>$content_length</strong></p>
<p>“Content-Length” 请求头字段</p>
<p><strong>$content_type</strong></p>
<p>“Content-Type” 请求头字段</p>
<p><strong>$cookie_name</strong></p>
<p>cookie名称</p>
<p><strong>$document_root</strong></p>
<p>当前请求的文档根目录或别名</p>
<p><strong>$document_uri</strong></p>
<p>同 $uri</p>
<p><strong>$host</strong></p>
<p>优先级如下：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名</p>
<p><strong>$hostname</strong></p>
<p>主机名</p>
<p><strong>$http_name</strong></p>
<p>匹配任意请求头字段； 变量名中的后半部分“name”可以替换成任意请求头字段，如在配置文件中需要获取http请求头：“Accept-Language”，那么将“－”替换为下划线，大写字母替换为小写，形如：$http_accept_language即可。</p>
<p>*<em>$https *</em></p>
<p>如果开启了SSL安全模式，值为“on”，否则为空字符串。</p>
<p><strong>$is_args</strong></p>
<p>如果请求中有参数，值为“?”，否则为空字符串。</p>
<p><strong>$limit_rate</strong></p>
<p>用于设置响应的速度限制，详见 limit_rate。</p>
<p><strong>$msec</strong></p>
<p>当前的Unix时间戳 (1.3.9, 1.2.6)</p>
<p><strong>$nginx_version</strong></p>
<p>nginx版本</p>
<p><strong>$pid</strong></p>
<p>工作进程的PID</p>
<p><strong>$pipe</strong></p>
<p>如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7)</p>
<p><strong>$proxy_protocol_addr</strong></p>
<p>获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串。(1.5.12)</p>
<p><strong>$query_string</strong></p>
<p>同 $args</p>
<p><strong>$realpath_root</strong></p>
<p>当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。</p>
<p><strong>$remote_addr</strong></p>
<p>客户端地址</p>
<p><strong>$remote_port</strong></p>
<p>客户端端口</p>
<p><strong>$remote_user</strong></p>
<p>用于HTTP基础认证服务的用户名</p>
<p><strong>$request</strong></p>
<p>代表客户端的请求地址</p>
<p><strong>$request_body</strong></p>
<p>客户端的请求主体</p>
<p>此变量可在location中使用，将请求主体通过proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass传递给下一级的代理服务器。</p>
<p><strong>$request_body_file</strong></p>
<p>将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off, uwsgi_pass_request_body off, or scgi_pass_request_body off 。</p>
<p><strong>$request_completion</strong></p>
<p>如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空。</p>
<p><strong>$request_filename</strong></p>
<p>当前连接请求的文件路径，由root或alias指令与URI请求生成。</p>
<p><strong>$request_length</strong></p>
<p>请求的长度 (包括请求的地址, http请求头和请求主体) (1.3.12, 1.2.7)</p>
<p><strong>$request_method</strong></p>
<p>HTTP请求方法，通常为“GET”或“POST”</p>
<p><strong>$request_time</strong></p>
<p>处理客户端请求使用的时间 (1.3.9, 1.2.6); 从读取客户端的第一个字节开始计时。</p>
<p><strong>$request_uri</strong></p>
<p>这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”。</p>
<p><strong>$scheme</strong></p>
<p>请求使用的Web协议, “http” 或 “https”</p>
<p><strong>$sent_http_name</strong></p>
<p>可以设置任意http响应头字段； 变量名中的后半部分“name”可以替换成任意响应头字段，如需要设置响应头Content-length，那么将“－”替换为下划线，大写字母替换为小写，形如：$sent_http_content_length 4096即可。</p>
<p><strong>$server_addr</strong></p>
<p>服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中。</p>
<p><strong>$server_name</strong></p>
<p>服务器名，<a href="http://www.cnphp.info" target="_blank" rel="noopener">www.cnphp.info</a></p>
<p><strong>$server_port</strong></p>
<p>服务器端口</p>
<p><strong>$server_protocol</strong></p>
<p>服务器的HTTP版本, 通常为 “HTTP/1.0” 或 “HTTP/1.1”</p>
<p><strong>$status</strong></p>
<p>HTTP响应代码 (1.3.2, 1.2.2)</p>
<p><strong>$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space</strong></p>
<p>客户端TCP连接的具体信息</p>
<p><strong>$time_iso8601</strong></p>
<p>服务器时间的ISO 8610格式 (1.3.12, 1.2.7)</p>
<p>*<em>$time_local $arg_name *</em></p>
<p>请求中的的参数名，即“?”后面的arg_name=arg_value形式的arg_name</p>
<p><strong>$args</strong></p>
<p>请求中的参数值</p>
<p><strong>$binary_remote_addr</strong></p>
<p>客户端地址的二进制形式, 固定长度为4个字节</p>
<p><strong>$body_bytes_sent</strong></p>
<p>传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的“%B”参数保持兼容</p>
<p><strong>$bytes_sent</strong></p>
<p>传输给客户端的字节数 (1.3.8, 1.2.5)</p>
<p><strong>$connection</strong></p>
<p>TCP连接的序列号 (1.3.8, 1.2.5)</p>
<p><strong>$connection_requests</strong></p>
<p>TCP连接当前的请求数量 (1.3.8, 1.2.5)</p>
<p>*<em>$content_lengt *</em></p>
<p>“Content-Length” 请求头字段</p>
<p><strong>$content_type</strong></p>
<p>“Content-Type” 请求头字段</p>
<p>*<em>$cookie_name *</em></p>
<p>cookie名称</p>
<p><strong>$document_root</strong></p>
<p>当前请求的文档根目录或别名</p>
<p><strong>$document_uri</strong></p>
<p>同 $uri</p>
<p><strong>$host</strong></p>
<p>优先级如下：HTTP请求行的主机名&gt;”HOST”请求头字段&gt;符合请求的服务器名</p>
<p><strong>$hostname</strong></p>
<p>主机名</p>
<p><strong>$http_name</strong></p>
<p>匹配任意请求头字段； 变量名中的后半部分“name”可以替换成任意请求头字段，如在配置文件中需要获取http请求头：“Accept-Language”，那么将“－”替换为下划线，大写字母替换为小写，形如：$http_accept_language即可。</p>
<p><strong>$https</strong></p>
<p>如果开启了SSL安全模式，值为“on”，否则为空字符串。</p>
<p><strong>$is_args</strong></p>
<p>如果请求中有参数，值为“?”，否则为空字符串。</p>
<p><strong>$limit_rate</strong></p>
<p>用于设置响应的速度限制，详见 limit_rate。</p>
<p><strong>$msec</strong></p>
<p>当前的Unix时间戳 (1.3.9, 1.2.6)</p>
<p><strong>$nginx_version</strong></p>
<p>nginx版本</p>
<p><strong>$pid</strong></p>
<p>工作进程的PID</p>
<p><strong>$pipe</strong></p>
<p>如果请求来自管道通信，值为“p”，否则为“.” (1.3.12, 1.2.7)</p>
<p><strong>$proxy_protocol_addr</strong></p>
<p>获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串。(1.5.12)</p>
<p><strong>$query_string</strong></p>
<p>同 $args</p>
<p><strong>$realpath_root</strong></p>
<p>当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径。</p>
<p><strong>$remote_addr</strong></p>
<p>客户端地址</p>
<p><strong>$remote_port</strong></p>
<p>客户端端口</p>
<p><strong>$remote_user</strong></p>
<p>用于HTTP基础认证服务的用户名</p>
<p><strong>$request</strong></p>
<p>代表客户端的请求地址</p>
<p><strong>$request_body</strong></p>
<p>客户端的请求主体</p>
<p>此变量可在location中使用，将请求主体通过proxy_pass, fastcgi_pass, uwsgi_pass, 和 scgi_pass传递给下一级的代理服务器。</p>
<p><strong>$request_body_file</strong></p>
<p>将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off, uwsgi_pass_request_body off, or scgi_pass_request_body off 。</p>
<p><strong>$request_completion</strong></p>
<p>如果请求成功，值为”OK”，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空。</p>
<p><strong>$request_filename</strong></p>
<p>当前连接请求的文件路径，由root或alias指令与URI请求生成。</p>
<p><strong>$request_length</strong></p>
<p>请求的长度 (包括请求的地址, http请求头和请求主体) (1.3.12, 1.2.7)</p>
<p><strong>$request_method</strong></p>
<p>HTTP请求方法，通常为“GET”或“POST”</p>
<p><strong>$request_time</strong></p>
<p>处理客户端请求使用的时间 (1.3.9, 1.2.6); 从读取客户端的第一个字节开始计时。</p>
<p><strong>$request_uri</strong></p>
<p>这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：”/cnphp/test.php?arg=freemouse”。</p>
<p><strong>$scheme</strong></p>
<p>请求使用的Web协议, “http” 或 “https”</p>
<p><strong>$sent_http_name</strong></p>
<p>可以设置任意http响应头字段； 变量名中的后半部分“name”可以替换成任意响应头字段，如需要设置响应头Content-length，那么将“－”替换为下划线，大写字母替换为小写，形如：$sent_http_content_length 4096即可。</p>
<p><strong>$server_addr</strong></p>
<p>服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中。</p>
<p><strong>$server_name</strong></p>
<p>服务器名如<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p>
<p><strong>$server_port</strong></p>
<p>服务器端口</p>
<p><strong>$server_protocol</strong></p>
<p>服务器的HTTP版本, 通常为 “HTTP/1.0” 或 “HTTP/1.1”</p>
<p><strong>$status</strong></p>
<p>HTTP响应代码 (1.3.2, 1.2.2)</p>
<p><strong>$tcpinfo_rtt</strong>, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space</p>
<p>客户端TCP连接的具体信息</p>
<p><strong>$time_iso8601</strong></p>
<p>服务器时间的ISO 8610格式 (1.3.12, 1.2.7)</p>
<p><strong>$time_local</strong></p>
<p>服务器时间（LOG Format 格式） (1.3.12, 1.2.7)</p>
<p><strong>$uri</strong></p>
<p>请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</p>
<p>服务器时间（LOG Format 格式） (1.3.12, 1.2.7)</p>
<p><strong>$uri</strong></p>
<p>请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如”/foo/bar.html”。</p>
<h1 id="监控模块http-stub-status-modules"><a href="#监控模块http-stub-status-modules" class="headerlink" title="监控模块http_stub_status_modules"></a>监控模块http_stub_status_modules</h1><p>作用：监控Nginx客户端状态</p>
<p>作用域：server；location</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">查看配置参数</span><br><span class="line">root@3de922dd7a75:/usr/share/nginx/html# nginx -V </span><br><span class="line">nginx version: nginx/1.19.0</span><br><span class="line">built by gcc 8.3.0 (Debian 8.3.0-6) </span><br><span class="line">built with OpenSSL 1.1.1d  10 Sep 2019</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fdebug-prefix-map=/data/builder/debuild/nginx-1.19.0/debian/debuild-base/nginx-1.19.0=. -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed -pie'</span><br></pre></td></tr></table></figure>

<ol>
<li>配置语法：在一个server下配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location  /status &#123;</span><br><span class="line">	stub_status;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改完之后，测试配置文件是否有错误</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@3de922dd7a75:/etc/nginx# nginx -tc ./nginx.conf </span><br><span class="line">nginx: the configuration file /etc/nginx/./nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/./nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>重载配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@3de922dd7a75:/etc/nginx# nginx	-s reload /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>再访问htttp://ip/stasus，出现一下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Active connections: 2 </span><br><span class="line">server accepts handled requests</span><br><span class="line"> 4 4 1 </span><br><span class="line">Reading: 0 Writing: 1 Waiting: 1</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>nginx_status详解</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Active connections: 1     </span><br><span class="line">##nginx正处理的活跃连接数　　</span><br><span class="line">server accepts handled requests</span><br><span class="line">##server  nginx启动到现在共处理了多少个连接</span><br><span class="line">##accepts  nginx启动到现在共创建了多少次握手，请求丢失数&#x3D;握手数-连接数</span><br><span class="line">##handled requests    总共处理了多少个请求</span><br><span class="line">Reading: 0 Writing: 1 Waiting: 0</span><br><span class="line">##Reading  nginx读取客户端 header 信息数</span><br><span class="line">##Writing  nginx返回给客户端的 hearder 信息数</span><br><span class="line">##Waiting  nginx已经处理完正在等待下一次请求指令的驻留连接，在开启keep-alive的情况下，waiting值等于active - (Reading+Writing)</span><br></pre></td></tr></table></figure>

<h1 id="模块http-random-index-module"><a href="#模块http-random-index-module" class="headerlink" title="模块http_random_index_module"></a>模块http_random_index_module</h1><p>作用：在主目录中选择一个随机主页</p>
<p>默认：关闭</p>
<p>作用域：location</p>
<ol>
<li>配置语法：在location中配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	root /etc/nginx/html;</span><br><span class="line">	random_index on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在/etc/nginx/html中新建一个html文件</li>
<li>重复上一小节的检查配置文件，重载配置文件，在浏览器访问，不断刷新，出现不同的页面</li>
</ol>
<h1 id="默认模块http-sub-module"><a href="#默认模块http-sub-module" class="headerlink" title="默认模块http_sub_module"></a>默认模块http_sub_module</h1><p>作用：HTTP内容替换</p>
<p>常用选项：sub_filter string replacement；sub_filter_last_modified on|off；sub_filter_once on|off</p>
<p>作用域：http；server；location</p>
<ol>
<li><p>配置语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F; &#123;</span><br><span class="line">	root &#x2F;etc&#x2F;nginx&#x2F;html;</span><br><span class="line">	index index.html index.htm;</span><br><span class="line">	sub_filter &#39;nginx&#39; &#39;NGINX&#39;; #替换第一个nginx</span><br><span class="line">	sub_filter_once off; #关闭之后，所有的nginx都会被替换</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="Nginx的请求访问限制"><a href="#Nginx的请求访问限制" class="headerlink" title="Nginx的请求访问限制"></a>Nginx的请求访问限制</h1><h2 id="请求限制"><a href="#请求限制" class="headerlink" title="请求限制"></a>请求限制</h2><ol>
<li><p>连接频率限制：limit_conn_module</p>
<p>limit_conn_zone key zone=name:size，作用域：http</p>
<p>limit_conn zone number，作用域：http，server，location</p>
</li>
<li><p>请求频率限制：limit_req_module</p>
<p>limit_req_zone key zone=name:size rate=rate,http</p>
<p>limit_req zone=name，作用域：http，server，location</p>
</li>
<li><p>配置语法：</p>
<p>在http下配置，以客户端的ip地址作为key，对这个key进行限制，同时申请一个zone空间大小为1m用来存储访问的频次信息。$binary_remote_addr可以节省zone空间。rate=1r/s：表示允许相同标识的客户端的<strong>访问频次</strong>，这里限制的是每秒1次，即每秒只处理一个请求。</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit_conn_zone $binary_remote_addr zone&#x3D;conn_zone:1m</span><br><span class="line">limit_req_zone $binary_remote_addr zone&#x3D;req_zone:1m rate&#x3D;1r&#x2F;s</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在localtion下配置：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location  /status &#123;</span><br><span class="line">   root html;</span><br><span class="line"><span class="meta">   #</span><span class="bash">   limit_conn conn_zone 1;  <span class="comment">#同一时间只允许一个连接</span></span></span><br><span class="line"><span class="meta">   #</span><span class="bash">   limit_req zone=req_zone burst=3 nodelay;  </span></span><br><span class="line"><span class="meta">   #</span><span class="bash">   limit_req zone=req_zone burst=3;</span></span><br><span class="line"><span class="meta">   #</span><span class="bash">   limit_req zone=req_zone;</span></span><br><span class="line">   index show.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> limit_req zone=req_zon：使用配置好的rate的速率来处理数据</p>
<p> burst=3：设置一个大小为3的缓冲区当有大量请求（爆发）过来时，超过了<strong>访问频次</strong>限制的<strong>请求可以先放到这个缓冲区内等待，但是这个等待区里的位置只有3个</strong>，超过的请求会直接报503的错误然后返回。</p>
<p>nodelay：如果设置，会在瞬时提供处理(burst + rate)个请求的能力，请求超过（<strong>burst + rate）</strong>的时候就会直接返回503，永远不存在请求需要等待的情况。如果没有设置，则所有请求会依次等待排队</p>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><h3 id="基于IP的访问控制：http-access-module"><a href="#基于IP的访问控制：http-access-module" class="headerlink" title="基于IP的访问控制：http_access_module"></a>基于IP的访问控制：http_access_module</h3><ol>
<li><p>常用选项：</p>
<p>allow address | CIDR | unix: | all。作用域： http,，server， location，limit_except</p>
<p>allow允许访问 ，address配置为IP地址</p>
<p>deny address | CIDR | unix: | all。作用域：http, server, location, limit_except</p>
<p>deny不允许访问 ，address配置为IP地址</p>
</li>
<li><p>在location下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	root html;</span><br><span class="line">    deny 192.168.1.74;#也可以配置IP段：192.168.1.0/24</span><br><span class="line">    allow all;</span><br><span class="line">    index show.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，location下的’/‘目录不允许IP为192.168.1.74的用户访问，其他地IP都可以访问。当192.168.1.74访问时，会出现403页面，不允许访问。</p>
</li>
<li><p>局限性：</p>
<p>由于http_access_module的访问控制是是针对客户端的IP来进行限制，凡是和nginx进行连接交互的都会被当作客户端，当真正的客户端与nginx之间有一下代理服务的时候，这种IP的控制就会失效。</p>
</li>
</ol>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/ip_fail_nginx.jpg" alt=""></p>
<ol start="4">
<li><p>局限性解决方法总结：</p>
<p>方法一： 采用http头信息控制访问，如HTTP_X_FORWARD_FOR<br>方法二： 结合geo模块<br>方法三： 通过HTTP自定义变量传递</p>
<p>http_x_forwarded_for头信息控制访问 会更好的解决该问题,它要求访问时必须带上所有用到的ip的地址信息</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http_x_forwarded_for &#x3D; Client IP, Proxy(1)IP, Proxy(2)IP,...</span><br></pre></td></tr></table></figure>

<h3 id="基于用户的信任登录：http-auth-basic-module"><a href="#基于用户的信任登录：http-auth-basic-module" class="headerlink" title="基于用户的信任登录：http_auth_basic_module"></a>基于用户的信任登录：http_auth_basic_module</h3><ol>
<li><p>常用选项：</p>
<p>auth_basic string | off。默认: auth_basic off。作用域：http, server, location, limit_except </p>
<p>auth_basic_user_file file。作用域： http, server, location, limit_except</p>
</li>
<li><p>配置：</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@msr-server ~]# yum install httpd-tools -y        #安装httpd-tools工具</span><br><span class="line">[root@msr-server conf.d]# htpasswd -c .&#x2F;auth_conf msr  #生成文件</span><br><span class="line">New password: </span><br><span class="line">Re-type new password: </span><br><span class="line">Adding password for user msr</span><br><span class="line">[root@msr-server conf.d]# ll                           #查看</span><br><span class="line">total 8</span><br><span class="line">-rw-r--r-- 1 root root   42 Jun 19 14:05 auth_conf     </span><br><span class="line">-rw-r--r-- 1 root root 1144 Jun 16 18:09 default.conf</span><br><span class="line">[root@msr-server conf.d]# more auth_conf               #查看内容</span><br><span class="line">msr:$apr1$ripuvDcJ$274OgHXOPwCb5kJ5dggq7.</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在location下配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">	root html;</span><br><span class="line">	auth_basic "AUth access!";</span><br><span class="line">	auth_basic_user_file /etc/nginx/conf.d/auth_conf;</span><br><span class="line">	index show.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再去访问，就会出现，认证框。虽然可以实现访问控制，但是用户信息依赖外部文件，操作管理机械，效率低下。所以可以Nginx结合LUA实现高效认证，Nginx和LDAR大同，利用nginx-auth-ldar模块</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/auth.png" alt=""></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx入门之初识nginx</title>
    <url>/posts/nginx/2020/06/202006151538.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><p><em>Nginx</em> (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<h1 id="Nginx的三个主要运用场景"><a href="#Nginx的三个主要运用场景" class="headerlink" title="Nginx的三个主要运用场景"></a>Nginx的三个主要运用场景</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx1.png" alt=""></p>
<ul>
<li>静态资源服务<ul>
<li>通过本地文件系统提供服务</li>
</ul>
</li>
<li>反向代理服务<ul>
<li>Ngnix强大性能</li>
<li>缓存</li>
<li>负载均衡</li>
</ul>
</li>
<li>API服务<ul>
<li>OpenResty</li>
</ul>
</li>
</ul>
<h1 id="Nginx的优点"><a href="#Nginx的优点" class="headerlink" title="Nginx的优点"></a>Nginx的优点</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/nginx/nginx2.png" alt=""></p>
<h1 id="Nginx的组成"><a href="#Nginx的组成" class="headerlink" title="Nginx的组成"></a>Nginx的组成</h1><p>Nginx二进制可执行文件：由各模块源码编译出的一个文件</p>
<p>Nginx配置文件Nginx.conf：控制Nginx的行为</p>
<p>access.log访问日志：记录每一条http请求信息</p>
<p>error.log错误日志：记录错误信息，可以定位问题</p>
<h1 id="Nginx的编译和安装"><a href="#Nginx的编译和安装" class="headerlink" title="Nginx的编译和安装"></a>Nginx的编译和安装</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.安装相关依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure>

<p>2.安装常用工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install wget httpd-tools vim</span><br></pre></td></tr></table></figure>

<p>3.查看防火墙状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br><span class="line">或者</span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure>

<p>4.开启了防火墙，所以配置iptables</p>
<p>安装iptables</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum install iptables<span class="literal">-services</span></span><br></pre></td></tr></table></figure>
<p>配置iptables规则</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure>

<p>常用的80和8080端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sample configuration <span class="keyword">for</span> iptables service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> you can edit this manually or use system-config-firewall</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> please <span class="keyword">do</span> not ask us to add additional ports/services to this default configuration</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [0:0]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [0:0]</span><br><span class="line">-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -jACCEPT    #添加的</span><br><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT  #添加的</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>

<p>重启生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart iptables</span><br></pre></td></tr></table></figure>

<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>1.下载Nginx压缩包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.nginx.org/download/nginx-1.17.7.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf nginx-1.17.7.tar.gz</span><br></pre></td></tr></table></figure>

<p>3.Nginx目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drwxr-xr-x. 6 1001 1001   4096 Jun 15 18:53 auto</span><br><span class="line">-rw-r--r--. 1 1001 1001 301572 Dec 24 23:00 CHANGES</span><br><span class="line">-rw-r--r--. 1 1001 1001 460207 Dec 24 23:00 CHANGES.ru</span><br><span class="line">drwxr-xr-x. 2 1001 1001    168 Jun 15 18:53 conf</span><br><span class="line">-rwxr-xr-x. 1 1001 1001   2502 Dec 24 23:00 configure</span><br><span class="line">drwxr-xr-x. 4 1001 1001     72 Jun 15 18:53 contrib</span><br><span class="line">drwxr-xr-x. 2 1001 1001     40 Jun 15 18:53 html</span><br><span class="line">-rw-r--r--. 1 1001 1001   1397 Dec 24 23:00 LICENSE</span><br><span class="line">drwxr-xr-x. 2 1001 1001     21 Jun 15 18:53 man</span><br><span class="line">-rw-r--r--. 1 1001 1001     49 Dec 24 23:00 README</span><br><span class="line">drwxr-xr-x. 9 1001 1001     91 Jun 15 18:53 src</span><br></pre></td></tr></table></figure>

<p>4.编译安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos7 nginx-1.6.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35</span><br><span class="line">[root@centos7 nginx-1.6.2]# make</span><br><span class="line">[root@centos7 nginx-1.6.2]# make install</span><br><span class="line">[root@centos7 nginx-1.6.2]#</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h3><p>安装目的目录或路径</p>
<ul>
<li>–prefix=/etc/nginx</li>
<li>–sbin-path=/usr/sbin/nginx</li>
<li>–modules-path=/usr/lib64/nginx/modules</li>
<li>–conf-path=/etc/nginx/nginx.conf</li>
<li>–error-log-path=/var/log/nginx/error.log</li>
<li>–http-log-path=/var/log/nginx/access.log</li>
<li>–pid-path=/var/run/nginx.pid (记录nginx启动服务的进程ID)</li>
<li>–lock-path=/var/run/nginx.lock</li>
</ul>
<p>编译生成的文件，执行对应模块时，Nginx所保留的临时性文件</p>
<ul>
<li>–http-client-body-temp-path=/var/cache/nginx/client_temp</li>
<li>–http-proxy-temp-path=/var/cache/nginx/proxy_temp</li>
<li>–http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp</li>
<li>–http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp</li>
<li>–http-scgi-temp-path=/var/cache/nginx/scgi_temp</li>
</ul>
<h3 id="rpm安装时的目录"><a href="#rpm安装时的目录" class="headerlink" title="rpm安装时的目录"></a>rpm安装时的目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;logrotate.d&#x2F;nginx</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：配置文件</code></li>
<li><code>作用：Nginx日志轮转，用于logrotate服务的日志切割（比如按天切割日志）</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx &#x2F;etc&#x2F;nginx&#x2F;nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：目录，配置文件</code></li>
<li><code>作用：Nginx主配置文件</code></li>
</ul>
<p>/etc/nginx/nginx.conf 是主配置文件，当Nginx启动优先读取，当没有变更的时候，会读取/etc/nginx/conf.d/default.conf（安装是默认加载的）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx&#x2F;fastcgi_params &#x2F;etc&#x2F;nginx&#x2F;uwsgi_params &#x2F;etc&#x2F;nginx&#x2F;scgi_params</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：配置文件</code></li>
<li><code>作用：cgi配置相关，fastcgi配置</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx&#x2F;koi-utf &#x2F;etc&#x2F;nginx&#x2F;koi-win &#x2F;etc&#x2F;nginx&#x2F;win-utf</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：配置文件</code></li>
<li><code>作用：编码转换映射转化文件</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;nginx&#x2F;mime.types</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>类型：配置文件</code></p>
</li>
<li><p><code>作用：设置http协议的ContentType(数据返回类型)与扩展名对应关系</code></p>
<p>当Nginx要处理一些不能识别的扩展名和文件类型的时候就需要编辑该文件</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx-debug.service &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service &#x2F;etc&#x2F;sysconfig&#x2F;nginx &#x2F;etc&#x2F;sysconfig&#x2F;nginx-debug</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：配置文件</code></li>
<li><code>作用：用于配置出系统守护进程管理器管理方式</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib64&#x2F;nginx &#x2F;etc&#x2F;nginx&#x2F;modules</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：目录</code></li>
<li><code>作用：Nginx模块目录</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;sbin&#x2F;nginx-debug</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：命令</code></li>
<li><code>作用：Nginx服务的启动管理的终端命令</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.6.2 &#x2F;usr&#x2F;share&#x2F;doc&#x2F;nginx-1.6.2&#x2F;COPYRIGHT &#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;nginx.8.gz</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：文件，目录</code></li>
<li><code>作用：Nginx的手册和帮助文件</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;cache&#x2F;nginx</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：目录</code></li>
<li><code>作用：Nginx的缓存目录</code></li>
</ul>
<p>Nginx处理可以做代理，还可以做缓存服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;log&#x2F;nginx</span><br></pre></td></tr></table></figure>

<ul>
<li><code>类型：目录</code></li>
<li><code>作用：Nginx的日志目录</code></li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot应用：整合actuator和Admin实现Spring Boot监控</title>
    <url>/posts/Spring%20Boot/2020/06/202006141700.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1>]]></content>
  </entry>
  <entry>
    <title>golang学习八：切片</title>
    <url>/posts/gloang/2020/06/202006131039.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><ul>
<li><p>切片的英文名称slice</p>
</li>
<li><p>切片:具有可变长度相同类型元素序列.</p>
</li>
<li><p>由于长度是可变,可以解决数组长度在数据个数不确定情况下浪费内存的问题.</p>
</li>
<li><p>切片和数组声明时语法最主要的区别就是长度</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="keyword">string</span>  <span class="comment">//切片</span></span><br><span class="line"><span class="keyword">var</span> array [<span class="number">3</span>]<span class="keyword">string</span> <span class="comment">//数组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>切片只声明时为nil,没有开辟内存空间,不能直接操作切片,需要先初始化</p>
<ul>
<li>注意:切片只能和nil进行判断是否相等<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice []<span class="keyword">string</span>  <span class="comment">//切片</span></span><br><span class="line">fmt.Println(slice==<span class="literal">nil</span>)<span class="comment">//输出:true</span></span><br><span class="line">fmt.Printf(<span class="string">"%p"</span>,slice)<span class="comment">//输出:0x0</span></span><br></pre></td></tr></table></figure>
<h1 id="定义切片"><a href="#定义切片" class="headerlink" title="定义切片"></a>定义切片</h1></li>
</ul>
</li>
<li><p>通过直接指定初始值定初始化一个切片变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">names := []<span class="keyword">string</span>&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;</span><br><span class="line">fmt.Println(names)</span><br></pre></td></tr></table></figure></li>
<li><p>定义完切片后就可以通过<code>切片对象[脚标]</code>取出或修改切片中元素内容.语法和数组相同</p>
</li>
</ul>
<h1 id="切片是引用类型"><a href="#切片是引用类型" class="headerlink" title="切片是引用类型"></a>切片是引用类型</h1><ul>
<li>引用类型在变量之间赋值时传递的是地址.引用类型变量就是这个类型的指针.切片就是引用类型</li>
<li>值类型在变量之间赋值时传递的是值的副本<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">names := []<span class="keyword">string</span>&#123;<span class="string">"hello"</span>, <span class="string">"world"</span>&#125;</span><br><span class="line">names1 := names</span><br><span class="line">names1[<span class="number">0</span>] = <span class="string">"a"</span></span><br><span class="line">fmt.Println(names, names1)<span class="comment">//输出:[a world] [a world]</span></span><br><span class="line">fmt.Printf(<span class="string">"%p %p"</span>,names,names1)<span class="comment">//地址相同</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="make函数"><a href="#make函数" class="headerlink" title="make函数"></a>make函数</h1><ul>
<li><p>Go语言中可以使用make函数创建slice 、 map、 channel、 interface</p>
</li>
<li><p>使用make函数定义无内容,但是不是nil的切片,意味着切片已经申请了内存空间</p>
<ul>
<li><code>make(类型,初始长度[,初始容量])</code></li>
<li>初始容量可以省略,默认和长度相等<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)     <span class="comment">//长度为0的切片,没有第三个参数表示容量和长度相等</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">2</span>) <span class="comment">//长度为0,容量为2</span></span><br><span class="line">fmt.Println(slice, slice1)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>长度表示切片中元素的实际个数,容量表示切片占用空间大小,且切片容量成倍增加.当增加到1024后按照一定百分比增加.</p>
<ul>
<li>len(slice) 查看切片的长度</li>
<li>cap(slice) 查看切片的容量<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)     <span class="comment">//长度为0的切片,没有第三个参数表示容量和长度相等</span></span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">3</span>) <span class="comment">//长度为0,容量为2</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice))</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1), <span class="built_in">cap</span>(slice1))</span><br></pre></td></tr></table></figure>
<h1 id="append-函数"><a href="#append-函数" class="headerlink" title="append()函数"></a>append()函数</h1></li>
</ul>
</li>
<li><p>append()在Go语言标准库中源码如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The append built-in function appends elements to the end of a slice. If</span></span><br><span class="line"><span class="comment">// it has sufficient capacity, the destination is resliced to accommodate the</span></span><br><span class="line"><span class="comment">// new elements. If it does not, a new underlying array will be allocated.</span></span><br><span class="line"><span class="comment">// Append returns the updated slice. It is therefore necessary to store the</span></span><br><span class="line"><span class="comment">// result of append, often in the variable holding the slice itself:</span></span><br><span class="line"><span class="comment">//	slice = append(slice, elem1, elem2)</span></span><br><span class="line"><span class="comment">//	slice = append(slice, anotherSlice...)</span></span><br><span class="line"><span class="comment">// As a special case, it is legal to append a string to a byte slice, like this:</span></span><br><span class="line"><span class="comment">//	slice = append([]byte("hello "), "world"...)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(slice []Type, elems ...Type)</span> []<span class="title">Type</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>可以向切片中添加一个或多个值,添加后必须使用切片接收append()函数返回值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))<span class="comment">//输出:0 0</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"msr"</span>, <span class="string">"MaiShuRen"</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))<span class="comment">//输出:2 2</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"MaiShuRen"</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s))<span class="comment">//输出:3 4</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果添加一次添加多个值,且添加后的长度大于扩容一次的大小,容量和长度相等.等到下次添加内容时如果不超出扩容大小,在现在的基础上进行翻倍</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:0 0</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"msr"</span>, <span class="string">"MaiShuRen"</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:2 2</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"MaiShuRen"</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:3 4</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:9 9</span></span><br><span class="line">s = <span class="built_in">append</span>(s,<span class="string">"10"</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(s), <span class="built_in">cap</span>(s)) <span class="comment">//输出:10 18</span></span><br></pre></td></tr></table></figure></li>
<li><p>也可以把一个切片的内容直接添加到另一个切片中.需要注意语法中有三个点</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">s1 := []<span class="keyword">string</span>&#123;<span class="string">"msr"</span>, <span class="string">"MaiShuRen"</span>&#125;</span><br><span class="line">s = <span class="built_in">append</span>(s, s1...) <span class="comment">//注意此处,必须有三个点</span></span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="通过数组产生切片"><a href="#通过数组产生切片" class="headerlink" title="通过数组产生切片"></a>通过数组产生切片</h1><ul>
<li><p>定义数组后,取出数组中一个片段,这个片段就是切片类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">names := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"msr"</span>, <span class="string">"MaiShuRen"</span>, <span class="string">"Mai"</span>&#125;</span><br><span class="line">s := names[<span class="number">0</span>:<span class="number">2</span>]     <span class="comment">//包前不包后</span></span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, s) <span class="comment">//输出:[]string</span></span><br><span class="line">fmt.Println(s)      <span class="comment">//输出:[msr MaiShuRen]</span></span><br></pre></td></tr></table></figure></li>
<li><p>切片是指针,指向数组元素地址,修改切片的内容,数组的内容会跟随变化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">names := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"msr"</span>, <span class="string">"MaiShuRen"</span>, <span class="string">"Mai"</span>&#125;</span><br><span class="line">s := names[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">//包前不包后</span></span><br><span class="line">fmt.Printf(<span class="string">"%p %p"</span>,s,&amp;names[<span class="number">0</span>])<span class="comment">//输出的地址是相同的</span></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">"Go语言"</span></span><br><span class="line">fmt.Println(s)     <span class="comment">//输出:[Go语言 MaiShuRen]</span></span><br><span class="line">fmt.Println(names) <span class="comment">//输出:[Go语言 MaiShuRen Mai]</span></span><br></pre></td></tr></table></figure></li>
<li><p>当切片内容在增加时</p>
<ul>
<li>如果增加后切片的长度没有超出数组,修改切片也是在修改数组</li>
<li>如果增加后切片的长度超出数组,会重新开辟一块空间放切片的内容</li>
<li>通过下面代码也正面了切片中内容存在一块连续空间(和数组一样)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">names := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"msr"</span>, <span class="string">"MaiShuRen"</span>, <span class="string">"Mai"</span>&#125;</span><br><span class="line">s := names[<span class="number">0</span>:<span class="number">2</span>] <span class="comment">//包前不包后</span></span><br><span class="line">fmt.Printf(<span class="string">"%p %p\n"</span>,s,&amp;names[<span class="number">0</span>])</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">"Go语言"</span></span><br><span class="line">s=<span class="built_in">append</span>(s,<span class="string">"区块链"</span>)</span><br><span class="line">fmt.Println(s)     <span class="comment">//输出:[Go语言 MaiShuRen 区块链]</span></span><br><span class="line">fmt.Println(names) <span class="comment">//输出:[Go语言 MaiShuRen 区块链]</span></span><br><span class="line">fmt.Printf(<span class="string">"%p %p\n"</span>,s,&amp;names[<span class="number">0</span>])<span class="comment">//地址相同</span></span><br><span class="line"></span><br><span class="line">s=<span class="built_in">append</span>(s,<span class="string">"超出了数组长度"</span>)</span><br><span class="line">fmt.Println(s)     <span class="comment">//输出:[Go语言 MaiShuRen 区块链 超出了数组长度]</span></span><br><span class="line">fmt.Println(names) <span class="comment">//输出:[Go语言 MaiShuRen 区块链]</span></span><br><span class="line">fmt.Printf(<span class="string">"%p %p\n"</span>,s,&amp;names[<span class="number">0</span>])<span class="comment">//切片地址改变</span></span><br></pre></td></tr></table></figure>
<h1 id="删除实现"><a href="#删除实现" class="headerlink" title="删除实现"></a>删除实现</h1></li>
</ul>
</li>
<li><p>Go语言标准库中没有提供删除的函数</p>
</li>
<li><p>切片也可以取其中的一段形成子切片,利用这个特性可以实现删除效果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := []<span class="keyword">int</span> &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">//要删除脚标为n的元素</span></span><br><span class="line">n:= <span class="number">2</span></span><br><span class="line">num1 :=num[<span class="number">0</span>:n]</span><br><span class="line">num1= <span class="built_in">append</span>(num1,num[n+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Println(num1)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="copy函数"><a href="#copy函数" class="headerlink" title="copy函数"></a>copy函数</h1><ul>
<li>通过copy函数可以把一个切片内容复制到另一个切片中</li>
<li>Go语言标准库源码定义如下<ul>
<li>第一个参数是目标切片,接收第二个参数内容</li>
<li>第二个参数是源切片,把内容拷贝到第一个参数中<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The copy built-in function copies elements from a source slice into a</span></span><br><span class="line"><span class="comment">// destination slice. (As a special case, it also will copy bytes from a</span></span><br><span class="line"><span class="comment">// string to a slice of bytes.) The source and destination may overlap. Copy</span></span><br><span class="line"><span class="comment">// returns the number of elements copied, which will be the minimum of</span></span><br><span class="line"><span class="comment">// len(src) and len(dst).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src []Type)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>拷贝时严格按照脚标进行拷贝.且不会对目标切片进行扩容</li>
</ul>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><ul>
<li>把短切片拷贝到长切片中<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1:=[]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2:=[]<span class="keyword">int</span> &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(s2,s1)</span><br><span class="line">fmt.Println(s1)<span class="comment">//输出:[1 2]</span></span><br><span class="line">fmt.Println(s2)<span class="comment">//输出:[1 2 5 6]</span></span><br></pre></td></tr></table></figure></li>
<li>把长切片拷贝到短切片中<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1:=[]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2:=[]<span class="keyword">int</span> &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(s1,s2)</span><br><span class="line">fmt.Println(s1)<span class="comment">//输出:[3 4]</span></span><br><span class="line">fmt.Println(s2)<span class="comment">//输出:[3 4 5 6]</span></span><br></pre></td></tr></table></figure></li>
<li>把切片片段拷贝到切片中<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s1:=[]<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2:=[]<span class="keyword">int</span> &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="built_in">copy</span>(s1,s2[<span class="number">1</span>:])</span><br><span class="line">fmt.Println(s1)<span class="comment">//输出:[4 5]</span></span><br><span class="line">fmt.Println(s2)<span class="comment">//输出:[3 4 5 6]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="使用copy完成删除元素"><a href="#使用copy完成删除元素" class="headerlink" title="使用copy完成删除元素"></a>使用copy完成删除元素</h1><ul>
<li>使用copy函数可以保证原切片内容不变<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">n := <span class="number">2</span> <span class="comment">//要删除元素的索引</span></span><br><span class="line">newSlice := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br><span class="line"><span class="built_in">copy</span>(newSlice, s[<span class="number">0</span>:n])</span><br><span class="line">newSlice = <span class="built_in">append</span>(newSlice, s[n+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Println(s)        <span class="comment">//原切片不变</span></span><br><span class="line">fmt.Println(newSlice) <span class="comment">//删除指定元素后的切片</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="切片的扩容策略"><a href="#切片的扩容策略" class="headerlink" title="切片的扩容策略"></a>切片的扩容策略</h1><ol>
<li>如果申请的容量大于原来的两倍，那就直接扩容至新申请的容量。如：长度为3，容量为4的切片，现添加6个元素进入，那么长度就会变成9，大于原容量的两倍，所以切片的新容量会也会变成9</li>
<li>如果小于1024，那么直接扩容两倍</li>
<li>如果大于1024，就按照1.25被去扩容</li>
<li>具体存储的值类型不同，扩容策略也有一定的不同</li>
</ol>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习七：goto和label</title>
    <url>/posts/golang/2020/06/202006131037.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h1><ul>
<li>goto是Go语言中的一个关键字</li>
<li>goto让编译器执行时跳转到特定位置<ul>
<li>Loop是标记名(Label),名称任意,习惯上名称为Loop<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	fmt.Println(<span class="string">"执行程序"</span>)</span><br><span class="line">	i := <span class="number">6</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">6</span> &#123;</span><br><span class="line">		<span class="keyword">goto</span> Loop</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"if下面输出"</span>)</span><br><span class="line">Loop:</span><br><span class="line">	fmt.Println(<span class="string">"loop"</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>可以有多个,但是标签(Labal)定义了就必须使用<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	fmt.Println(<span class="string">"执行程序"</span>)</span><br><span class="line">	i := <span class="number">6</span></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">6</span> &#123;</span><br><span class="line">		<span class="keyword">goto</span> Loop</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"if下面输出"</span>)</span><br><span class="line">Loop:</span><br><span class="line">	fmt.Println(<span class="string">"loop"</span>)</span><br><span class="line">Loop1: <span class="comment">//报错:label Loop1 defined and not used</span></span><br><span class="line">	fmt.Println(<span class="string">"Loop1"</span>)</span><br></pre></td></tr></table></figure></li>
<li>goto也可以用于跳出循环,执行指定标签位置代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		fmt.Println(i)</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">			<span class="keyword">goto</span> abc</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"for循环执行结束"</span>)</span><br><span class="line">abc:</span><br><span class="line">	fmt.Println(<span class="string">"abc"</span>)</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习六：for循环</title>
    <url>/posts/golang/2020/06/202006131031.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><ul>
<li>循环:让程序多次执行相同的代码块</li>
<li>for循环是Go语言中唯一一个循环结构</li>
<li>for循环经典语法<ul>
<li>先执行表达式1</li>
<li>执行表达式判断是否成立,如果成立执行循环体</li>
<li>循环体执行完成后,执行表达式3</li>
<li>再次执行表达式2,判断是否成立.<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for 表达式1;表达式2;表达式3&#123;</span><br><span class="line">  &#x2F;&#x2F;循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>for循环用的最多的地方就是遍历数组或切片等<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2></li>
<li>经典for循环结构中 , for关键字后面有三个表达式,且每个表达式都可以省略<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ; j &lt; <span class="number">5</span>; &#123;</span><br><span class="line">	fmt.Println(j)</span><br><span class="line">	j++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>for关键字后面也可以只有一个表达式,表示如果条件成立执行循环体代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j &lt; <span class="number">5</span> &#123;</span><br><span class="line">	fmt.Println(j)</span><br><span class="line">	j++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用for循环遍历数组"><a href="#使用for循环遍历数组" class="headerlink" title="使用for循环遍历数组"></a>使用for循环遍历数组</h2></li>
<li>可以通过数组的长度判断循环结束条件遍历整个数组<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"smallming"</span>, <span class="string">"张"</span>, <span class="string">"佳明哥"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr); i++ &#123;</span><br><span class="line">	fmt.Println(arr[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>for循环遍历数组等时常与range结合使用<ul>
<li>range函数返回两个值,第一个是脚标,第二个是内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"smallming"</span>, <span class="string">"张"</span>, <span class="string">"佳明哥"</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, n := <span class="keyword">range</span> arr &#123;</span><br><span class="line">	<span class="comment">//其中n=arr[i]</span></span><br><span class="line">	fmt.Println(i, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h1 id="双重for循环"><a href="#双重for循环" class="headerlink" title="双重for循环"></a>双重for循环</h1><ul>
<li>可以在循环中执行循环,称为双重for循环</li>
<li>代码示例<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line">		fmt.Println(i, j)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>上面代码中注意:<ul>
<li>只有当子循环完全执行结束才能再次执行外侧循环.因为循环体执行完才能执行表达式3<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1></li>
</ul>
</li>
<li>排序就是把一组数据按照特定的顺序重新排列.可以是升序,降序等</li>
<li>冒泡排序利用双重for循环把最大(小)的值移动到一侧,每次可以判断出一个数据,如果有n个数组,执行n-1次循环就可以完成排序</li>
<li>排序代码(升序还是降序主要是看if判断是大于还是小于)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(arr)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(arr)-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">			arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h1><ul>
<li>continue关键字控制结束本次 *<em>循环体 *</em>结束,执行表达式三.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">	fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">2</span> || i == <span class="number">3</span> &#123;</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在双重for循环中continue默认影响最内侧循环,与最外层循环无关<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="number">2</span>; k++ &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">			<span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Println(k, i, <span class="string">"结束"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li>Go语言执行标签写法,可以通过定义标签让continue控制影响哪个for循环<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myfor:<span class="keyword">for</span> k := <span class="number">0</span>; k &lt; <span class="number">2</span>; k++ &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> i == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">continue</span> myfor</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(k, i, <span class="string">"结束"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="break"><a href="#break" class="headerlink" title="break"></a>break</h1></li>
<li>break可以中断for循环,无论for循环还有几次执行,立即停止<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在双重for循环中,break默认也影响到最近的for循环<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> j == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(i, j)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>break也可以通过定义标签,控制break对哪个for循环生效<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">myfor:<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">	<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">2</span>; j++ &#123;</span><br><span class="line">		<span class="keyword">if</span> j == <span class="number">1</span> &#123;</span><br><span class="line">			<span class="keyword">break</span> myfor</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Println(i, j)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习五：常用数学函数与数组</title>
    <url>/posts/golang/2020/06/202006131027.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="常用数学函数"><a href="#常用数学函数" class="headerlink" title="常用数学函数"></a>常用数学函数</h1><ul>
<li>math包提供了基本数学常数和数学函数</li>
<li>math包提供的数学常数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Mathematical constants.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	E   = <span class="number">2.71828182845904523536028747135266249775724709369995957496696763</span> </span><br><span class="line">	Pi  = <span class="number">3.14159265358979323846264338327950288419716939937510582097494459</span> </span><br><span class="line">	Phi = <span class="number">1.61803398874989484820458683436563811772030917980576286213544862</span> </span><br><span class="line">	Sqrt2   = <span class="number">1.41421356237309504880168872420969807856967187537694807317667974</span></span><br><span class="line">	SqrtE   = <span class="number">1.64872127070012814684865078781416357165377610071014801157507931</span> </span><br><span class="line">	SqrtPi  = <span class="number">1.77245385090551602729816748334114518279754945612238712821380779</span> </span><br><span class="line">	SqrtPhi = <span class="number">1.27201964951406896425242246173749149171560804184009624861664038</span> </span><br><span class="line">	Ln2    = <span class="number">0.693147180559945309417232121458176568075500134360255254120680009</span> </span><br><span class="line">	Log2E  = <span class="number">1</span> / Ln2</span><br><span class="line">	Ln10   = <span class="number">2.30258509299404568401799145468436420760110148862877297603332790</span> </span><br><span class="line">	Log10E = <span class="number">1</span> / Ln10</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Floating-point limit values.</span></span><br><span class="line"><span class="comment">// Max is the largest finite value representable by the type.</span></span><br><span class="line"><span class="comment">// SmallestNonzero is the smallest positive, non-zero value representable by the type.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	MaxFloat32= <span class="number">3.40282346638528859811704183484516925440e+38</span>  <span class="comment">// 2**127 * (2**24 - 1) / 2**23</span></span><br><span class="line">	SmallestNonzeroFloat32 = <span class="number">1.401298464324817070923729583289916131280e-45</span> <span class="comment">// 1 / 2**(127 - 1 + 23)</span></span><br><span class="line"></span><br><span class="line">	MaxFloat64= <span class="number">1.797693134862315708145274237317043567981e+308</span> <span class="comment">// 2**1023 * (2**53 - 1) / 2**52</span></span><br><span class="line">	SmallestNonzeroFloat64 = <span class="number">4.940656458412465441765687928682213723651e-324</span> <span class="comment">// 1 / 2**(1023 - 1 + 52)</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Integer limit values.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	MaxInt8   = <span class="number">1</span>&lt;&lt;<span class="number">7</span> - <span class="number">1</span></span><br><span class="line">	MinInt8   = <span class="number">-1</span> &lt;&lt; <span class="number">7</span></span><br><span class="line">	MaxInt16  = <span class="number">1</span>&lt;&lt;<span class="number">15</span> - <span class="number">1</span></span><br><span class="line">	MinInt16  = <span class="number">-1</span> &lt;&lt; <span class="number">15</span></span><br><span class="line">	MaxInt32  = <span class="number">1</span>&lt;&lt;<span class="number">31</span> - <span class="number">1</span></span><br><span class="line">	MinInt32  = <span class="number">-1</span> &lt;&lt; <span class="number">31</span></span><br><span class="line">	MaxInt64  = <span class="number">1</span>&lt;&lt;<span class="number">63</span> - <span class="number">1</span></span><br><span class="line">	MinInt64  = <span class="number">-1</span> &lt;&lt; <span class="number">63</span></span><br><span class="line">	MaxUint8  = <span class="number">1</span>&lt;&lt;<span class="number">8</span> - <span class="number">1</span></span><br><span class="line">	MaxUint16 = <span class="number">1</span>&lt;&lt;<span class="number">16</span> - <span class="number">1</span></span><br><span class="line">	MaxUint32 = <span class="number">1</span>&lt;&lt;<span class="number">32</span> - <span class="number">1</span></span><br><span class="line">	MaxUint64 = <span class="number">1</span>&lt;&lt;<span class="number">64</span> - <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>列举出常用的数学函数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j <span class="keyword">float64</span> = <span class="number">12.3</span>, <span class="number">9.6</span></span><br><span class="line"><span class="comment">//向下取整,</span></span><br><span class="line">fmt.Println(math.Floor(i)) <span class="comment">//输出:12</span></span><br><span class="line"><span class="comment">//向上取整</span></span><br><span class="line">fmt.Println(math.Ceil(i)) <span class="comment">//输出:13</span></span><br><span class="line"><span class="comment">//绝对值</span></span><br><span class="line">fmt.Println(math.Abs(i)) <span class="comment">//输出:12.3</span></span><br><span class="line"><span class="comment">//返回值分别整数位和小数位,小数位可能出现误差</span></span><br><span class="line">num, decimal := math.Modf(i)</span><br><span class="line">fmt.Println(num, decimal)</span><br><span class="line"><span class="comment">//返回两个变量中大的值</span></span><br><span class="line">fmt.Println(math.Max(i, j)) <span class="comment">//输出:12.3</span></span><br><span class="line"><span class="comment">//返回两个变量中小的值</span></span><br><span class="line">fmt.Println(math.Min(i, j)) <span class="comment">//输出:9.6</span></span><br><span class="line"><span class="comment">//x的y次方</span></span><br><span class="line">fmt.Println(math.Pow(<span class="number">3</span>, <span class="number">2</span>)) <span class="comment">//输出:输出9</span></span><br><span class="line"><span class="comment">//四舍五入</span></span><br><span class="line">fmt.Println(math.Round(i)) <span class="comment">//输出:12</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><ul>
<li>math/rand实现了伪随机数生成器</li>
<li>在Go语言中随机数需要设置种子,如果不设置种子随机数的结果每次运行都相同。</li>
<li>默认种子是1,且相同种子产生的随机数是相同的.</li>
<li>可以使用当前时间的纳秒差计算随机数,在一定程度上保证了种子的唯一性<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">fmt.Println(rand.Int63n(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h2><ul>
<li><p>数组:具有固定长度相同类型元素序列</p>
</li>
<li><p>声明数组的语法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//var 对象名 [长度]元素类型</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(arr) <span class="comment">//输出:[0 0 0 0 0]</span></span><br></pre></td></tr></table></figure></li>
<li><p>数组就是内存中一段固定长度的连续空间.</p>
</li>
<li><p>声明数组后数组就会在内存中开辟一块连续空间,每个值称为数组的元素,且元素值为类型对应的默认值.例如int类型默认值为0,string类型默认值为空字符串</p>
</li>
<li><p>数组中每个元素按照顺序都有自己整数类型的脚标,脚标从第一个元素为0向后依次加1<br><img src="images/05_03_array.png" alt=""></p>
</li>
<li><p>数组中实际开发中主要作用是充当临时容器,因为声明一个数组变量比声明多个相同类型变量在操作时更加方便</p>
<h2 id="数组的创建和赋值"><a href="#数组的创建和赋值" class="headerlink" title="数组的创建和赋值"></a>数组的创建和赋值</h2></li>
<li><p>可以在声明数组时可以同时给数组赋值,赋值时要求长度必须大于等于初始值个数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一:完整写法</span></span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>]<span class="keyword">int</span> = [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//方式二:短变量方式</span></span><br><span class="line">arr2 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//方式三:长度大于初始值个数.长度为4,只给前三个元素赋值,其余元素为默认值</span></span><br><span class="line">arr3 := [<span class="number">4</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//方式四:赋值时不写长度,数组长度根据元素个数确定</span></span><br><span class="line">arr4 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以通过:<strong>数组名[脚标]</strong>对数组中元素进行操作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(arr)</span><br><span class="line"><span class="comment">//通过脚标对数组中元素进行重新赋值</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">6</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="number">7</span></span><br><span class="line">fmt.Println(arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li>
<li><p>通过len(数组变量)获取数组长度,数组脚标最大值为长度减一,如果超出这个范围将会报错</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(arr))<span class="comment">//输出:3</span></span><br><span class="line">arr[<span class="number">3</span>]=<span class="number">5</span><span class="comment">//错误信息:invalid array index 3 (out of bounds for 3-element array)</span></span><br></pre></td></tr></table></figure>
<h2 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h2></li>
<li><p>在Go语言中数组是值类型,和之前学习的int或float64等类型相同,把一个数组变量赋值给另一个数组变量时为复制副本,重新开辟一块空间</p>
</li>
<li><p>使用==比较数组中值是否相等</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">arr2:=arr</span><br><span class="line">fmt.Println(arr,arr2)</span><br><span class="line">fmt.Printf(<span class="string">"%p %p"</span>,&amp;arr,&amp;arr2)<span class="comment">//地址不同</span></span><br><span class="line">fmt.Println(arr==arr2)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ul>
<li><p>二维数组表示一个数组变量中每个元素又是一个数组变量</p>
</li>
<li><p>声明二维数组的语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var arr [n][m]int</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 arr[n]时返回一个 arr[m]类型的数组</p>
</li>
<li><p>图示<br><img src="images/2_5_4_erweishuzu.png" alt="二维数组"></p>
</li>
</ul>
<h2 id="二维数组的使用"><a href="#二维数组的使用" class="headerlink" title="二维数组的使用"></a>二维数组的使用</h2><ul>
<li><p>声明并创建二维数组</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写在同一行,最后一个元素后面不需要有逗号</span></span><br><span class="line"><span class="comment">//arr6:=[3][3]int&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;&#125;</span></span><br><span class="line">arr := [<span class="number">3</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">	&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">	&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">	&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;, <span class="comment">//每个元素分行写,最后一个必须有逗号</span></span><br><span class="line">&#125;</span><br><span class="line">arr0 := arr[<span class="number">0</span>]</span><br><span class="line">fmt.Println(arr0[<span class="number">0</span>], arr0[<span class="number">1</span>], arr[<span class="number">2</span>])</span><br><span class="line"><span class="comment">//上面等效于下面的写法.习惯上多下下面的方式</span></span><br><span class="line">fmt.Println(arr[<span class="number">0</span>][<span class="number">0</span>], arr[<span class="number">0</span>][<span class="number">1</span>], arr[<span class="number">0</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2></li>
<li><p>理论上支持无限多维数组(只要内存够用)</p>
</li>
<li><p>三维数组可以理解成,一维数组中每个元素都是二维数组.四维数组理解成,一个一维数组中每个元素都是三维数组</p>
</li>
<li><p>无论是几维数组,都符号元素类型是相同的</p>
</li>
<li><p>实际开发中多维数组使用并不多,在一定程度上,程序员使用多维数组很容易出错</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">arr := [<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">		&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">		&#123;<span class="number">7</span>, <span class="number">8</span>&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(arr)</span><br><span class="line"><span class="comment">//几维数组在操作元素时,数组变量后面就有几个[]</span></span><br><span class="line">fmt.Println(arr[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习四：流程控制</title>
    <url>/posts/golang/2020/06/202006131013.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="条件判断if"><a href="#条件判断if" class="headerlink" title="条件判断if"></a>条件判断if</h1><ul>
<li><p>在程序开发中经常需要判断.根据情况不同,程序执行的分支也不同.这个时候就可以使用if</p>
</li>
<li><p>if在程序中代表<strong>如果</strong>，如果条件成立就执行,否则就不执行</p>
</li>
<li><p>if的语法结构,在编译器中表达式两侧可以写小括号,但是通常省略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;单独使用</span><br><span class="line">if 表达式 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在if语法结构中所有表达式最终结果都是bool类型,true代表成立执行对应代码</p>
</li>
</ul>
<h2 id="if单独使用"><a href="#if单独使用" class="headerlink" title="if单独使用"></a>if单独使用</h2><ul>
<li>if单独使用时只影响到自己对应的代码块<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">65</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可以在if 表达式中声明变量,这个变量的范围只在if中能够使用<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> score:=<span class="number">60</span>; score&gt;=<span class="number">60</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">"及格了"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>多个单独if使用时相互没有影响<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">65</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> score &lt; <span class="number">60</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"不及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h2></li>
<li>程序调试,俗称:debug,通过特定的手段,一个语句一个语句的观察程序执行过程</li>
<li>debug经常用在调错中,当结果不符合预期,代码又很多时,debug可以找出哪行出现问题</li>
<li>程序调试步骤<ul>
<li>在程序中某行前面单击出现红色圆形</li>
<li>右键,选择Debug ‘文件名’</li>
<li>通过点击按钮或使用快捷键选择:向下执行(F6),进入调用(F5),向上跳出(F7)观察程序 </li>
</ul>
</li>
</ul>
<h2 id="if-…-else-结构"><a href="#if-…-else-结构" class="headerlink" title="if … else 结构"></a>if … else 结构</h2><ul>
<li><p>if 可以单独使用也可以结合else使用,当满足互斥条件时使用if…else结构</p>
</li>
<li><p>if..else结构中如果if成立执行if否则执行else</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">59</span></span><br><span class="line">	<span class="keyword">if</span> i &gt;= <span class="number">60</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"及格"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">	fmt.Println(<span class="string">"不及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="if多重嵌套"><a href="#if多重嵌套" class="headerlink" title="if多重嵌套"></a>if多重嵌套</h2></li>
<li><p>if每种结构都可以相互嵌套</p>
</li>
<li><p>理论讲if可以很多层嵌套</p>
</li>
<li><p>两层嵌套代码示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">77</span></span><br><span class="line">	<span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">70</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"及格"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> score &gt;= <span class="number">70</span> &amp;&amp; score &lt; <span class="number">80</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"中等"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> score &gt;= <span class="number">80</span> &amp;&amp; score &lt; <span class="number">90</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"良好"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> score &gt;= <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">100</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">"优秀"</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"不及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="if-…-else-if-…-else结构"><a href="#if-…-else-if-…-else结构" class="headerlink" title="if … else if …. else结构"></a>if … else if …. else结构</h2></li>
<li><p>当需要判断多个条件时使用这种结构</p>
</li>
<li><p>这个结构是一个整体.只要有一个条件成立后面的都不判断,立即结束</p>
</li>
<li><p>else可以没有</p>
</li>
<li><p>改写嵌套代码,修改如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">77</span></span><br><span class="line">	<span class="keyword">if</span> score &gt;= <span class="number">90</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"优秀"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">80</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"良好"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">70</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"中等"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt;= <span class="number">60</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"及格"</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">"不及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="switch条件判断"><a href="#switch条件判断" class="headerlink" title="switch条件判断"></a>switch条件判断</h1><h2 id="switch结构介绍"><a href="#switch结构介绍" class="headerlink" title="switch结构介绍"></a>switch结构介绍</h2><ul>
<li>switch也属于条件判断的语句</li>
<li>支持多种写法,和if .. else if …else 结构的功能类似,但是里面的细节需要注意的地方更多</li>
<li>switch基本语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">switch [定义变量;] [变量]&#123;</span><br><span class="line">  case [条件&#x2F;具体值]:</span><br><span class="line">  	&#x2F;&#x2F;代码</span><br><span class="line">  case [条件&#x2F;具体值]:</span><br><span class="line">  	&#x2F;&#x2F;代码</span><br><span class="line">  default:</span><br><span class="line">    &#x2F;&#x2F;代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>switch每个case分支默认只执行一个且是从上向下执行</li>
<li>default上下位置没有影响,当且仅当所有case都不成立时才执行default</li>
</ul>
<h2 id="switch用法-一"><a href="#switch用法-一" class="headerlink" title="switch用法(一)"></a>switch用法(一)</h2><ul>
<li>当变量只有固定的几个值时可以使用switch结构<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	num := <span class="number">16</span></span><br><span class="line">	<span class="keyword">switch</span> num &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"2进制"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		fmt.Println(<span class="string">"8进制"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"10进制"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">		fmt.Println(<span class="string">"16进制"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"内容不正确"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>switch也支持在条件位置定义变量,变量有效范围为当前switch<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> num := <span class="number">16</span>; num &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"2进制"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		fmt.Println(<span class="string">"8进制"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">		fmt.Println(<span class="string">"10进制"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">		fmt.Println(<span class="string">"16进制"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"内容不正确"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="switch用法-二"><a href="#switch用法-二" class="headerlink" title="switch用法(二)"></a>switch用法(二)</h2></li>
<li>当条件是范围而不是固定值时<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="number">71</span></span><br><span class="line">	<span class="keyword">switch</span> &#123;</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">		fmt.Println(<span class="string">"优秀"</span>)</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">		fmt.Println(<span class="string">"良好"</span>)</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">70</span>:</span><br><span class="line">		fmt.Println(<span class="string">"中等"</span>)</span><br><span class="line">	<span class="keyword">case</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">		fmt.Println(<span class="string">"及格"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"不及格"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="switch用法-三"><a href="#switch用法-三" class="headerlink" title="switch用法(三)"></a>switch用法(三)</h2></li>
<li>case条件支持多个值,每个值使用逗号分开<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	month := <span class="number">5</span></span><br><span class="line">	<span class="keyword">switch</span> month &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>:</span><br><span class="line">		fmt.Println(<span class="string">"31天"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"28或29天"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"30天"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="穿透和中断"><a href="#穿透和中断" class="headerlink" title="穿透和中断"></a>穿透和中断</h2></li>
<li>switch结构中某个最多只能执行一个case,使用fallthrough可以让下一个case/default继续执行<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> num := <span class="number">1</span>; num &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		fmt.Println(<span class="string">"4"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"不是1,2,3,4"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>break可以用在switch和循环中,表示立即结束,无论当前结构后面还有多少代码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> num := <span class="number">1</span>; num &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">		fmt.Println(<span class="string">"break后面代码都不执行"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		fmt.Println(<span class="string">"3"</span>)</span><br><span class="line">		<span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		fmt.Println(<span class="string">"4"</span>)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">"不是1,2,3,4"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习三：golang基础语法</title>
    <url>/posts/golang/2020/06/202006122240.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h1><ul>
<li>在程序中输出使用频率很高,使用输出语句可以在程序执行过程中把一些结果输出到控制台中,程序员通过控制台中输出结果判断是否符合预期</li>
<li>在Go语言中有多种输出方式,不同的输出适用场景不同.归纳起来三种,每种还分为3种方式(原内容,原内容+ln,原内容+f)<ul>
<li>PrintXX()</li>
<li>FprintXX()</li>
<li>SprintXX()<h2 id="FprintXX"><a href="#FprintXX" class="headerlink" title="FprintXX"></a>FprintXX</h2></li>
</ul>
</li>
<li>FprintXX在Go Web中使用比较多,把内容写到响应流中.</li>
<li>以Fprintln()举例,源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Fprintln formats using the default formats for its operands and writes to w.</span></span><br><span class="line"><span class="comment">// Spaces are always added between operands and a newline is appended.</span></span><br><span class="line"><span class="comment">// It returns the number of bytes  written and any write error encountered.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">	p := newPrinter()</span><br><span class="line">	p.doPrintln(a)</span><br><span class="line">	n, err = w.Write(p.buf)</span><br><span class="line">	p.free()</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>函数参数中第一个参数是输出流,后面参数是内容,表示把内容写入到输出流中</li>
<li>第一个返回值表示输出内容长度(字节数),第二个返回值表示错误,如果没有错误取值nil<ul>
<li>Fprintln()输出后会添加换行符,所以长度比内容多1个</li>
<li>Fprintln()源码中p.doPrintln(a)的源码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// doPrintln is like doPrint but always adds a space between arguments</span></span><br><span class="line"><span class="comment">// and a newline after the last argument.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *pp)</span> <span class="title">doPrintln</span><span class="params">(a []<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> argNum, arg := <span class="keyword">range</span> a &#123;</span><br><span class="line">		<span class="keyword">if</span> argNum &gt; <span class="number">0</span> &#123;</span><br><span class="line">			p.buf.WriteByte(<span class="string">' '</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		p.printArg(arg, <span class="string">'v'</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	p.buf.WriteByte(<span class="string">'\n'</span>)<span class="comment">//此处多添加了换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>FprintXX()支持下面三种方式<ul>
<li>os.Stdout 表示控制台输出流<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Fprint(os.Stdout, <span class="string">"内容1"</span>)<span class="comment">//向流中写入内容,多个内容之间没有空格</span></span><br><span class="line">	fmt.Fprintln(os.Stdout, <span class="string">"内容2"</span>)<span class="comment">//向流中写入内容后额外写入换行符,多个内容之间空格分割</span></span><br><span class="line">	fmt.Fprintf(os.Stdout, <span class="string">"%s"</span>, <span class="string">"内容3"</span>)<span class="comment">//根据verb格式向流中写入内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PrintXX"><a href="#PrintXX" class="headerlink" title="PrintXX"></a>PrintXX</h2></li>
</ul>
</li>
<li>PrintXX支持下面三种方式<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">"内容"</span>,<span class="string">"内容"</span>)<span class="comment">//输出内容后换行</span></span><br><span class="line">	fmt.Print(<span class="string">"内容"</span>,<span class="string">"内容"</span>)<span class="comment">//输出内容后不换行</span></span><br><span class="line">	fmt.Printf(<span class="string">"verb"</span>,<span class="string">"内容"</span>)<span class="comment">//根据verb输出指定格式内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>以Println()举例,源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Println formats using the default formats for its operands and writes to standard output.</span></span><br><span class="line"><span class="comment">// Spaces are always added between operands and a newline is appended.</span></span><br><span class="line"><span class="comment">// It returns the number of bytes written and any write error encountered.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Fprintln(os.Stdout, a...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>可以看出Println()底层实际是Fprintln(),返回值依然是内容长度和错误信息<h2 id="SPrintXX"><a href="#SPrintXX" class="headerlink" title="SPrintXX"></a>SPrintXX</h2></li>
<li>以Sprintln()举例,和Println()主要的区别是:<ul>
<li>Sprintln()把形成结果以字符串返回,并没有打印到控制台</li>
<li>Println()把结果打印到控制台,返回内容长度和错误</li>
</ul>
</li>
<li>所以从严格意义角度讲SprintXX不是打印输出,而更像字符串转换</li>
<li>源码如下<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sprintln formats using the default formats for its operands and returns the resulting string.</span></span><br><span class="line"><span class="comment">// Spaces are always added between operands and a newline is appended.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	p := newPrinter()</span><br><span class="line">	p.doPrintln(a)</span><br><span class="line">	s := <span class="keyword">string</span>(p.buf)</span><br><span class="line">	p.free()</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>依然支持三种写法<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Sprint(<span class="string">"内容1"</span>, <span class="string">"内容12"</span>)</span><br><span class="line">	fmt.Sprintln(<span class="string">"内容2"</span>)</span><br><span class="line">	fmt.Sprintf(<span class="string">"%s"</span>, <span class="string">"内容3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><ul>
<li><p>在Go语言中可以使用<code>%+特定字母</code>或<code>/+特定字母</code>形成转义字符,这个表示特定含义的组合称为转义字符.</p>
</li>
<li><p>在Go语言中又称为verb</p>
</li>
<li><p>转义字符在Go语言中在以下两种情况使用频率较高</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"verb"</span>,内容)<span class="comment">//输出</span></span><br><span class="line">fmt.Scanf(<span class="string">"verb"</span>,接收变量)<span class="comment">//输入</span></span><br></pre></td></tr></table></figure>

<h2 id="进制简述"><a href="#进制简述" class="headerlink" title="进制简述"></a>进制简述</h2><ul>
<li>进制数在编程中经常遇见,进制数分为二进制,八进制,十进制和十六进制.其中十进制就是平时我们接触最多的</li>
<li>X进制数都满足:<ul>
<li>满X进一位</li>
<li>每位最大为X-1</li>
<li>第N位代表的X的(N-1)次方</li>
</ul>
</li>
<li>其中十六进制中a=10,b=11,c=12,d=13,e=14,f=15</li>
<li>举例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">十进制 18</span><br><span class="line">二进制 10010</span><br><span class="line">八进制 22</span><br><span class="line">十六进制 12</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="常用转义字符汇总"><a href="#常用转义字符汇总" class="headerlink" title="常用转义字符汇总"></a>常用转义字符汇总</h2><ul>
<li>以下为常用转义字符</li>
</ul>
<table>
<thead>
<tr>
<th>verb</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td align="center">十进制整数</td>
</tr>
<tr>
<td>%x,%X</td>
<td align="center">大小写方式显示十六进制整数</td>
</tr>
<tr>
<td>%o</td>
<td align="center">八进制整数</td>
</tr>
<tr>
<td>%b</td>
<td align="center">二进制整数</td>
</tr>
<tr>
<td>%f,%g,%e</td>
<td align="center">浮点数</td>
</tr>
<tr>
<td>%t</td>
<td align="center">布尔值</td>
</tr>
<tr>
<td>%c</td>
<td align="center">字符</td>
</tr>
<tr>
<td>%s</td>
<td align="center">字符串</td>
</tr>
<tr>
<td>%q</td>
<td align="center">带双引号字符串</td>
</tr>
<tr>
<td>%v</td>
<td align="center">内置格式内容</td>
</tr>
<tr>
<td>%T</td>
<td align="center">类型</td>
</tr>
<tr>
<td>%p</td>
<td align="center">内存地址</td>
</tr>
<tr>
<td>%%</td>
<td align="center">字符%</td>
</tr>
<tr>
<td>\n</td>
<td align="center">换行</td>
</tr>
<tr>
<td>\t</td>
<td align="center">缩进</td>
</tr>
</tbody></table>
<h1 id="用户输入简介"><a href="#用户输入简介" class="headerlink" title="用户输入简介"></a>用户输入简介</h1><ul>
<li><p>用户输入在平时练习中使用频率较高.</p>
</li>
<li><p>程序运行时,运行到接收用户输入语句,程序阻塞,用户在控制台输入内容后,把内容赋值给对应的变量,程序继续运行.</p>
</li>
<li><p>在Go语言中有多种接收用户输入的方式,其中使用fmt包的Scan函数使用最简单</p>
<h2 id="接收用户输入的几种方式"><a href="#接收用户输入的几种方式" class="headerlink" title="接收用户输入的几种方式"></a>接收用户输入的几种方式</h2></li>
<li><p>使用<code>Scanln(&amp;变量名,&amp;变量名)</code>的方式接收.</p>
<ul>
<li>输入的内容必须都在同一行</li>
<li>每个内容之间使用空格分割</li>
<li>回车换行后表示停止输入.</li>
<li>如果希望接收3个值,而在控制台只输入2个值,回车后也停止接收</li>
<li>如果希望接收2个值,而在控制台输入3个,回车后只能接收两个值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> name, age <span class="keyword">string</span> <span class="comment">//声明两个字符串变量,变量在本章节后面讲解</span></span><br><span class="line">	fmt.Print(<span class="string">"请输入姓名和姓名:"</span>)</span><br><span class="line">	fmt.Scanln(&amp;name, &amp;age) <span class="comment">//此处&amp;变量名是地址.指针地址在后面章节境界</span></span><br><span class="line">	fmt.Println(<span class="string">"接收到内容为:"</span>, name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>也可以使用<code>fmt.Scanf(verb,&amp;变量)</code>按照特定的格式进行输入.</p>
<ul>
<li>下面例子演示的每次换行输入一个内容<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a,b <span class="keyword">string</span></span><br><span class="line">	fmt.Scanf(<span class="string">"%s\n%s"</span>,&amp;a,&amp;b);</span><br><span class="line">	fmt.Printf(<span class="string">"%s\n%s"</span>,a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>需要注意,如果同行输入两个字符串,中间使用空格,否则编译器无法对输入内容拆分</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">string</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">string</span></span><br><span class="line">	<span class="comment">//输入时必须输入: aaa bbb</span></span><br><span class="line">	<span class="comment">//如果中间没有空格则把所有内容都赋值给了a</span></span><br><span class="line">	fmt.Scanf(<span class="string">"%s%s"</span>,&amp;a,&amp;b)</span><br><span class="line">	fmt.Println(a,b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="静态语言和动态语言"><a href="#静态语言和动态语言" class="headerlink" title="静态语言和动态语言"></a>静态语言和动态语言</h1><ul>
<li>静态类型语言和强类型语言是同一个意思,表示在编译期就确定了类型,而且类型是不可以改变的</li>
<li>动态类型语言和弱类型语言是同一个意思,表示在运行过程中才能确定,且内容是什么类型变量类型跟随变化</li>
</ul>
<h2 id="Go语言变量简介"><a href="#Go语言变量简介" class="headerlink" title="Go语言变量简介"></a>Go语言变量简介</h2><ul>
<li><p>Go语言和其他语言一样都有基本存储容器.可以存储一个或多个值在程序中,方便程序中多次使用容器中内容,这个容器称为:<strong>变量</strong></p>
</li>
<li><p>Go语言虽然是静态类型语言,但是支持动态类型语言语法,因为Go语言希望程序员少声明变量,增加GC效率</p>
<h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2></li>
<li><p>以字母或下划线开头(Go语言中多不以_开头)</p>
</li>
<li><p>后面可以是任意数量的字符、数字和下划线</p>
</li>
<li><p>区分大小写</p>
</li>
<li><p>不能是关键字(关键字具备特定含义),下面是Go语言的关键字</p>
<table>
<thead>
<tr>
<th align="center">关键字如下</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">break</td>
<td align="center">default</td>
<td align="center">func</td>
<td align="center">interface</td>
<td align="center">select</td>
</tr>
<tr>
<td align="center">case</td>
<td align="center">defer</td>
<td align="center">go</td>
<td align="center">map</td>
<td align="center">struct</td>
</tr>
<tr>
<td align="center">chan</td>
<td align="center">else</td>
<td align="center">goto</td>
<td align="center">package</td>
<td align="center">switch</td>
</tr>
<tr>
<td align="center">const</td>
<td align="center">fallthrough</td>
<td align="center">if</td>
<td align="center">range</td>
<td align="center">type</td>
</tr>
<tr>
<td align="center">continue</td>
<td align="center">for</td>
<td align="center">import</td>
<td align="center">return</td>
<td align="center">var</td>
</tr>
</tbody></table>
</li>
<li><p>可以是保留字,但是建议不使用保留字做为变量名,下面是Go语言的保留字</p>
<table>
<thead>
<tr>
<th align="center">保留字如下</th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">iota</td>
<td align="center">nil</td>
<td align="center">int</td>
</tr>
<tr>
<td align="center">int8</td>
<td align="center">int16</td>
<td align="center">int32</td>
<td align="center">int64</td>
<td align="center">unit</td>
</tr>
<tr>
<td align="center">unit8</td>
<td align="center">unit16</td>
<td align="center">unit32</td>
<td align="center">unitptr</td>
<td align="center">float32</td>
</tr>
<tr>
<td align="center">float64</td>
<td align="center">complex128</td>
<td align="center">complex64</td>
<td align="center">bool</td>
<td align="center">byte</td>
</tr>
<tr>
<td align="center">rune</td>
<td align="center">string</td>
<td align="center">error</td>
<td align="center">make</td>
<td align="center">len</td>
</tr>
<tr>
<td align="center">cap</td>
<td align="center">new</td>
<td align="center">append</td>
<td align="center">copy</td>
<td align="center">close</td>
</tr>
<tr>
<td align="center">deletecomplex</td>
<td align="center">real</td>
<td align="center">imag</td>
<td align="center">panic</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">recover</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>在同一范围内不允许出现同名变量</p>
</li>
<li><p>Go语言要求变量声明后至少使用一次(赋值不属于使用)</p>
</li>
</ul>
<h2 id="单个变量声明及赋值"><a href="#单个变量声明及赋值" class="headerlink" title="单个变量声明及赋值"></a>单个变量声明及赋值</h2><ul>
<li>先声明后赋值(声明后开辟内存,不同类型变量都有不同初值)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="comment">//1. 声明</span></span><br><span class="line"><span class="keyword">var</span> 变量名 类型</span><br><span class="line"><span class="comment">//2. 赋值</span></span><br><span class="line">变量名=值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例:</span></span><br><span class="line"><span class="keyword">var</span> smallming <span class="keyword">string</span></span><br><span class="line">smallming = <span class="string">"英文名"</span></span><br></pre></td></tr></table></figure></li>
<li>声明并赋值(此方式不建议)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="keyword">var</span> 变量名 类型 = 值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="keyword">var</span> smallming <span class="keyword">string</span> = <span class="string">"英文名"</span></span><br></pre></td></tr></table></figure></li>
<li>声明并赋值(省略类型,变量类型取决于值的类型)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line"><span class="keyword">var</span> 变量名 = 值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例:</span></span><br><span class="line"><span class="keyword">var</span> smallming = <span class="string">"英文名"</span></span><br></pre></td></tr></table></figure></li>
<li>短变量(只能在函数内使用)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//语法:</span></span><br><span class="line">变量名 := 值</span><br><span class="line"></span><br><span class="line"><span class="comment">//示例:</span></span><br><span class="line">smallming := <span class="string">"英文名"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="声明多个变量和赋值"><a href="#声明多个变量和赋值" class="headerlink" title="声明多个变量和赋值"></a>声明多个变量和赋值</h2><ul>
<li>先声明后赋值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br><span class="line">	a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">	fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>声明时赋值</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b, c, d = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span></span><br><span class="line">	fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>声明并赋值,推荐方式</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		a = <span class="number">1</span></span><br><span class="line">		b = <span class="literal">true</span></span><br><span class="line">		c = <span class="string">"测试"</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用短变量给多个变量赋值时,必须要保证至少有个变量是没有声明的</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		a = <span class="number">1</span></span><br><span class="line">		b = <span class="literal">true</span></span><br><span class="line">		c = <span class="string">"测试"</span></span><br><span class="line">	)</span><br><span class="line">	<span class="comment">//短变量操作多个值时只要保证里面至少有一个新变量</span></span><br><span class="line">	b, c, d := <span class="literal">false</span>, <span class="string">"smallming"</span>, <span class="number">3</span></span><br><span class="line">	fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h1><h2 id="整型概述"><a href="#整型概述" class="headerlink" title="整型概述"></a>整型概述</h2><ul>
<li>在Go语言中可以进行<strong>数学运算</strong>的类型分为整型和浮点型</li>
<li>所有的整数数字存储到整型中就可以进行数学运算<ul>
<li>整型和整型运算的结果还是整型.(5/2=2)</li>
<li>都是整型,但是int8和int16之间不可以进行运算,必须进行类型转换</li>
</ul>
</li>
<li>整型分为有符号整型和无符号整型<ul>
<li>有符号整型有正数和负数.其二进制最高位表示符号,0为正数1为负数.int和intx为有符号整型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;int8 举例</span><br><span class="line">0000 0010&#x3D;2</span><br><span class="line">1000 0010&#x3D;-2</span><br></pre></td></tr></table></figure></li>
<li>无符号整型只能取大于等于0的整数.其二进制最高位表示真实数字.unit和unitx为无符号整型<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;uint8 举例</span><br><span class="line">0000 0010&#x3D;2</span><br><span class="line">1000 0010&#x3D;130</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>整型取值范围和作用<ul>
<li>有符号整数统一公式为:-2的n-1次幂到2的n-1次幂减一</li>
<li>无符号整数统一公式为:0到2的n次幂减一<table>
<thead>
<tr>
<th align="right">类型</th>
<th align="left">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="right">int8</td>
<td align="left">[-128 , 127]</td>
</tr>
<tr>
<td align="right">int16</td>
<td align="left">[-32768 , 32767]</td>
</tr>
<tr>
<td align="right">int32</td>
<td align="left">[-2147483648 , 2147483647] Go语言中没有字符类型,所有字符都使用int32存储</td>
</tr>
<tr>
<td align="right">int64</td>
<td align="left">[-9223372036854775808 , 9223372036854775807]</td>
</tr>
<tr>
<td align="right">int</td>
<td align="left">受限于计算机系统,系统是多少位,int为多少位</td>
</tr>
<tr>
<td align="right">uint8</td>
<td align="left">[0 , 255]</td>
</tr>
<tr>
<td align="right">uint16</td>
<td align="left">[0 , 65535]</td>
</tr>
<tr>
<td align="right">uint32</td>
<td align="left">[0 , 4294967295]</td>
</tr>
<tr>
<td align="right">uint64</td>
<td align="left">[0 , 18446744073709551615]</td>
</tr>
<tr>
<td align="right">uint</td>
<td align="left">受限于计算机系统,系统是多少位,uint为多少位</td>
</tr>
<tr>
<td align="right">rune</td>
<td align="left">与int32类似,常用在获取值的Unicode码</td>
</tr>
<tr>
<td align="right">byte</td>
<td align="left">与uint8类似.强调值为原始数据.一个字节占用8个二进制</td>
</tr>
<tr>
<td align="right">uintptr</td>
<td align="left">大小不确定,类型取决于底层编程</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul>
<li><p>Go语言是静态类型语言,并且不具备低精度向高精度自动转换功能,所以不同类型变量之间相互赋值需要进行类型转换.</p>
</li>
<li><p>例如:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//声明3个类型变量</span></span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">1</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">int32</span> = <span class="number">2</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">int64</span> = <span class="number">3</span></span><br><span class="line">	fmt.Println(a, b, c)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//把int32转换为int64</span></span><br><span class="line">	a = <span class="keyword">int</span>(b)</span><br><span class="line">	fmt.Println(a, b)</span><br><span class="line">	a = <span class="number">1</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//把int64转换成int32</span></span><br><span class="line">	b = <span class="keyword">int32</span>(c)</span><br><span class="line">	fmt.Println(b, c)</span><br><span class="line">	b = <span class="number">2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//把int转换为int64</span></span><br><span class="line">	c = <span class="keyword">int64</span>(a)</span><br><span class="line">	fmt.Println(a, c)</span><br><span class="line">	c = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不同进制整数"><a href="#不同进制整数" class="headerlink" title="不同进制整数"></a>不同进制整数</h2></li>
<li><p>支持八进制,十进制,十六进制数字创建整型,最后由系统转换为十进制</p>
</li>
<li><p>不支持二进制值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//默认表示十进制</span></span><br><span class="line">	d := <span class="number">17</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//0开头表示八进制</span></span><br><span class="line">	o := <span class="number">021</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//0x开头表示十六进制</span></span><br><span class="line">	x := <span class="number">0x11</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//e2表示10的2次方</span></span><br><span class="line">	e := <span class="number">11e2</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//输出</span></span><br><span class="line">	fmt.Println(d, o, x, e)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//把变量d中内容转换为二进制</span></span><br><span class="line">	b := fmt.Sprintf(<span class="string">"%b"</span>, d)</span><br><span class="line">	fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h1><h2 id="字符型概述"><a href="#字符型概述" class="headerlink" title="字符型概述"></a>字符型概述</h2><ul>
<li>字符型存放单个字母或单个文字</li>
<li>Go语言不支持字符类型,在Go语言中所有字符值都转换为对应的编码表中int32值</li>
<li>Go语言默认使用UTF-8编码<h2 id="编码发展历史"><a href="#编码发展历史" class="headerlink" title="编码发展历史"></a>编码发展历史</h2></li>
<li>最开始使用8个可开合晶体管表示世界万物,这就是<strong>字节</strong>的由来.后来生产出可以控制字节的机器,出现了<strong>计算机</strong></li>
<li>把字节中32以下情况称为<strong>控制码</strong>,后在控制码基础上添加空格、标点符号、数字、大小写字母等直到127,最终形成了<strong>ANSI</strong>的ASCII码(American Standard Code for Information Interchange，美国信息交换标准代码),这时已经较好的支持英文了</li>
<li>随机计算机在全球的应用,在原ASCII基础上添加了新的字母、符号、横线竖线等直到255号,从128到255被称为<strong>扩展字符集</strong>但是此时计算机还是在只支持英文</li>
<li>等中国开始使用计算机,为了支持中文,保留了前127号,称这些为<strong>半角</strong>,把后面的内容以两个字节拼接形成中文汉字和表单符号,这后半部分就是<strong>全角</strong>,其中汉字6763个满足中文大部分情况的要求,称这个编码为<strong>GB2312</strong></li>
<li>随着计算机在中国的普及,使用GB2312时有的汉字无法打出,又在GB2312基础上添加了近20000个汉字(包括繁体和符号等)形成<strong>GBK</strong>,后来为支持少数民族又在GBK基础上推出<strong>GB18080</strong></li>
<li>全球中每个国家都有着自己的一套编码,ISO国际为了统一标准,重新定义一套编码,希望包含全球所有的文字和符号,俗称<strong>Unicode</strong></li>
<li>随着互联网的快速发展,为解决Unicode网络传输中流浪浪费问题,出现了<strong>UTF</strong>编码,有UTF-8(8位传输)和UTF-16(16为传输)两种.其中UTF-8使用最多,为变长编码方式,中文占3个自己.</li>
</ul>
<h2 id="字符示例"><a href="#字符示例" class="headerlink" title="字符示例"></a>字符示例</h2><ul>
<li>示例<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//定义数字</span></span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">rune</span>=<span class="number">0x5F20</span></span><br><span class="line">	fmt.Println(i)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//输出汉字张</span></span><br><span class="line">	fmt.Printf(<span class="string">"%c\n"</span>,i)</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取转换后的内容</span></span><br><span class="line">	c:=fmt.Sprintf(<span class="string">"%c"</span>,i)</span><br><span class="line">	fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>也可以使用单引号表示一个字符类型,但是本质还是正数<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := <span class="string">'张'</span></span><br><span class="line">	fmt.Println(c)      <span class="comment">//24352</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, c) <span class="comment">//int32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h1><h2 id="浮点数概述"><a href="#浮点数概述" class="headerlink" title="浮点数概述"></a>浮点数概述</h2><ul>
<li><p>浮点类型用于存储带有小数点的数字</p>
</li>
<li><p>一个整数数值可以赋值给浮点类型但是一个整型变量不可以赋值给浮点类型</p>
</li>
<li><p>浮点数进行运算的结果是浮点数</p>
</li>
<li><p>Go语言中浮点类型有两个</p>
<ul>
<li>float32</li>
<li>float64<h2 id="浮点数取值范围"><a href="#浮点数取值范围" class="headerlink" title="浮点数取值范围"></a>浮点数取值范围</h2></li>
</ul>
</li>
<li><p>float32和float64取值范围</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float32</td>
<td align="center">3.40282346638528859811704183484516925440e+38</td>
</tr>
<tr>
<td align="center">float64</td>
<td align="center">1.797693134862315708145274237317043567981e+308</td>
</tr>
</tbody></table>
</li>
<li><p>可以通过math或中常量快速获取浮点数的最大值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(math.MaxFloat32)</span><br><span class="line">	fmt.Println(math.MaxFloat64)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="浮点运算"><a href="#浮点运算" class="headerlink" title="浮点运算"></a>浮点运算</h2></li>
<li><p>float32和float64之间不可以相互运算,需要进行类型转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">1.5</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">float64</span> = <span class="number">3.3</span>         <span class="comment">//默认是float64类型</span></span><br><span class="line">	fmt.Println(a + <span class="keyword">float32</span>(b)) <span class="comment">//float64向float32转换</span></span><br><span class="line">	fmt.Println(<span class="keyword">float64</span>(a) + b) <span class="comment">//float32向float64转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>建议使用float64,虽然占用空间多,但是float32在累计运算时可能出现误差</p>
</li>
<li><p>整型运算和浮点型运算结果类型为本身类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b <span class="keyword">int</span> = <span class="number">3</span>, <span class="number">2</span></span><br><span class="line">	<span class="keyword">var</span> c, d <span class="keyword">float64</span> = <span class="number">3</span>, <span class="number">2</span></span><br><span class="line">	fmt.Println(a / b) <span class="comment">//结果为int,舍去小数部分(向下取整)</span></span><br><span class="line">	fmt.Println(c / d) <span class="comment">//结果为float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h1><h2 id="布尔类型介绍"><a href="#布尔类型介绍" class="headerlink" title="布尔类型介绍"></a>布尔类型介绍</h2><ul>
<li>布尔类型关键字<strong>bool</strong></li>
<li>布尔类型可取值只有两个<ul>
<li>true :代表真,表示成立,二进制表示时1表示真</li>
<li>false:代表假,表示不成立,二进制表示时0表示假</li>
</ul>
</li>
<li>布尔类型不能与其他类型相互转换</li>
<li>布尔类型占用1个byte</li>
<li>布尔类型单独使用较少,多用在判断中<h2 id="布尔类型代码示例"><a href="#布尔类型代码示例" class="headerlink" title="布尔类型代码示例"></a>布尔类型代码示例</h2></li>
<li>创建bool类型变量<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">bool</span> = <span class="literal">false</span></span><br><span class="line">	<span class="keyword">var</span> c = <span class="literal">true</span></span><br><span class="line">	d := <span class="literal">false</span></span><br><span class="line">	fmt.Println(a, b, c, d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用unsafe包下的Sizeof()可以查看类型占用字节<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="literal">false</span></span><br><span class="line">	fmt.Println(unsafe.Sizeof(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>虽然bool类型占用一个byte,但是bool不能和byte或int8相互转换<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a <span class="keyword">int8</span> = <span class="number">1</span></span><br><span class="line">	<span class="keyword">var</span> b <span class="keyword">byte</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">var</span> c <span class="keyword">bool</span> = <span class="literal">false</span></span><br><span class="line">	fmt.Println(a, b, c)</span><br><span class="line">	a = <span class="keyword">int8</span>(c) <span class="comment">//cannot convert c (type bool) to type int8</span></span><br><span class="line">	b = <span class="keyword">byte</span>(c) <span class="comment">//cannot convert c (type bool) to type byte</span></span><br><span class="line">	c = <span class="keyword">bool</span>(a) <span class="comment">//cannot convert a (type int8) to type bool</span></span><br><span class="line">	c = <span class="keyword">bool</span>(b) <span class="comment">//cannot convert b (type byte) to type bool</span></span><br><span class="line">	b = <span class="keyword">byte</span>(a) <span class="comment">//可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>布尔类型除了直接赋值true或false以外,还是可以表达式赋值,借助比较运算符、逻辑运算符等<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">5</span> &gt; <span class="number">3</span></span><br><span class="line">	fmt.Println(a)      <span class="comment">//输出:true</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, a) <span class="comment">//输出:bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="运算符概述"><a href="#运算符概述" class="headerlink" title="运算符概述"></a>运算符概述</h2><ul>
<li>Go语言支持运算符,算数运算符、比较运算符、逻辑运算符、赋值运算符、关系运算符、位运算符等</li>
<li>不同的运算符使用场景不同,运算符一起使用时还需要注意优先级问题</li>
</ul>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><ul>
<li>算数运算符对浮点类型和整型进行数学运算</li>
<li>乘法、除法优先级高于取余,取余高于加法、减法<table>
<thead>
<tr>
<th align="right">运算符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="right">+</td>
<td align="left">加法</td>
</tr>
<tr>
<td align="right">-</td>
<td align="left">减法</td>
</tr>
<tr>
<td align="right">*</td>
<td align="left">乘法</td>
</tr>
<tr>
<td align="right">/</td>
<td align="left">除法</td>
</tr>
<tr>
<td align="right">%</td>
<td align="left">取余. 例如 12%5=2  8%4=0</td>
</tr>
<tr>
<td align="right">++</td>
<td align="left">自增一,只能单独使用,没有返回值</td>
</tr>
<tr>
<td align="right">–</td>
<td align="left">自减一,和++语法相同</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul>
<li>比较运算符用于比较两个内容的大小,判断和分支中使用频率较高<table>
<thead>
<tr>
<th align="right">运算符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="right">==</td>
<td align="left">是否等于,返回值为bool类型,判断是否成立</td>
</tr>
<tr>
<td align="right">!=</td>
<td align="left">不等于</td>
</tr>
<tr>
<td align="right">&gt;</td>
<td align="left">大于</td>
</tr>
<tr>
<td align="right">&gt;=</td>
<td align="left">大于等于</td>
</tr>
<tr>
<td align="right">&lt;</td>
<td align="left">小于</td>
</tr>
<tr>
<td align="right">&lt;=</td>
<td align="left">小于等于</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><ul>
<li>逻辑运算符在判断和分支中使用频率较高<table>
<thead>
<tr>
<th align="right">运算符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="right">!</td>
<td align="left">逻辑非,取结果的反</td>
</tr>
<tr>
<td align="right">&amp;&amp;</td>
<td align="left">逻辑与,只有两侧同时为真时总体结果为真</td>
</tr>
<tr>
<td align="right">||</td>
<td align="left">逻辑或,两侧只要有一个为真时整体为真</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul>
<li>赋值运算符目的给变量赋值</li>
<li>提供了很多运算的简单方式<table>
<thead>
<tr>
<th align="right">运算符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="right">=</td>
<td align="left">右侧内容赋值给左侧变量.例如:A=B 把B赋值给A</td>
</tr>
<tr>
<td align="right">+=</td>
<td align="left">A+=B 相当于 A=A+B</td>
</tr>
<tr>
<td align="right">-+</td>
<td align="left">A-=B 相当于 A=A-B</td>
</tr>
<tr>
<td align="right">*=</td>
<td align="left">A *= B相当于 A等于A乘以B</td>
</tr>
<tr>
<td align="right">/=</td>
<td align="left">A/=B 相当于A=A/B</td>
</tr>
<tr>
<td align="right">%=</td>
<td align="left">A%=B 相当于 A=A%B</td>
</tr>
<tr>
<td align="right">&lt;&lt;=</td>
<td align="left">A&lt;&lt;=B 相当于 A=A&lt;&lt;B</td>
</tr>
<tr>
<td align="right">&gt;&gt;=</td>
<td align="left">A&gt;&gt;=B 相当于 A=A&gt;&gt;B</td>
</tr>
<tr>
<td align="right">&amp;=</td>
<td align="left">A&amp;=B 相当于 A=A&amp;B</td>
</tr>
<tr>
<td align="right">|=</td>
<td align="left">A|=B 相当于 A=A|B</td>
</tr>
<tr>
<td align="right">^=</td>
<td align="left">A^=B 相当于 A=A^B</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><ul>
<li><p>位运算时,需要知道几个概念,原码、反码、补码.正数在计算机中二进制还是原值,负数在计算机中存储的是补码</p>
</li>
<li><p>原码</p>
<ul>
<li>正数的原码还是正数</li>
<li>负数的原码是负数绝对值的二进制表示</li>
<li>以8位二进制方式表示<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原码为:0000 0011</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int8</span>=<span class="number">3</span></span><br><span class="line"><span class="comment">//原码为:0000 0010</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int8</span>=<span class="number">-2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>反码</p>
<ul>
<li>正数的反码还是正数</li>
<li>负数的反码是所有位取反<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反码为:0000 0011</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int8</span>=<span class="number">3</span></span><br><span class="line"><span class="comment">//反码为:1111 1101</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int8</span>=<span class="number">-2</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>补码</p>
<ul>
<li>正数的补码还是正数</li>
<li>负数的补码为负数的反码加一 . <strong>负数的补码就是负数在计算机中二进制表示方式</strong></li>
<li>想要知道负数二进制对应十进制数字就是补码–&gt;反码–&gt;原码–&gt;添加负号</li>
<li>如果是16位只需要在负数前面添加8个1 ,正数前面添加8个零<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//补码为:0000 0011</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">int8</span>=<span class="number">3</span></span><br><span class="line"><span class="comment">//补码为:1111 1110</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int8</span>=<span class="number">-2</span></span><br></pre></td></tr></table></figure>
<h3 id="Go语言中位运算符"><a href="#Go语言中位运算符" class="headerlink" title="Go语言中位运算符"></a>Go语言中位运算符</h3></li>
</ul>
</li>
<li><p>位运算在算法中使用频率较高</p>
</li>
<li><p>区块链学习中密码学部分的很多算法都是使用的位运算</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="right">运算符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="right">&lt;&lt;</td>
<td align="left">二进制左移</td>
</tr>
<tr>
<td align="right">&gt;&gt;</td>
<td align="left">二进制右移</td>
</tr>
<tr>
<td align="right">|</td>
<td align="left">位运算或OR,有1取1”</td>
</tr>
<tr>
<td align="right">&amp;</td>
<td align="left">位运算与AND.转换二进制,都为1取1</td>
</tr>
<tr>
<td align="right">^</td>
<td align="left">位运算异或XOR,二阶运算相同为0不同为1.一阶运算加一后正数交互(正数变负数,负数变正数)</td>
</tr>
<tr>
<td align="right">&amp;^</td>
<td align="left">位清空(AND NOT),如果右侧0左侧不变,如果右侧为1,左侧一定清零.a&amp;^b=a&amp;(^b)</td>
</tr>
</tbody></table>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串概述"><a href="#字符串概述" class="headerlink" title="字符串概述"></a>字符串概述</h2><ul>
<li>字符串是一段不可变的字符序列.内容是任意内容,可以是一段文字也可以是一串数字,但是字符串类型数字不能进行数学运算,必须转换成整型或浮点型</li>
<li>字符串类型关键字:string</li>
<li>创建字符串类型变量<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span> = <span class="string">"smallming"</span></span><br><span class="line">s1 := <span class="string">"smallming"</span></span><br></pre></td></tr></table></figure></li>
<li>字符串类型的值使用双引号””扩上,内容支持转义字符串.两侧使用反单引号时原格式输出<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="string">"a\tbc"</span></span><br><span class="line">	b := <span class="string">`a\tbc`</span></span><br><span class="line">	fmt.Println(a) <span class="comment">//输出:a	abc</span></span><br><span class="line">	fmt.Println(b) <span class="comment">//输出a\tabc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="字符串和数值转换"><a href="#字符串和数值转换" class="headerlink" title="字符串和数值转换"></a>字符串和数值转换</h2><ul>
<li><p>包strconv提供了字符串和其他类型相互转换的函数,下面以字符串和数值类型转换为例</p>
</li>
<li><p>int和string相互转换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"11"</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	第一个参数:需要转换的字符串变量</span></span><br><span class="line"><span class="comment">	第二个参数:这个数字是几进制,常用取值:2,8,10,16</span></span><br><span class="line"><span class="comment">	第三个参数:认为这个数字的整数类型.可取值:0,8,16,32,64.</span></span><br><span class="line"><span class="comment">	但是由于方法最后返回值是int64,所以第三个参数无论设置什么最终结果都是int64</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	i, _ := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">8</span>)</span><br><span class="line">	fmt.Println(i)</span><br><span class="line">	fmt.Printf(<span class="string">"%T\n"</span>, i)</span><br><span class="line"></span><br><span class="line">	<span class="comment">//简单写法,相当于strconv.ParseInt(s,10,64)</span></span><br><span class="line">	i1, _ := strconv.Atoi(s)</span><br><span class="line">	fmt.Println(i1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Int转换成string</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	i := <span class="number">11</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	第一个参数:必须是int64类型</span></span><br><span class="line"><span class="comment">	第二个参数:进制数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	s := strconv.FormatInt(<span class="keyword">int64</span>(i), <span class="number">10</span>)</span><br><span class="line">	fmt.Println(s)        <span class="comment">//输出:11</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T\n"</span>, s) <span class="comment">//输出:string</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	由于平时常用int,且使用短变量时整数默认是int类型</span></span><br><span class="line"><span class="comment">	所以下面方式较常用,把int转换为string</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	s1 := strconv.Itoa(i)</span><br><span class="line">	fmt.Println(s1)      <span class="comment">//输出:11</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, s1) <span class="comment">//输出:string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>string转换为floatXX类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"1.5"</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	把字符串转换为指定类型</span></span><br><span class="line"><span class="comment">	第一个参数:字符串</span></span><br><span class="line"><span class="comment">	第二个参数:可取值为32和64,分别表示float32和float64</span></span><br><span class="line"><span class="comment">	返回值是float64</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	f, _ := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">	fmt.Println(f)</span><br><span class="line">	fmt.Printf(<span class="string">"%T"</span>, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>floatXX转换为string类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := <span class="number">1.5</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	把浮点型转换为字符串类型</span></span><br><span class="line"><span class="comment">	第一个参数:浮点型变量</span></span><br><span class="line"><span class="comment">	第二个参数:</span></span><br><span class="line"><span class="comment">		'f'（-ddd.dddd）</span></span><br><span class="line"><span class="comment">		'b'（-ddddp±ddd，指数为二进制）</span></span><br><span class="line"><span class="comment">		'e'（-d.dddde±dd，十进制指数）</span></span><br><span class="line"><span class="comment">		'E'（-d.ddddE±dd，十进制指数）</span></span><br><span class="line"><span class="comment">		'g'（指数很大时用'e'格式，否则'f'格式）</span></span><br><span class="line"><span class="comment">		'G'（指数很大时用'E'格式，否则'f'格式）</span></span><br><span class="line"><span class="comment">	第三个参数:小数点精度,精度不够使用0补全,超出精度四舍五入</span></span><br><span class="line"><span class="comment">	第四个参数:浮点型变量类型,64表示float64,32表示float32</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	s := strconv.FormatFloat(f, <span class="string">'g'</span>, <span class="number">5</span>, <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">	fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><ul>
<li>可以使用<strong>len(字符串变量)</strong>获取字符串的字节长度,其中英文占1个字节长度,中文占用3个字节长度</li>
<li>可以使用<strong>变量名[n]</strong>获取到字符串第n+1个字节,返回这个字节对应的Unicode码值(uint8类型).注意n的取值范围是[0,长度)</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"smallming张"</span></span><br><span class="line">	a := s[<span class="number">0</span>]</span><br><span class="line">	fmt.Println(a)        <span class="comment">//输出:115</span></span><br><span class="line">	fmt.Printf(<span class="string">"%T\n"</span>, a) <span class="comment">//输出uint8</span></span><br><span class="line">	b := fmt.Sprintf(<span class="string">"%c"</span>, a)</span><br><span class="line">	fmt.Printf(<span class="string">"%T\n"</span>, b) <span class="comment">//输出:string</span></span><br><span class="line">	fmt.Println(b)        <span class="comment">//输出s</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>可以使用变量名[n:m]取出大于等于n小于m的字符序列</p>
<ul>
<li>n和m都可以省略,省略时认为n为0,m为长度</li>
<li>因为中文占用三个字节,如果没有把中文完整取出,会出现乱码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"smallming张"</span></span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s)) <span class="comment">//输出:12,字节长度</span></span><br><span class="line">	fmt.Println(s[<span class="number">1</span>:<span class="number">4</span>]) <span class="comment">//输出:mal</span></span><br><span class="line">	fmt.Println(s[:<span class="number">2</span>])  <span class="comment">//输出:sm</span></span><br><span class="line">	fmt.Println(s[<span class="number">5</span>:])  <span class="comment">//输出:ming张</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>可以通过把字符串转换为切片获取长度,并获取里面内容. 也可以直接使用for循环结合range获取</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"smallming张"</span></span><br><span class="line">	s1 := []<span class="keyword">rune</span>(s)</span><br><span class="line">	fmt.Println(<span class="built_in">len</span>(s1))    <span class="comment">//输出:10</span></span><br><span class="line">	fmt.Println(s1[<span class="number">9</span>])      <span class="comment">//输出24352</span></span><br><span class="line">	fmt.Printf(<span class="string">"%c"</span>, s1[<span class="number">9</span>]) <span class="comment">//输出:张</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//遍历字符串中内容</span></span><br><span class="line">	<span class="keyword">for</span> i, n := <span class="keyword">range</span> s &#123;</span><br><span class="line">		fmt.Println(i, n)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2></li>
<li><p>在strings包中提供了字符串常用的函数</p>
</li>
<li><p>常用函数整理如下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	s := <span class="string">"smallming"</span></span><br><span class="line">	<span class="comment">//第一次出现的索引</span></span><br><span class="line">	fmt.Println(strings.Index(s, <span class="string">"l"</span>))</span><br><span class="line">	<span class="comment">//最后一次出现的索引</span></span><br><span class="line">	fmt.Println(strings.LastIndex(s, <span class="string">"l"</span>))</span><br><span class="line">	<span class="comment">//是否以指定内容开头</span></span><br><span class="line">	fmt.Println(strings.HasPrefix(s, <span class="string">"small"</span>))</span><br><span class="line">	<span class="comment">//是否以指定内容结尾</span></span><br><span class="line">	fmt.Println(strings.HasSuffix(s, <span class="string">"ming"</span>))</span><br><span class="line">	<span class="comment">//是否包含指定字符串</span></span><br><span class="line">	fmt.Println(strings.Contains(s, <span class="string">"mi"</span>))</span><br><span class="line">	<span class="comment">//全变小写</span></span><br><span class="line">	fmt.Println(strings.ToLower(s))</span><br><span class="line">	<span class="comment">//全大写</span></span><br><span class="line">	fmt.Println(strings.ToUpper(s))</span><br><span class="line">	<span class="comment">//把字符串中前n个old子字符串替换成new字符串,如果n小于0表示全部替换.</span></span><br><span class="line">	<span class="comment">//如果n大于old个数也表示全部替换</span></span><br><span class="line">	fmt.Println(strings.Replace(s, <span class="string">"m"</span>, <span class="string">"k"</span>, <span class="number">-1</span>))</span><br><span class="line">	<span class="comment">//把字符串重复count遍</span></span><br><span class="line">	fmt.Println(strings.Repeat(s, <span class="number">2</span>))</span><br><span class="line">	<span class="comment">//去掉字符串前后指定字符</span></span><br><span class="line">	fmt.Println(strings.Trim(s, <span class="string">" "</span>)) <span class="comment">//去空格可以使用strings.TrimSpace(s)</span></span><br><span class="line">	<span class="comment">//根据指定字符把字符串拆分成切片</span></span><br><span class="line">	fmt.Println(strings.Split(s, <span class="string">"m"</span>))</span><br><span class="line">	<span class="comment">//使用指定分隔符把切片内容合并成字符串</span></span><br><span class="line">	arr := []<span class="keyword">string</span>&#123;<span class="string">"small"</span>, <span class="string">"ming"</span>&#125;</span><br><span class="line">	fmt.Println(strings.Join(arr, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="常量和iota"><a href="#常量和iota" class="headerlink" title="常量和iota"></a>常量和iota</h1><h2 id="常量概述"><a href="#常量概述" class="headerlink" title="常量概述"></a>常量概述</h2><ul>
<li><p>常量是一个固定值,在编译器就确定结果.声明时必须赋值且结果不可以改变.</p>
</li>
<li><p>因为常量在编译器就确定,可以防止程序运行过程中意外修改</p>
</li>
<li><p>常量关键字const</p>
</li>
<li><p>常量定义完可以不使用</p>
</li>
<li><p>Go语言中常量定义没有明确语法要求,可以不全大写,驼峰即可.</p>
</li>
<li><p>很多内容可以定义成常量</p>
<ul>
<li>人名</li>
<li>圆周率</li>
<li>电话号</li>
<li>等<h2 id="常量定义"><a href="#常量定义" class="headerlink" title="常量定义"></a>常量定义</h2></li>
</ul>
</li>
<li><p>定义常量时如果不是必须指定特定类型,可以省略类型,使用默认类型.且数值类型常量(不定义类型)可以直接进行运算</p>
</li>
<li><p>常量的值可以是表达式,但是不允许出现变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> a <span class="keyword">string</span> = <span class="string">"smallming"</span></span><br><span class="line">	<span class="keyword">const</span> b = <span class="number">123</span></span><br><span class="line">	<span class="keyword">const</span> c = <span class="number">3</span>*<span class="number">2</span> + <span class="number">5</span><span class="comment">//不要指定类型</span></span><br><span class="line">	<span class="keyword">const</span> d = <span class="number">1.5</span><span class="comment">//不要指定类型</span></span><br><span class="line"></span><br><span class="line">	fmt.Printf(<span class="string">"%T %T"</span>,c,d)<span class="comment">//int float</span></span><br><span class="line"></span><br><span class="line">	fmt.Println(c+d)<span class="comment">//12.5</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//下面这种方式是错误的</span></span><br><span class="line">	i := <span class="number">3</span></span><br><span class="line">	<span class="keyword">const</span> e = i*<span class="number">2</span> + <span class="number">5</span> <span class="comment">//const initializer i * 2 + 5 is not a constant</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当定义多个常量时官方推荐的方式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	a = <span class="number">1</span></span><br><span class="line">	b = <span class="number">2</span></span><br><span class="line">	c = <span class="literal">true</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li><p>定义多常量时后一个常量如果没有赋值,与前一个常量值相同.</p>
<ul>
<li>第一个常量必须赋值<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		a = <span class="number">1</span></span><br><span class="line">		b</span><br><span class="line">		c</span><br><span class="line">	)</span><br><span class="line">	fmt.Println(a,b,c)<span class="comment">//输出:1 1 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常量生成器"><a href="#常量生成器" class="headerlink" title="常量生成器"></a>常量生成器</h2></li>
</ul>
</li>
<li><p>当一组常量都是数值类型,可以使用常量生成器iota指定这组常量按照特定规则变化</p>
</li>
<li><p>iota起始值为0,每次增加1</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		a = <span class="literal">iota</span></span><br><span class="line">		b </span><br><span class="line">		c </span><br><span class="line">	)</span><br><span class="line">	fmt.Println(a, b, c) <span class="comment">//输出: 0 1 2</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		d = <span class="literal">iota</span> &lt;&lt; <span class="number">1</span></span><br><span class="line">		e </span><br><span class="line">		f </span><br><span class="line">	)</span><br><span class="line">	fmt.Println(d, e, f) <span class="comment">//输出:0 2 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>无论是否使用iota,一组常量中每个的iota值是固定的,iota按照顺序自增1</p>
</li>
<li><p>每组iota之间无影响</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		a = <span class="number">5</span>    <span class="comment">//iota=0</span></span><br><span class="line">		b = <span class="number">3</span>    <span class="comment">//iota=1</span></span><br><span class="line">		c = <span class="literal">iota</span> <span class="comment">//iota=2</span></span><br><span class="line">		d        <span class="comment">//iota=3</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(a, b, c, d) <span class="comment">//输出5 3 2 3</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> (</span><br><span class="line">		e = <span class="literal">iota</span> <span class="comment">//iota=0</span></span><br><span class="line">		f        <span class="comment">//iota=1</span></span><br><span class="line">		g = <span class="number">10</span>   <span class="comment">//iota=2</span></span><br><span class="line">		h        <span class="comment">//iota=3</span></span><br><span class="line">		i = <span class="literal">iota</span> <span class="comment">//iota=4</span></span><br><span class="line">		j        <span class="comment">//iota=5</span></span><br><span class="line">	)</span><br><span class="line">	fmt.Println(e, f, g, h, i, j) <span class="comment">// 0 1 10 10 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="变量地址"><a href="#变量地址" class="headerlink" title="变量地址"></a>变量地址</h2><ul>
<li>变量本质就是内存中一块数据的标记.把值存储到变量中实质是把值存储到内存中</li>
<li>每次对变量重新赋值就是在修改变量地址中的内容</li>
<li>在Go语言中可以通过 <code>&amp;+变量名</code> 获取到变量地址值</li>
<li>重新创建一个非引用型变量(即使是把已有变量直接赋值给新变量)也会新开辟内存地址.<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="number">3</span></span><br><span class="line">	fmt.Println(&amp;a) <span class="comment">//输出:地址</span></span><br><span class="line">	a = <span class="number">4</span></span><br><span class="line">	fmt.Println(&amp;a) <span class="comment">//输出的地址不变</span></span><br><span class="line"></span><br><span class="line">	b := a</span><br><span class="line">	b = <span class="number">5</span></span><br><span class="line">	fmt.Println(&amp;b, &amp;a) <span class="comment">//两个值不相同</span></span><br><span class="line">	fmt.Println(b, a)   <span class="comment">//输出:5 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="指针变量"><a href="#指针变量" class="headerlink" title="指针变量"></a>指针变量</h2><ul>
<li>指针变量指向一个值的内存地址</li>
<li>使用&amp;+变量 返回值就是一个指针类型</li>
<li>使用<code>var 变量名 *类型</code> 声明指针类型变量</li>
<li>声明指针不会开辟内存地址,只是准备要指向内存某个空间,而声明变量会开辟内存地址,准备存放内容.所以指针类型变量都是把一个变量的地址赋值给指针变量</li>
<li>使用<code>*+指针</code>能够获取内存地址中的值.所以<code>*+指针</code>就和直接使用变量是相同的</li>
<li>应用指针可以实现多个地方操作同一个内存地址的值(在方法参数应用指针较多)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//创建变量</span></span><br><span class="line">	a := <span class="number">123</span></span><br><span class="line">	<span class="keyword">var</span> point *<span class="keyword">int</span></span><br><span class="line">	point = &amp;a <span class="comment">//此时point和&amp;a是相等的</span></span><br><span class="line">	fmt.Println(point)</span><br><span class="line">	*point = <span class="number">3</span>             <span class="comment">//等价于a=3</span></span><br><span class="line">	fmt.Println(*point, a) <span class="comment">//*point和a是相当的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2></li>
<li>指针目的就是指向内存中一块地址</li>
<li>声明指针后指针不会指向任何内存地址,所以此时指针是空.在Go语言中空用nil表示<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">	fmt.Println(a)        <span class="comment">//输出:&lt;nil&gt;</span></span><br><span class="line">	fmt.Println(a == <span class="literal">nil</span>) <span class="comment">//输出true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="new函数"><a href="#new函数" class="headerlink" title="new函数"></a>new函数</h2><ul>
<li><p>在上一小节中学习了指针,每次创建一个指针必须在额外创建一个变量,操作比较麻烦.</p>
</li>
<li><p>可以通过new函数直接创建一个类型的指针</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名:&#x3D;new(Type)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用new函数创建的指针已有指向,可以使用<code>*指针对象</code>进行赋值.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br><span class="line">	fmt.Println(a) <span class="comment">//输出:指针地址</span></span><br><span class="line">	*a = <span class="number">123</span></span><br><span class="line">	fmt.Println(*a) <span class="comment">//输出:123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>只声明的指针变量不能直接赋值.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">	*a = <span class="number">123</span></span><br><span class="line">	fmt.Println(*a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class="line">[signal 0xc0000005 code&#x3D;0x1 addr&#x3D;0x0 pc&#x3D;0x48b576]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h1><h2 id="时间类型概述"><a href="#时间类型概述" class="headerlink" title="时间类型概述"></a>时间类型概述</h2><ul>
<li>时间类型在实际开发中使用频率很高,代表现实世界的时间</li>
<li>在Go语言中时间类型不是关键字而是使用time包下Time结构体</li>
<li>时间类型默认显示为UTC,所以经常需要把时间类型转换为字符串,显示成我们所熟悉的格式</li>
</ul>
<h2 id="Time的使用"><a href="#Time的使用" class="headerlink" title="Time的使用"></a>Time的使用</h2><ul>
<li><p>声明Time时,默认时间是无意义的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> t time.Time</span><br><span class="line">	fmt.Println(t)<span class="comment">//输出:0001-01-01 00:00:00 +0000 UTC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>可以通过time包下的Now()函数获取操作系统当前时间</p>
<ul>
<li>+0800 CST 表示北京时间,东八区<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t) <span class="comment">//输出:年-月-日 小时:分钟:秒.纳秒 +0800 CST m=+0.003012301</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>也可以通过时间戳创建时间类型变量(距离1970年1月1日的纳秒差)</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1秒(s)=1000毫秒(ms)</span></span><br><span class="line"><span class="comment">1秒(s)=1000000微秒(μs)</span></span><br><span class="line"><span class="comment">1秒(s)=1000000000纳秒(ns)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">t := time.Now()</span><br><span class="line">t1 := time.Unix(<span class="number">0</span>, t.UnixNano()) <span class="comment">//根据时间戳创建时间.第二个值[0, 999999999]外合法</span></span><br><span class="line">fmt.Println(t.String())</span><br><span class="line">fmt.Println(t1)</span><br></pre></td></tr></table></figure></li>
<li><p>可以根据自己要求创建时间</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//time.Local取到本地时间位置对象,东八区</span></span><br><span class="line">t := time.Date(<span class="number">2020</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>, time.Local)</span><br><span class="line">fmt.Println(t) <span class="comment">//输出:2020-05-06 07:08:09 +0800 CST</span></span><br></pre></td></tr></table></figure></li>
<li><p>在time包下提供了大量的函数或方法获取时间的某一项</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t)</span><br><span class="line">fmt.Println(t.Year())       <span class="comment">//年</span></span><br><span class="line">fmt.Println(<span class="keyword">int</span>(t.Month())) <span class="comment">//月</span></span><br><span class="line">fmt.Println(t.Day())        <span class="comment">//日</span></span><br><span class="line">fmt.Println(t.Date())       <span class="comment">//三个参数,分别是:年,月,日</span></span><br><span class="line">fmt.Println(t.Hour())       <span class="comment">//小时</span></span><br><span class="line">fmt.Println(t.Minute())     <span class="comment">//分钟</span></span><br><span class="line">fmt.Println(t.Second())     <span class="comment">//秒</span></span><br><span class="line">fmt.Println(t.Clock())      <span class="comment">//三个参数,分别是:小时,分钟,秒</span></span><br><span class="line">fmt.Println(t.Nanosecond()) <span class="comment">//纳秒</span></span><br><span class="line">fmt.Println(t.Unix())       <span class="comment">//秒差</span></span><br><span class="line">fmt.Println(t.UnixNano())   <span class="comment">//纳秒差</span></span><br></pre></td></tr></table></figure>
<h2 id="时间和string相互转换"><a href="#时间和string相互转换" class="headerlink" title="时间和string相互转换"></a>时间和string相互转换</h2></li>
<li><p>时间转换为string</p>
<ul>
<li>参数必须是这个时间,为Go语言出现时间<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">t := time.Now()</span><br><span class="line"><span class="comment">//参数必须是这个时间,格式任意</span></span><br><span class="line">s := t.Format(<span class="string">"2006-01-02 15:04:05"</span>, )</span><br><span class="line">fmt.Println(s)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>string转换为Time</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s:=<span class="string">"2022-02-04 22:02:04"</span></span><br><span class="line">t,err:=time.Parse(<span class="string">"2006-01-02 15:04:05"</span>,s)</span><br><span class="line">fmt.Println(t,err)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习二：golang自带的工具</title>
    <url>/posts/golang/2020/06/202006122229.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="解压版Go语言安装包中自带工具"><a href="#解压版Go语言安装包中自带工具" class="headerlink" title="解压版Go语言安装包中自带工具"></a>解压版Go语言安装包中自带工具</h1><ul>
<li><p>在%GOROOT%/bin中有三个工具</p>
<ul>
<li>go.exe 编译、运行、构建等都可以使用这个命令</li>
<li>godoc.exe 查看包或函数的源码</li>
<li>gofmt.exe 格式化文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--bin</span><br><span class="line">	--go.exe</span><br><span class="line">	--godoc.exe</span><br><span class="line">	--gofmt.exe</span><br></pre></td></tr></table></figure>
<h2 id="go-exe参数列表"><a href="#go-exe参数列表" class="headerlink" title="go.exe参数列表"></a>go.exe参数列表</h2></li>
</ul>
</li>
<li><p>在命令行中通过<code>go help</code>查看go参数如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">        go command [arguments]</span><br><span class="line"></span><br><span class="line">The commands are:</span><br><span class="line"></span><br><span class="line">        build       compile packages and dependencies</span><br><span class="line">        clean       remove object files and cached files</span><br><span class="line">        doc         show documentation for package or symbol</span><br><span class="line">        env         print Go environment information</span><br><span class="line">        bug         start a bug report</span><br><span class="line">        fix         update packages to use new APIs</span><br><span class="line">        fmt         gofmt (reformat) package sources</span><br><span class="line">        generate    generate Go files by processing source</span><br><span class="line">        get         download and install packages and dependencies</span><br><span class="line">        install     compile and install packages and dependencies</span><br><span class="line">        list        list packages</span><br><span class="line">        run         compile and run Go program</span><br><span class="line">        test        test packages</span><br><span class="line">        tool        run specified go tool</span><br><span class="line">        version     print Go version</span><br><span class="line">		vet         report likely mistakes in packages</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="常用参数解释"><a href="#常用参数解释" class="headerlink" title="常用参数解释"></a>常用参数解释</h3><ul>
<li><code>go version</code>查看Go语言版本</li>
<li><code>go env</code>查看Go语言详细环境</li>
<li><code>go list</code>查看Go语言文件目录</li>
<li><code>go build</code>把源码文件构建成系统可执行文件</li>
<li><code>go clean</code>清空生成的可执行文件</li>
<li><code>go vet</code>静态解析文件,检查是否有语法错误等</li>
<li><code>go get</code>从远程下载第三方Go语言库</li>
<li><code>go bug</code>提交bug</li>
<li><code>go test</code>测试(在后面章节中讲解)</li>
<li><code>go run</code>运行文件</li>
</ul>
<h2 id="godoc-命令介绍"><a href="#godoc-命令介绍" class="headerlink" title="godoc 命令介绍"></a>godoc 命令介绍</h2><ul>
<li>可以使用<code>godoc [包] [函数名]</code>查看包或函数的详细源码</li>
<li>源码在学习中非常重要,经常查看源码方便理解GO的原理</li>
</ul>
<h3 id="godoc使用"><a href="#godoc使用" class="headerlink" title="godoc使用"></a>godoc使用</h3><ul>
<li>查看包的源码<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">C:\Users\zhang&gt;godoc fmt</span><br><span class="line">use <span class="string">'godoc cmd/fmt'</span> <span class="keyword">for</span> documentation on the fmt command</span><br><span class="line"></span><br><span class="line">PACKAGE DOCUMENTATION</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> fmt</span><br><span class="line">    <span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">FUNCTIONS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span></span><br><span class="line">    Errorf formats according to a format specifier and returns the <span class="keyword">string</span> as</span><br><span class="line">    a value that satisfies error.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprint</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Fprint formats using the <span class="keyword">default</span> formats <span class="keyword">for</span> its operands and writes to</span><br><span class="line">    w. Spaces are added between operands when neither is a <span class="keyword">string</span>. It</span><br><span class="line">    returns the number of bytes written and any write error encountered.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintf</span><span class="params">(w io.Writer, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Fprintf formats according to a format specifier and writes to w. It</span><br><span class="line">    returns the number of bytes written and any write error encountered.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fprintln</span><span class="params">(w io.Writer, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Fprintln formats using the <span class="keyword">default</span> formats <span class="keyword">for</span> its operands and writes</span><br><span class="line">    to w. Spaces are always added between operands and a newline is</span><br><span class="line">    appended. It returns the number of bytes written and any write error</span><br><span class="line">    encountered.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscan</span><span class="params">(r io.Reader, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Fscan scans text read from r, storing successive space-separated values</span><br><span class="line">    into successive arguments. Newlines count as space. It returns the</span><br><span class="line">    number of items successfully scanned. If that is less than the number of</span><br><span class="line">    arguments, err will report why.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscanf</span><span class="params">(r io.Reader, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Fscanf scans text read from r, storing successive space-separated values</span><br><span class="line">    into successive arguments as determined by the format. It returns the</span><br><span class="line">    number of items successfully parsed. Newlines in the input must match</span><br><span class="line">    newlines in the format.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fscanln</span><span class="params">(r io.Reader, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Fscanln is similar to Fscan, but stops scanning at a newline and after</span><br><span class="line">    the final item there must be a newline or EOF.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Print</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Print formats using the <span class="keyword">default</span> formats <span class="keyword">for</span> its operands and writes to</span><br><span class="line">    standard output. Spaces are added between operands when neither is a</span><br><span class="line">    <span class="keyword">string</span>. It returns the number of bytes written and any write error</span><br><span class="line">    encountered.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Printf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Printf formats according to a format specifier and writes to standard</span><br><span class="line">    output. It returns the number of bytes written and any write error</span><br><span class="line">    encountered.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Println formats using the <span class="keyword">default</span> formats <span class="keyword">for</span> its operands and writes to</span><br><span class="line">    standard output. Spaces are always added between operands and a newline</span><br><span class="line">    is appended. It returns the number of bytes written and any write error</span><br><span class="line">    encountered.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scan</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Scan scans text read from standard input, storing successive</span><br><span class="line">    space-separated values into successive arguments. Newlines count as</span><br><span class="line">    space. It returns the number of items successfully scanned. If that is</span><br><span class="line">    less than the number of arguments, err will report why.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scanf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Scanf scans text read from standard input, storing successive</span><br><span class="line">    space-separated values into successive arguments as determined by the</span><br><span class="line">    format. It returns the number of items successfully scanned. If that is</span><br><span class="line">    less than the number of arguments, err will report why. Newlines in the</span><br><span class="line">    input must match newlines in the format. The one exception: the verb %c</span><br><span class="line">    always scans the next <span class="keyword">rune</span> in the input, even <span class="keyword">if</span> it is a space (or tab</span><br><span class="line">    etc.) or newline.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Scanln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Scanln is similar to Scan, but stops scanning at a newline and after the</span><br><span class="line">    final item there must be a newline or EOF.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprint</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line">    Sprint formats using the <span class="keyword">default</span> formats <span class="keyword">for</span> its operands and returns</span><br><span class="line">    the resulting <span class="keyword">string</span>. Spaces are added between operands when neither is</span><br><span class="line">    a <span class="keyword">string</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line">    Sprintf formats according to a format specifier and returns the</span><br><span class="line">    resulting <span class="keyword">string</span>.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintln</span><span class="params">(a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span></span><br><span class="line">    Sprintln formats using the <span class="keyword">default</span> formats <span class="keyword">for</span> its operands and returns</span><br><span class="line">    the resulting <span class="keyword">string</span>. Spaces are always added between operands and a</span><br><span class="line">    newline is appended.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sscan</span><span class="params">(str <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Sscan scans the argument <span class="keyword">string</span>, storing successive space-separated</span><br><span class="line">    values into successive arguments. Newlines count as space. It returns</span><br><span class="line">    the number of items successfully scanned. If that is less than the</span><br><span class="line">    number of arguments, err will report why.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sscanf</span><span class="params">(str <span class="keyword">string</span>, format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Sscanf scans the argument <span class="keyword">string</span>, storing successive space-separated</span><br><span class="line">    values into successive arguments as determined by the format. It returns</span><br><span class="line">    the number of items successfully parsed. Newlines in the input must</span><br><span class="line">    match newlines in the format.</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sscanln</span><span class="params">(str <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br><span class="line">    Sscanln is similar to Sscan, but stops scanning at a newline and after</span><br><span class="line">    the final item there must be a newline or EOF.</span><br><span class="line"></span><br><span class="line">TYPES</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Formatter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Format(f State, c <span class="keyword">rune</span>)</span><br><span class="line">&#125;</span><br><span class="line">    Formatter is the <span class="keyword">interface</span> implemented by values with a custom</span><br><span class="line">    formatter. The implementation of Format may call Sprint(f) or Fprint(f)</span><br><span class="line">    etc. to generate its output.</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GoStringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    GoString() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">    GoStringer is implemented by any value that has a GoString method, which</span><br><span class="line">    defines the Go syntax <span class="keyword">for</span> that value. The GoString method is used to</span><br><span class="line">    <span class="built_in">print</span> values passed as an operand to a %#v format.</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li>查看某个包中某个函数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\zhang&gt;godoc fmt Println</span><br><span class="line">use &#39;godoc cmd&#x2F;fmt&#39; for documentation on the fmt command</span><br><span class="line"></span><br><span class="line">func Println(a ...interface&#123;&#125;) (n int, err error)</span><br><span class="line">    Println formats using the default formats for its operands and writes to</span><br><span class="line">    standard output. Spaces are always added between operands and a newline</span><br><span class="line">    is appended. It returns the number of bytes written and any write error</span><br><span class="line">    encountered.</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="gofmt工具介绍"><a href="#gofmt工具介绍" class="headerlink" title="gofmt工具介绍"></a>gofmt工具介绍</h2><ul>
<li>规范的代码方便自己的阅读也方便别人的阅读.编写规范代码是每个程序的必修课</li>
<li>gofmt工具可以帮助程序员把代码进行格式化,按照规范进行格式化</li>
<li>使用gofmt前提是文件编译通过</li>
</ul>
<h3 id="不规范代码示例"><a href="#不规范代码示例" class="headerlink" title="不规范代码示例"></a>不规范代码示例</h3><ul>
<li>查看下面代码中不规范的地方有几处</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">( )</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"hello word"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用gofmt的步骤"><a href="#使用gofmt的步骤" class="headerlink" title="使用gofmt的步骤"></a>使用gofmt的步骤</h3><ul>
<li>在命令行输入<code>gofmt 文件名</code>就可以对文件进行格式化,格式化后输出<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">D:\<span class="keyword">go</span>\<span class="number">0201</span>&gt;gofmt main.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">"hello word"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通过运行gofmt后发现规范的代码和不规范代码的几处区别<ul>
<li>package关键字和import关键字和func main之间有空行</li>
<li>main和括号之间没有空格</li>
<li>main后面()之间没有空格</li>
<li>()和{之间有空格</li>
<li>fmt.Println()前面有缩进</li>
<li>fmt.Println()后面没有分号</li>
</ul>
</li>
</ul>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>golang学习一：从环境配置开始到HelloWorld入门</title>
    <url>/posts/golang/2020/06/202006111106.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Golang介绍"><a href="#Golang介绍" class="headerlink" title="Golang介绍"></a>Golang介绍</h1><ul>
<li>Go语言是谷歌公司于2009年11月发布的编程语言,其发明人Robert Griesemer、Rob Pike、Ken Thompson<ul>
<li>Robert Griesemer:罗伯特·格瑞史莫参与开发Java的Hotspot编译器和Javascript V8引擎</li>
<li>Rob Pike:罗布·派克曾是Unix团队成员,与Thompson一起创造了UTF-8</li>
<li>Ken Thompson:肯·汤普森,IT行业殿堂级人物.1983年图灵奖和1998年美国国家技术奖.创造出C语言和Unix系统</li>
</ul>
</li>
<li>官方解释:Go语言是一种开源的程序设计语言,它的目的使得开发者可以方便地构建简单、可靠、高效的软件<h2 id="Go语言优势"><a href="#Go语言优势" class="headerlink" title="Go语言优势"></a>Go语言优势</h2></li>
<li>语法简单<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,b=b,a</span><br><span class="line">fmt.Println(a,b)</span><br></pre></td></tr></table></figure></li>
<li>可以直接编译成机器码</li>
<li>静态数据类型和编译语言<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a:=<span class="number">1</span></span><br><span class="line">b:=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>内置支持并发<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">//do something</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li>
<li>内置垃圾回收</li>
<li>部署简单</li>
<li>强大的标准库</li>
</ul>
<h2 id="Go语言适用场景"><a href="#Go语言适用场景" class="headerlink" title="Go语言适用场景"></a>Go语言适用场景</h2><ul>
<li>服务器编程.实现日志处理,虚拟机处理,文件处理等</li>
<li>分布式系统或数据库代理</li>
<li>网络编程,包含web应用</li>
<li>云平台</li>
</ul>
<h2 id="市场占有率"><a href="#市场占有率" class="headerlink" title="市场占有率"></a>市场占有率</h2><ul>
<li>根据Tiobe中Go语言的排行在逐年上升.</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/Tiobe2019-2020.jpeg" alt="tiobe"></p>
<h1 id="环境配置—windows"><a href="#环境配置—windows" class="headerlink" title="环境配置—windows"></a>环境配置—windows</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><ul>
<li>由于Google退出中国,所以国内无法直接访问到Go语言的官网</li>
<li>但是可以通过Go语言中文网进行加载资源和交流Go语言技术<blockquote>
<p><a href="https://studygolang.com/" target="_blank" rel="noopener">https://studygolang.com/</a></p>
</blockquote>
<h2 id="下载步骤"><a href="#下载步骤" class="headerlink" title="下载步骤"></a>下载步骤</h2></li>
<li>直接进入到Go语言中文网下载页面</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/goxiazai.png" alt="进入下载页面"></p>
<ul>
<li>选择要下载的版本<ul>
<li>首先要确定版本号,本套视频使用的Go1.10.1</li>
<li>然后确定自己的操作系统,windows或linux等,本阶段使用Window操作系统进行讲解</li>
<li>如果是windows确定自己系统位数,32位系统选择386,64位系统选择amd64</li>
<li>扩展名.msi表示安装版.zip为解压版(推荐使用解压版,所有的配置都自己操作,心中有数)</li>
</ul>
</li>
</ul>
<p><img src="images/goxuanzebanben.png" alt="进入下载页面"></p>
<h2 id="Go语言库文件夹解释"><a href="#Go语言库文件夹解释" class="headerlink" title="Go语言库文件夹解释"></a>Go语言库文件夹解释</h2><ul>
<li><strong>api</strong> : 每个版本更新说明</li>
<li><strong>bin</strong> : 自带工具. <strong>重点记忆</strong></li>
<li><strong>blog</strong>:博客</li>
<li><strong>doc</strong>:文档</li>
<li><strong>misc</strong>: 代码配置</li>
<li><strong>lib</strong>:额外引用</li>
<li><strong>src</strong>:标准库源码,以后第三方库放入到这个文件夹中. <strong>重点记忆</strong></li>
<li><strong>test</strong>:测试</li>
</ul>
<h2 id="配置步骤-Windows举例"><a href="#配置步骤-Windows举例" class="headerlink" title="配置步骤(Windows举例)"></a>配置步骤(Windows举例)</h2><ul>
<li>把下载好的go1.10.1.windows-amd64进行解压,解压后出现go文件夹</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/goanzhuangbaojieya.png" alt=""></p>
<ul>
<li>把解压后的go文件夹复制到任意非中文目录中(例如: D:\mysoftware\go\soft\go)<ul>
<li>如果没有配置环境变量默认去C:\go找Go语言库  </li>
</ul>
</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/jieyacunfang.png" alt=""></p>
<ul>
<li>配置环境变量<ul>
<li>“我的电脑” –&gt; 右键”属性”–&gt; “高级” –&gt; “环境变量” –&gt; “系统变量”–&gt; “新建”按钮后输入</li>
</ul>
</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/goroot.png" alt=""></p>
<ul>
<li>在”系统变量”中PATH属性里面添加<code>%GOROOT%\bin;</code></li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/gopath.png" alt=""></p>
<ul>
<li>启动”命令行”输入<code>go version</code>如果出现下面效果说明配置成功<ul>
<li>也可以使用<code>go env</code>命令查看全部环境</li>
</ul>
</li>
</ul>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/jieguo.png" alt=""></p>
<h2 id="环境变量参数解释"><a href="#环境变量参数解释" class="headerlink" title="环境变量参数解释"></a>环境变量参数解释</h2><ul>
<li><strong>GOROOT</strong> 表示Go语言库的根目录的完整路径</li>
<li><strong>PATH</strong> 中配置内容方便在命令行快速调用Go语言库中工具</li>
<li><strong>GOPATH</strong> 可以先不配置,在做项目时需要配置,表示项目路径</li>
</ul>
<h1 id="Hello-World入门"><a href="#Hello-World入门" class="headerlink" title="Hello World入门"></a>Hello World入门</h1><p>程序员的Hello World情怀，学习一门新语言第一行输出代码：Hello World！</p>
<ul>
<li><p>新建txt文件,并修改扩展名后名称为<strong>main.go</strong></p>
</li>
<li><p>在文件中输入以下代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main  <span class="comment">//声明当前我文件所在的包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; <span class="comment">//整合个函数的人口</span></span><br><span class="line">	fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用Windows命令行工具,在go文件所在的目录下，输入以下命令运行观察结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure></li>
<li><p>程序结果应该是输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>
</li>
<li><p>同样的也可以直接通过go build命令进行打包，在go文件所在的目录下会生成一个windows上可执行文件helloworld.exe。执行helloworld.exe，在命令行中会输出 Hello Wrold。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go build helloworld</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此Golang的入门就到这了，今后还有漫长的Golang之旅要去探索！</p>
<hr>
<p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>golang入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring源码学习：Spring运行原理分析</title>
    <url>/posts/spring/2020/06/202006081449.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring模块组成"><a href="#Spring模块组成" class="headerlink" title="Spring模块组成"></a>Spring模块组成</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/springframework.jpg" alt=""></p>
<table>
<thead>
<tr>
<th>模块名称</th>
<th>主要功能</th>
</tr>
</thead>
<tbody><tr>
<td>spring-core</td>
<td>依赖注入IOC与DI的最基本实现</td>
</tr>
<tr>
<td>spring-beans</td>
<td>Bean工厂与Bean的装配</td>
</tr>
<tr>
<td>spring-context</td>
<td>定义基础的Spring的Context上下文即IOC容器</td>
</tr>
<tr>
<td>spring-context-support</td>
<td>对Spring IOC容器的扩展支持，以及IOC子容器</td>
</tr>
<tr>
<td>spring-context-indexer</td>
<td>Spring的类管理组件和Classpath扫描</td>
</tr>
<tr>
<td>spring-expression</td>
<td>Spring表达式语言</td>
</tr>
<tr>
<td>spring-aop</td>
<td>面向切面编程的应用模块，整合Asm，CGLIb、JDKProxy</td>
</tr>
<tr>
<td>spring-aspects</td>
<td>集成AspectJ，AOP应用框架</td>
</tr>
<tr>
<td>spring-instrument</td>
<td>动态Class Loading模块</td>
</tr>
<tr>
<td>spring-jdbc</td>
<td>Spring 提供的JDBC抽象框架的主要实现模块，用于简化Spring JDBC操作</td>
</tr>
<tr>
<td>spring-tx</td>
<td>Spring JDBC事务控制实现模块</td>
</tr>
<tr>
<td>spring-orm</td>
<td>主要集成 Hibernate, Java Persistence API (JPA) 和 Java Data Objects (JDO)</td>
</tr>
<tr>
<td>spring-oxm</td>
<td>将Java对象映射成XML数据，或者将XML数据映射成Java对象</td>
</tr>
<tr>
<td>spring-jms</td>
<td>Java Messaging Service能够发送和接收信息</td>
</tr>
<tr>
<td>spring-web</td>
<td>提供了最基础Web支持，主要建立于核心容器之上，通过Servlet或者Listeners来初始化IOC容器</td>
</tr>
<tr>
<td>spring-webmvc</td>
<td>实现了Spring MVC（model-view-Controller）的Web应用</td>
</tr>
<tr>
<td>spring-websocket</td>
<td>主要是与Web前端的全双工通讯的协议</td>
</tr>
<tr>
<td>spring-webflux</td>
<td>一个新的非堵塞函数式 Reactive Web 框架，可以用来建立异步的，非阻塞，事件驱动的服务</td>
</tr>
<tr>
<td>spring-messaging</td>
<td>从Spring4开始新加入的一个模块，主要职责是为Spring 框架集成一些基础的报文传送应用</td>
</tr>
<tr>
<td>spring-test</td>
<td>主要为测试提供支持的</td>
</tr>
<tr>
<td>spring-framework-bom</td>
<td>Bill of Materials.解决Spring的不同模块依赖版本不同问题</td>
</tr>
</tbody></table>
<h1 id="Spring各模块之间的依赖"><a href="#Spring各模块之间的依赖" class="headerlink" title="Spring各模块之间的依赖"></a>Spring各模块之间的依赖</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/springmodel.png" alt=""></p>
<h1 id="Spring关键类图"><a href="#Spring关键类图" class="headerlink" title="Spring关键类图"></a>Spring关键类图</h1><p>BeanFactory类图</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/spring/BeanFactory.png" alt=""></p>
<p>BeanDefinition类图</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/spring/BeanDefinition.png" alt=""></p>
<h1 id="Spring中IOC的运行时序图"><a href="#Spring中IOC的运行时序图" class="headerlink" title="Spring中IOC的运行时序图"></a>Spring中IOC的运行时序图</h1><p>IOC(Inversion of Control)控制反转：所谓控制反转，就是把原先我们代码里面需要实现的对象创建、依赖的代码，反转给容器来帮忙实现。那么必然的我们需要创建一个容器，同时需要一种描述来让容器知道需要创建的对象与对象的关系。这个描述最具体表现就是我们所看到的配置文件。<br>Spring IOC 定位配置文件并扫描相关注解—&gt;加载配置信息到内存—根据加载的信息将对象初始化到IOC容器中。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/spring/locationconfig.png" alt=""></p>
<ul>
<li>通用职责</li>
<li>依赖职责<ul>
<li>依赖查找</li>
<li>依赖注入</li>
</ul>
</li>
<li>声明周期管理<ul>
<li>容器</li>
<li>托管的资源（Java Bean）</li>
</ul>
</li>
<li>配置<ul>
<li>容器</li>
<li>外部化配置</li>
<li>托管的资源（Java Bean）</li>
</ul>
</li>
</ul>
<h1 id="Spring-IOC依赖查找"><a href="#Spring-IOC依赖查找" class="headerlink" title="Spring IOC依赖查找"></a>Spring IOC依赖查找</h1><p>根据Bean名称查找</p>
<p>​    实时查找</p>
<p>​    延迟查找</p>
<p>根据类型查找</p>
<p>​    单个Bean对象</p>
<p>​    集合Bean对象</p>
<p>根据名称+类型查找</p>
<p>根据Java注解查找</p>
<p>​    查找单个Bean对象</p>
<p>​    查找集合Bean对象</p>
<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h1 id="配置元信息"><a href="#配置元信息" class="headerlink" title="配置元信息"></a>配置元信息</h1><h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><h1 id="Spring应用上下文"><a href="#Spring应用上下文" class="headerlink" title="Spring应用上下文"></a>Spring应用上下文</h1><h1 id="使用IOC容器"><a href="#使用IOC容器" class="headerlink" title="使用IOC容器"></a>使用IOC容器</h1><h1 id="Spring-IOC容器生命周期"><a href="#Spring-IOC容器生命周期" class="headerlink" title="Spring IOC容器生命周期"></a>Spring IOC容器生命周期</h1><h1 id="Spring中DI的运行时序图"><a href="#Spring中DI的运行时序图" class="headerlink" title="Spring中DI的运行时序图"></a>Spring中DI的运行时序图</h1><p>DI(Dependency Injection)依赖注入：就是指对象是被动接受依赖类而不是自己主动去找，换句话说就<br>是指对象不是从容器中查找它依赖的类，而是在容器实例化对象的时候主动将它依赖的类注入给它。</p>
<h1 id="Spring中AOP的运行时序图"><a href="#Spring中AOP的运行时序图" class="headerlink" title="Spring中AOP的运行时序图"></a>Spring中AOP的运行时序图</h1><h1 id="Spring中MVC的运行时序图"><a href="#Spring中MVC的运行时序图" class="headerlink" title="Spring中MVC的运行时序图"></a>Spring中MVC的运行时序图</h1>]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot系列二：理解Spring Boot中的SpringApplication</title>
    <url>/posts/Spring%20Boot/2020/06/202006081425.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Spring-Framework的理解"><a href="#Spring-Framework的理解" class="headerlink" title="Spring Framework的理解"></a>Spring Framework的理解</h1><ul>
<li>Spring模式注解</li>
<li>Spring应用上下文</li>
<li>Spring工厂加载机制</li>
<li>Spring应用上下文初始器</li>
<li>Spring Environment抽象</li>
<li>Spring应用事件/监听器</li>
</ul>
<p>衍生的Spring Boot的技术：<code>SpringApplication</code>、<code>SpringApplication Builder API</code>、<code>SpringApplication</code>运行监听器、<code>SpringApplication</code>参数、<code>SpringApplication</code>故障分析、<code>Spring Boot</code>应用事件/监听器</p>
<h1 id="SpringApplication准备阶段"><a href="#SpringApplication准备阶段" class="headerlink" title="SpringApplication准备阶段"></a>SpringApplication准备阶段</h1><h2 id="配置：Spring-Bean来源"><a href="#配置：Spring-Bean来源" class="headerlink" title="配置：Spring Bean来源"></a>配置：Spring Bean来源</h2><p>Java配置类用于Spring Boot<code>BeanDefinitionLoader</code>读取，并且将配置元解析加载位Spring Bean定义。需要有一个或多个以上的Java配置类</p>
<p>example：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实<code>@SpringBootApplication</code>它是个复合注解，因为里面的<code>SpringBootConfiguration</code>继承了<code>@Configuration</code>。这就很明显了，<code>@Configuration</code>是继承了<code>@Component</code>这个</p>
<h2 id="推断：Web应用类型和引导类"><a href="#推断：Web应用类型和引导类" class="headerlink" title="推断：Web应用类型和引导类"></a>推断：Web应用类型和引导类</h2><h2 id="加载：应用上下文初始器和应用事件监听器"><a href="#加载：应用上下文初始器和应用事件监听器" class="headerlink" title="加载：应用上下文初始器和应用事件监听器"></a>加载：应用上下文初始器和应用事件监听器</h2>]]></content>
      <categories>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁的实现</title>
    <url>/posts/distributed/2020/06/202006081357.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1>]]></content>
  </entry>
  <entry>
    <title>Docker下部署的SpringBoot应用发送邮件失败</title>
    <url>/posts/bug-log/2020/06/202006071737.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>通过简单的Dockerfile构建了一个镜像(consumer-service-rabbitmq/v1.0)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-alpine</span><br><span class="line">MAINTAINER maishuren</span><br><span class="line">EXPOSE 8001</span><br><span class="line">ADD target/consumer-rabbit-1.0-SNAPSHOT.jar /</span><br><span class="line">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/consumer-rabbit-1.0-SNAPSHOT.jar"</span>]</span><br></pre></td></tr></table></figure>
<h1 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name consumer-service-rabbitmq-v1.0 -p 8001:8001 -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime consumer-service-rabbitmq/v1.0</span><br></pre></td></tr></table></figure>

<h1 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h1><p>发送邮件相关的yml配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">qq邮箱</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">授权码之类</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">qq邮箱</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">socketFactory:</span> </span><br><span class="line">            <span class="attr">port:</span> <span class="number">25</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">            <span class="attr">fallback:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">starttls:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>运行后在发送邮件的时候直接报错。因为smtp默认使用25端口发送邮件，在运行容器的时候没有开放25端口。<br><img src="https://oscimg.oschina.net/oscnet/up-c8e869bd36880050680b0e9d8ae0bd4b6d3.png" alt="error"></p>
<h1 id="重新部署容器开放25端口"><a href="#重新部署容器开放25端口" class="headerlink" title="重新部署容器开放25端口"></a>重新部署容器开放25端口</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name consumer-service-rabbitmq-v1.0 -p 8001:8001 -p 25:25 -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime consumer-service-rabbitmq/v1.0</span><br></pre></td></tr></table></figure>

<p>部署成功之后，再次调用的时候，还是报了上面的错误。经过一番的折腾，发现是服务器厂商屏蔽了25端口，我部署的服务器使用的阿里云的服务器，听说是可以通过申请解封25端口。不过我并不是通过申请解封而是使用其他端口发送邮件。</p>
<h1 id="重新部署使用465端口发送邮件"><a href="#重新部署使用465端口发送邮件" class="headerlink" title="重新部署使用465端口发送邮件"></a>重新部署使用465端口发送邮件</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">qq邮箱</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">授权码之类</span></span><br><span class="line">    <span class="attr">from:</span> <span class="string">qq邮箱</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">auth:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">socketFactory:</span> </span><br><span class="line">            <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">            <span class="attr">fallback:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">starttls:</span></span><br><span class="line">            <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">required:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在重新部署容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name consumer-service-rabbitmq-v1.0 -p 8001:8001 -p 465:465 -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime consumer-service-rabbitmq/v1.0</span><br></pre></td></tr></table></figure>

<p>最后调用邮件发送接口，邮件发送成功</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实问题的出现就是服务器的25端口被屏蔽了，换一个端口发送邮件就好</p>
]]></content>
      <categories>
        <category>踩坑日志</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发编程之锁</title>
    <url>/posts/java-concurrent-programing/2020/06/202006071311.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="synchronized的使用"><a href="#synchronized的使用" class="headerlink" title="synchronized的使用"></a>synchronized的使用</h2><p>在上一篇的线程的安全问题提到了synchronized来解决线程安全问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.concurrent.threadsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUnsafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" sale a ticket,current:"</span> + saleTicket());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">saleTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ticketNum--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized是java中的锁，它修饰的方法或者代码块在同一时刻只能有一个线程去执行方法或代码块。synchronized修改之后会自动加锁，执行完毕之后，会自动解锁，是依靠底层JVM中的Monitor对象。</p>
<p>主要的用法：</p>
<ol>
<li>普通同步方法（实例方法），锁是当前实例对象 ，进入同步代码前要获得当前实例的锁。Thread2要等两秒才执行，说明要等Thread1释放锁，虽然他们调用的方法不一样但是，synchronized修饰的都是实例方法，锁的是当前实例。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.concurrent.lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/6/2 13:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":send email"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":phone"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedLock lock1 = <span class="keyword">new</span> SynchronizedLock();</span><br><span class="line">        SynchronizedLock lock2 = <span class="keyword">new</span> SynchronizedLock();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock1.phone();</span><br><span class="line">        &#125;,<span class="string">"Thread1"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock1.send();</span><br><span class="line">        &#125;,<span class="string">"Thread2"</span>).start();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock1.phone();</span><br><span class="line">        &#125;,<span class="string">"Thread1"</span>).start();</span><br><span class="line">        <span class="comment">//Thread2不用等两秒</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock2.send();</span><br><span class="line">        &#125;,<span class="string">"Thread2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.静态同步方法，锁是当前类的class对象 ，进入同步代码前要获得当前类对象的锁。同理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.concurrent.lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedLock2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":send email"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">":phone"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            SynchronizedLock2.phone();</span><br><span class="line">        &#125;,<span class="string">"Thread1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            SynchronizedLock2.send();</span><br><span class="line">        &#125;,<span class="string">"Thread2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.同步方法块，锁是括号里面的对象，对给定对象加锁，进入同步代码库前要获得给定对象的锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.concurrent.lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedLock3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":send email"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">phone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">":phone"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedLock2 lock1 = <span class="keyword">new</span> SynchronizedLock2();</span><br><span class="line">        SynchronizedLock2 lock2 = <span class="keyword">new</span> SynchronizedLock2();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock1.phone();</span><br><span class="line">        &#125;,<span class="string">"Thread1"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            lock2.send();</span><br><span class="line">        &#125;,<span class="string">"Thread2"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单地从字节码理解synchronized"><a href="#简单地从字节码理解synchronized" class="headerlink" title="简单地从字节码理解synchronized"></a>简单地从字节码理解synchronized</h2><p>使用javap工具: monitorenter—&gt;monitorexit，所以说synchronized是JVM实现的，会自动释放锁。任何对象都可以作为锁，锁信息存在于对象头中的Mark Word</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void phone();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: getfield      #3                  &#x2F;&#x2F; Field lock:Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">       4: dup</span><br><span class="line">       5: astore_1</span><br><span class="line">       6: monitorenter</span><br><span class="line">       7: getstatic     #4                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">      10: new           #5                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">      13: dup</span><br><span class="line">      14: invokespecial #6                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      17: invokestatic  #7                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.currentThread:()Ljava&#x2F;lang&#x2F;Thread;</span><br><span class="line">      20: invokevirtual #8                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.getName:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      23: invokevirtual #9                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      26: ldc           #19                 &#x2F;&#x2F; String :phone</span><br><span class="line">      28: invokevirtual #9                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      31: invokevirtual #11                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      34: invokevirtual #12                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">      37: getstatic     #13                 &#x2F;&#x2F; Field java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.SECONDS:Ljava&#x2F;util&#x2F;concurrent&#x2F;TimeUnit;</span><br><span class="line">      40: ldc2_w        #14                 &#x2F;&#x2F; long 2l</span><br><span class="line">      43: invokevirtual #16                 &#x2F;&#x2F; Method java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.sleep:(J)V</span><br><span class="line">      46: goto          54</span><br><span class="line">      49: astore_2</span><br><span class="line">      50: aload_2</span><br><span class="line">      51: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;InterruptedException.printStackTrace:()V</span><br><span class="line">      54: aload_1</span><br><span class="line">      55: monitorexit</span><br><span class="line">      56: goto          64</span><br><span class="line">      59: astore_3</span><br><span class="line">      60: aload_1</span><br><span class="line">      61: monitorexit</span><br></pre></td></tr></table></figure>

<h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><p>从宏观上分：悲观锁和乐观锁</p>
<h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>就是悲观思想，即认为写多，遇到并发写的可能性高，每次去拿数据的时候都认为别人会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会被阻塞直到拿到锁。java中的悲观锁就是Synchronized</p>
<h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>就是一种乐观思想，与悲观锁相反，认为读多写少，遇到并发写的可能性低，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），如果失败则要重复读-比较-写的操作。如java中著名的CAS</p>
<h2 id="JDK锁优化"><a href="#JDK锁优化" class="headerlink" title="JDK锁优化"></a>JDK锁优化</h2><p>高效并发是从JDK1.5升级到JDK1.6后的一项重要的改进项</p>
<h3 id="Markword"><a href="#Markword" class="headerlink" title="Markword"></a>Markword</h3><p>在说偏向锁、轻量级锁和重量级锁之前，应该要先了解markword。markword是对象头中存储信息的一个字段，是java对象数据结构的一部分</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/markword-table.png" alt="markword"></p>
<center>图出自《深入了解Java虚拟机》</center>

<table>
<thead>
<tr>
<th>状态</th>
<th>标志位</th>
<th>存储内容</th>
</tr>
</thead>
<tbody><tr>
<td>未锁定</td>
<td>01</td>
<td>对象哈希码。对象分代年龄</td>
</tr>
<tr>
<td>轻量级锁定</td>
<td>00</td>
<td>指向锁记录</td>
</tr>
<tr>
<td>重量级锁定(锁膨胀)</td>
<td>10</td>
<td>执行重量级锁定的指针</td>
</tr>
<tr>
<td>GC标记</td>
<td>11</td>
<td>空(不需要记录信息)</td>
</tr>
<tr>
<td>可偏向</td>
<td>01</td>
<td>偏向线程ID、偏向时间戳、对象年龄分代</td>
</tr>
</tbody></table>
<h3 id="自旋锁和自适应自旋"><a href="#自旋锁和自适应自旋" class="headerlink" title="自旋锁和自适应自旋"></a>自旋锁和自适应自旋</h3><p>TODO</p>
<h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>TODO</p>
<h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>TODO</p>
<h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>TODO</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>TODO</p>
]]></content>
      <categories>
        <category>并发编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>java并发编程基础</title>
    <url>/posts/java-concurrent-programing/2020/06/202006022138.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h1><p>在说线程之前，就要先说一下什么是进程，因为线程是进程中的一个实体，线程并不会独立而存在的。进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，线程是进程的一个执行路径，一个进程中至少含有一个线程，进程中的多个线程是共享进程的资源。</p>
<p>操作系统把CPU资源分配给进程，但是真正占用CPU的线程，所以才会说线程是CPU分配的基本单位。在我们启动java中的main函数时，就是启动了一个进程，而main函数所在的线程就是这个进程中的一个线程，这个线程也被称为主线程。</p>
<h1 id="Java中线程的状态和线程的生命周期"><a href="#Java中线程的状态和线程的生命周期" class="headerlink" title="Java中线程的状态和线程的生命周期"></a>Java中线程的状态和线程的生命周期</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/thread-state.png" alt="thread-state"></p>
<p>新建状态：新创建一个线程对象之后，还没有对用start()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());<span class="comment">//新建状态</span></span><br></pre></td></tr></table></figure>

<p>就绪状态：线程对象在调用start()之后进入就绪状态，等待CPU调度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread.start();</span><br></pre></td></tr></table></figure>

<p>运行状态：线程得到CPU调度，获得CPU的执行时间</p>
<p>阻塞状态：遇到需要获得锁的代码块，而线程没能获得锁，进入阻塞状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>&#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br><span class="line">or</span><br><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>等待状态：调用了wait()方法，线程进入等待时间。而且会释放当前的锁，需要唤醒才能重新进入就绪状态(notify() or notifyAll())，等待CPU调度</p>
<p>超时等待状态：在调用sleep(time)之后进入超时等待状态，在time时间内过后会再次运行，并且在等待的过程中并不会释放锁。使用不当可能会造成事故</p>
<p>终止状态：线程正常执行完毕(run()方法执行完)或者主线程的main()方法执行完毕，线程进入终止状态</p>
<p>注意：</p>
<p>wait()和notify()/notifyAll()需要在synchronized代码块内使用</p>
<p>notify()/notifyAll()是随机唤醒</p>
<p>await()和signal()/signalAll()需要在lock内执行</p>
<p>signal()可以做到精确唤醒</p>
<h1 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h1><h2 id="继承Thread类，重写run-方法"><a href="#继承Thread类，重写run-方法" class="headerlink" title="继承Thread类，重写run()方法"></a>继承Thread类，重写run()方法</h2><p>因为Thread的构造参数是要求传入Runnable类型，所以可以传入继承了Thread的类，因为Thread就已经实现Runnable接口，只要自定义的类再去重写run()方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"thread run by extends Thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> CreateThread1());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h2><p>也可以传入一个实现了Runnable接口的类，重写完run()方法之后便可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Thread run by implements Runnable"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> CreateThread2());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Runnable接口匿名内部类</p>
<p>更加直接的就是直接使用匿名内部类，有比较传统的写法和jdk1.8之后的lambda写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateThread3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread run by inner class"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//lambda写法</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt; System.out.println(<span class="string">"Thread run by inner class"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="如何正确开始线程"><a href="#如何正确开始线程" class="headerlink" title="如何正确开始线程"></a>如何正确开始线程</h1><p>在上面的线程的创建看出来，线程运行了，会去执行run方法。那么看一下下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = ()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">main</span><br><span class="line">Thread-<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>从输出结果可以看出来，直接调用run方法，那只是属于方法调用。调用start方法，才是开始一个线程。当然来调用了start方式并不是意味着线程就会直接运行，而是等待CPU的调度。注意：thread不能调用两次start方法，不然会报错。因为调用了start方法之后，会检查线程的状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// start方法的第一行代码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">       * This method is not invoked for the main method thread or "system"</span></span><br><span class="line"><span class="comment">       * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">       * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * A zero status value corresponds to state "NEW".</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br></pre></td></tr></table></figure>

<h1 id="正确停止线程"><a href="#正确停止线程" class="headerlink" title="正确停止线程"></a>正确停止线程</h1><p>原理介绍：使用interrupt来通知，而不是强制。</p>
<p>普通情况下停止线程：run方法内没有sleep或wait方法时，停止线程。下面可以通过调整<code>Thread.sleep(2000)</code>，看控制台输出就可以看得出否是我们做出的停止。因为在调用<code>interrupt()</code>之后，控制台打印的数确实是少了，被我们中断成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightWayStopThreadWithoutSleep</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted() &amp;&amp; num &lt;= Integer.MAX_VALUE / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num % <span class="number">10000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(num + <span class="string">"是10000的倍数"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"任务运行结束了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RightWayStopThreadWithoutSleep());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>run方法中有sleep，会出现异常：<code>java.lang.InterruptedException: sleep interrupted</code>，很明显是在线程休眠过程中，被中断就会抛出异常，这样我们就可以在<code>catch</code>代码块中中断线程，再去处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (num &lt;= <span class="number">300</span> &amp;&amp; !Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (num % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(num + <span class="string">"是100的倍数"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">0</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">100</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">200</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">300</span>是<span class="number">100</span>的倍数</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at com.msr.Main.lambda$main$<span class="number">0</span>(Main.java:<span class="number">20</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>



<p>在每次的迭代中都调用sleep方法，并不需要每次都去try/catch，直接try/catch整个迭代。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (num &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (num % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(num + <span class="string">"是100的倍数"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    num++;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">0</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">100</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">200</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">300</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">400</span>是<span class="number">100</span>的倍数</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at com.msr.Main.lambda$main$<span class="number">0</span>(Main.java:<span class="number">19</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure>

<p>与上面的情况相反，每次迭代都去try/catch，sleep方法抛出的异常。从输出结果中可以看出，虽然抛出异常，但是线程依然在继续执行并没有被停止。原因是在抛出了<code>InterruptedException</code>异常之后，中断标志位就会被重置，所以while内的try/catch，并没有中断线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (num &lt;= <span class="number">10000</span> &amp;&amp; !Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(num + <span class="string">"是100的倍数"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">0</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">100</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">200</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">300</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">400</span>是<span class="number">100</span>的倍数</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at com.msr.Main.lambda$main$<span class="number">0</span>(Main.java:<span class="number">19</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"><span class="number">500</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">600</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">700</span>是<span class="number">100</span>的倍数</span><br><span class="line"><span class="number">800</span>是<span class="number">100</span>的倍数</span><br><span class="line"></span><br><span class="line">Process finished with exit code -<span class="number">1</span></span><br></pre></td></tr></table></figure>



<p>解决方法：</p>
<ol>
<li>catch了<code>InterruptedExcetion</code>之后的优先选择：在方法签名中抛出异常，那么在run()就会强制try/catch</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"go"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用方法执行业务</span></span><br><span class="line">                throwInMethod();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">                <span class="comment">//保存日志、停止程序</span></span><br><span class="line">                System.out.println(<span class="string">"保存日志"</span>);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  该方法是被调用的，是较低层次的方法，不应该自己try/catch处理异常，应该抛出异常让调用者处理</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwInMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Main());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">go</span><br><span class="line">保存日志</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at com.msr.Main.throwInMethod(Main.java:<span class="number">31</span>)</span><br><span class="line">	at com.msr.Main.run(Main.java:<span class="number">16</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>2.当不想或无法传递中断的时候：恢复中断，在catch子语句中调用<code>Thread.currentThread().interrupt()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"go"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Interrupted，程序运行结束"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            reInterrupt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自己处理中断</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 如果不调用，中断信息就会被独吞，上层调用者就会无法感知</span></span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Main());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">go</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">	at java.lang.Thread.sleep(Native Method)</span><br><span class="line">	at com.msr.Main.reInterrupt(Main.java:<span class="number">24</span>)</span><br><span class="line">	at com.msr.Main.run(Main.java:<span class="number">18</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Interrupted，程序运行结束</span><br></pre></td></tr></table></figure>

<h1 id="Thread和Object类中的重要方法"><a href="#Thread和Object类中的重要方法" class="headerlink" title="Thread和Object类中的重要方法"></a>Thread和Object类中的重要方法</h1><table>
<thead>
<tr>
<th>类</th>
<th>方法名</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>Thread</td>
<td>sleep</td>
<td>线程休眠，不释放锁</td>
</tr>
<tr>
<td></td>
<td>join</td>
<td>等待其他线程执行完毕</td>
</tr>
<tr>
<td></td>
<td>yield</td>
<td>放弃已经获取到的CPU资源</td>
</tr>
<tr>
<td></td>
<td>currentThread</td>
<td>获取当前执行线程的引用</td>
</tr>
<tr>
<td></td>
<td>start，run</td>
<td>启动线程相关</td>
</tr>
<tr>
<td></td>
<td>interrupt</td>
<td>中断线程</td>
</tr>
<tr>
<td></td>
<td>stop()，suspend()，resuem()</td>
<td>已废弃</td>
</tr>
<tr>
<td>Object</td>
<td>wait()/notify/notifyAll()</td>
<td>让线程暂时休息和唤醒</td>
</tr>
</tbody></table>
<h2 id="wait，notify，notifyAll函数"><a href="#wait，notify，notifyAll函数" class="headerlink" title="wait，notify，notifyAll函数"></a>wait，notify，notifyAll函数</h2><p>当一个线程调用一个共享变量的<code>wait()</code>方法时，该调用线程会被阻塞挂起来，直至发生一下的事情之一：</p>
<ul>
<li>其他线程调用该共享对象的<code>notify()</code>或者<code>notifyAll()</code>方法；</li>
<li>其他线程调用该线程的<code>interrupt()</code>方法，该线程抛出<code>InterruptedException</code>异常返回。</li>
</ul>
<p>如果调用<code>wait()</code>方法的线程没有事先获取该对象的监视器锁，则调用<code>wait()</code>方法时调用线程会抛出<code>IllegalMonitorStateException</code>异常。</p>
<p>如果一个线程可以从挂起状态变为可以运行的状态（也就是被唤醒），即时该线程没有被其他线程调用<code>notify()</code>、<code>notifyAll()</code>方法进行通知，或者中断，或者等待超时，这就是虚假唤醒。虽然虚假唤醒在应用实践中很少发生，但是防范于未然，做法就是不停地区测试该线程被唤醒的条件是否满足，不满足则继续等待，也就是说在一个循环中调用wait()方法进行防范。退出的条件是满足唤醒该形成的条件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(object)&#123;</span><br><span class="line">    <span class="keyword">while</span>(条件不满足)&#123;</span><br><span class="line">		object.wait();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预防虚假唤醒的用法就是最经典的生产者和消费者例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventStorage eventStorage = <span class="keyword">new</span> EventStorage();</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(eventStorage);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(eventStorage);</span><br><span class="line">        <span class="keyword">new</span> Thread(producer).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(consumer).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventStorage storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            EventStorage storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            storage.put();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventStorage storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(EventStorage storage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.storage = storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            storage.take();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventStorage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Date&gt; storage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventStorage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        maxSize = <span class="number">10</span>;</span><br><span class="line">        storage = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (storage.size() == maxSize) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        storage.add(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(<span class="string">"仓库里有了"</span> + storage.size() + <span class="string">"个产品。"</span>);</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (storage.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"拿到了"</span> + storage.poll() + <span class="string">"，现在仓库还剩下"</span> + storage.size());</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">仓库里有了<span class="number">1</span>个产品。</span><br><span class="line">仓库里有了<span class="number">2</span>个产品。</span><br><span class="line">仓库里有了<span class="number">3</span>个产品。</span><br><span class="line">仓库里有了<span class="number">4</span>个产品。</span><br><span class="line">仓库里有了<span class="number">5</span>个产品。</span><br><span class="line">仓库里有了<span class="number">6</span>个产品。</span><br><span class="line">仓库里有了<span class="number">7</span>个产品。</span><br><span class="line">仓库里有了<span class="number">8</span>个产品。</span><br><span class="line">仓库里有了<span class="number">9</span>个产品。</span><br><span class="line">仓库里有了<span class="number">10</span>个产品。</span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">9</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">8</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">7</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">6</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">5</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">4</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">3</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">2</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">1</span></span><br><span class="line">拿到了Tue Nov <span class="number">24</span> <span class="number">19</span>:<span class="number">52</span>:<span class="number">33</span> SGT <span class="number">2020</span>，现在仓库还剩下<span class="number">0</span></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>在如上代码中假如生产者线程A首先通过synchronized 获取到了queue上的锁，那么后续所有企图生产元素的线程和消费线程将会在获取该监视器锁的地方被阻塞挂起。线程A获取锁后发现当前队列己满会调用queue.wait()方法阻塞自己，然后释放获取的queue上的锁，这里考虑下为何要释放该锁？如果不释放，由于其他生产者线程和所有消费者线 程都己经被阻塞挂起，而线程A也被挂起，这就处于了死锁状态。这里线程A 挂起自己后释放共享变量上的锁，就是为了打破死锁必要条件之一的持有并等待原则。关于死锁后面的章节会讲。线程A释放锁后，其他生产者线程和所有消费者线程中会有一个线程获 取queue上的锁进而进入同步块，这就打破了死锁状态。</p>
<p>使用synchronized 实现线程交替执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + count++);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"ThreadA"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + count++);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"ThreadB"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建2个线程</span></span><br><span class="line">    <span class="comment">//1个只处理偶数，第二个只处理奇数（用位运算）</span></span><br><span class="line">    <span class="comment">//用synchronized来通信</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + count++);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"偶数"</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (count &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((count &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                            System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + count++);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"奇数"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">ThreadA:<span class="number">0</span></span><br><span class="line">ThreadB:<span class="number">1</span></span><br><span class="line">ThreadA:<span class="number">2</span></span><br><span class="line">ThreadB:<span class="number">3</span></span><br><span class="line">ThreadA:<span class="number">4</span></span><br><span class="line">ThreadB:<span class="number">5</span></span><br><span class="line">ThreadA:<span class="number">6</span></span><br><span class="line">ThreadB:<span class="number">7</span></span><br><span class="line">ThreadA:<span class="number">8</span></span><br><span class="line">ThreadB:<span class="number">9</span></span><br><span class="line">ThreadA:<span class="number">10</span></span><br><span class="line">ThreadB:<span class="number">11</span></span><br><span class="line">ThreadA:<span class="number">12</span></span><br><span class="line">ThreadB:<span class="number">13</span></span><br><span class="line">ThreadA:<span class="number">14</span></span><br><span class="line">ThreadB:<span class="number">15</span></span><br><span class="line">ThreadA:<span class="number">16</span></span><br><span class="line">ThreadB:<span class="number">17</span></span><br><span class="line">ThreadA:<span class="number">18</span></span><br><span class="line">ThreadB:<span class="number">19</span></span><br><span class="line">ThreadA:<span class="number">20</span></span><br><span class="line">ThreadB:<span class="number">21</span></span><br><span class="line">ThreadA:<span class="number">22</span></span><br><span class="line">ThreadB:<span class="number">23</span></span><br><span class="line">ThreadA:<span class="number">24</span></span><br><span class="line">ThreadB:<span class="number">25</span></span><br><span class="line">ThreadA:<span class="number">26</span></span><br><span class="line">ThreadB:<span class="number">27</span></span><br><span class="line">ThreadA:<span class="number">28</span></span><br><span class="line">ThreadB:<span class="number">29</span></span><br><span class="line">ThreadA:<span class="number">30</span></span><br><span class="line">ThreadB:<span class="number">31</span></span><br><span class="line">ThreadA:<span class="number">32</span></span><br><span class="line">ThreadB:<span class="number">33</span></span><br><span class="line">ThreadA:<span class="number">34</span></span><br><span class="line">ThreadB:<span class="number">35</span></span><br><span class="line">ThreadA:<span class="number">36</span></span><br><span class="line">ThreadB:<span class="number">37</span></span><br><span class="line">ThreadA:<span class="number">38</span></span><br><span class="line">ThreadB:<span class="number">39</span></span><br><span class="line">ThreadA:<span class="number">40</span></span><br><span class="line">ThreadB:<span class="number">41</span></span><br><span class="line">ThreadA:<span class="number">42</span></span><br><span class="line">ThreadB:<span class="number">43</span></span><br><span class="line">ThreadA:<span class="number">44</span></span><br><span class="line">ThreadB:<span class="number">45</span></span><br><span class="line">ThreadA:<span class="number">46</span></span><br><span class="line">ThreadB:<span class="number">47</span></span><br><span class="line">ThreadA:<span class="number">48</span></span><br><span class="line">ThreadB:<span class="number">49</span></span><br><span class="line">ThreadA:<span class="number">50</span></span><br><span class="line">ThreadB:<span class="number">51</span></span><br><span class="line">ThreadA:<span class="number">52</span></span><br><span class="line">ThreadB:<span class="number">53</span></span><br><span class="line">ThreadA:<span class="number">54</span></span><br><span class="line">ThreadB:<span class="number">55</span></span><br><span class="line">ThreadA:<span class="number">56</span></span><br><span class="line">ThreadB:<span class="number">57</span></span><br><span class="line">ThreadA:<span class="number">58</span></span><br><span class="line">ThreadB:<span class="number">59</span></span><br><span class="line">ThreadA:<span class="number">60</span></span><br><span class="line">ThreadB:<span class="number">61</span></span><br><span class="line">ThreadA:<span class="number">62</span></span><br><span class="line">ThreadB:<span class="number">63</span></span><br><span class="line">ThreadA:<span class="number">64</span></span><br><span class="line">ThreadB:<span class="number">65</span></span><br><span class="line">ThreadA:<span class="number">66</span></span><br><span class="line">ThreadB:<span class="number">67</span></span><br><span class="line">ThreadA:<span class="number">68</span></span><br><span class="line">ThreadB:<span class="number">69</span></span><br><span class="line">ThreadA:<span class="number">70</span></span><br><span class="line">ThreadB:<span class="number">71</span></span><br><span class="line">ThreadA:<span class="number">72</span></span><br><span class="line">ThreadB:<span class="number">73</span></span><br><span class="line">ThreadA:<span class="number">74</span></span><br><span class="line">ThreadB:<span class="number">75</span></span><br><span class="line">ThreadA:<span class="number">76</span></span><br><span class="line">ThreadB:<span class="number">77</span></span><br><span class="line">ThreadA:<span class="number">78</span></span><br><span class="line">ThreadB:<span class="number">79</span></span><br><span class="line">ThreadA:<span class="number">80</span></span><br><span class="line">ThreadB:<span class="number">81</span></span><br><span class="line">ThreadA:<span class="number">82</span></span><br><span class="line">ThreadB:<span class="number">83</span></span><br><span class="line">ThreadA:<span class="number">84</span></span><br><span class="line">ThreadB:<span class="number">85</span></span><br><span class="line">ThreadA:<span class="number">86</span></span><br><span class="line">ThreadB:<span class="number">87</span></span><br><span class="line">ThreadA:<span class="number">88</span></span><br><span class="line">ThreadB:<span class="number">89</span></span><br><span class="line">ThreadA:<span class="number">90</span></span><br><span class="line">ThreadB:<span class="number">91</span></span><br><span class="line">ThreadA:<span class="number">92</span></span><br><span class="line">ThreadB:<span class="number">93</span></span><br><span class="line">ThreadA:<span class="number">94</span></span><br><span class="line">ThreadB:<span class="number">95</span></span><br><span class="line">ThreadA:<span class="number">96</span></span><br><span class="line">ThreadB:<span class="number">97</span></span><br><span class="line">ThreadA:<span class="number">98</span></span><br><span class="line">ThreadB:<span class="number">99</span></span><br><span class="line">ThreadA:<span class="number">100</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h1 id="线程的各个属性"><a href="#线程的各个属性" class="headerlink" title="线程的各个属性"></a>线程的各个属性</h1><table>
<thead>
<tr>
<th>属性名称</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>编号（ID）</td>
<td>每个线程有自己的ID，用于标识不同的线程</td>
</tr>
<tr>
<td>名称（Name）</td>
<td>让用户或开发者在开发、调试或运行过程中，更容易区分每个不同的线程、定位问题等。</td>
</tr>
<tr>
<td>是否是守护线程（isDaemon）</td>
<td>true代表该线程是【守护线程】，false代表【非守护线程】也就是用户线程</td>
</tr>
<tr>
<td>优先级（Priority）</td>
<td>优先级这个属性的目的是告诉线程调度器，用户希望哪些线程相对多运行、哪些少运行</td>
</tr>
</tbody></table>
<h1 id="未捕获异常如何处理"><a href="#未捕获异常如何处理" class="headerlink" title="未捕获异常如何处理"></a>未捕获异常如何处理</h1><p>1.主线程可以轻松发现异常，子线程却不行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Main()).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">Exception in thread <span class="string">"Thread-0"</span> java.lang.RuntimeException</span><br><span class="line">	at com.msr.study.concurrent.disruptor.Application.run(Application.java:<span class="number">19</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>以上的程序运行之后，虽然子线程抛出了，异常信息。但主线程丝毫不受影响。因为子线程的异常无法用传统方法捕获，即无法通过try/catch进行处理。可以看一下下面的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-1"</span>).start();</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-2"</span>).start();</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-3"</span>).start();</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-4"</span>).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" Caught Exception."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" Caught Exception."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">MyThread-<span class="number">1</span> Caught Exception.</span><br><span class="line">MyThread-<span class="number">2</span> Caught Exception.</span><br><span class="line">MyThread-<span class="number">3</span> Caught Exception.</span><br><span class="line">MyThread-<span class="number">4</span> Caught Exception.</span><br></pre></td></tr></table></figure>

<p>第一个是如上面的代码那样，在每一个的run方法中都用try/catch进行处理，但是这会很麻烦。第二个方法也是最推荐的方法。利用<code>UncaughtExceptionHandler</code>。看下面的示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyUncaughtExceptionHandler</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        Logger logger = Logger.getAnonymousLogger();</span><br><span class="line">        logger.log(Level.WARNING, <span class="string">"线程异常终止"</span> + t.getName());</span><br><span class="line">        System.out.println(name + <span class="string">"捕获了异常"</span> + t.getName() + <span class="string">"异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler(<span class="string">"捕获器1"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-1"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-2"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-3"</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Application(), <span class="string">"MyThread-4"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">十一月 <span class="number">25</span>, <span class="number">2020</span> <span class="number">9</span>:<span class="number">03</span>:<span class="number">00</span> 下午 com.msr.study.concurrent.MyUncaughtExceptionHandler uncaughtException</span><br><span class="line">警告: 线程异常终止MyThread-<span class="number">1</span></span><br><span class="line">捕获器<span class="number">1</span>捕获了异常MyThread-<span class="number">1</span>异常</span><br><span class="line">十一月 <span class="number">25</span>, <span class="number">2020</span> <span class="number">9</span>:<span class="number">03</span>:<span class="number">01</span> 下午 com.msr.study.concurrent.MyUncaughtExceptionHandler uncaughtException</span><br><span class="line">警告: 线程异常终止MyThread-<span class="number">2</span></span><br><span class="line">捕获器<span class="number">1</span>捕获了异常MyThread-<span class="number">2</span>异常</span><br><span class="line">十一月 <span class="number">25</span>, <span class="number">2020</span> <span class="number">9</span>:<span class="number">03</span>:<span class="number">01</span> 下午 com.msr.study.concurrent.MyUncaughtExceptionHandler uncaughtException</span><br><span class="line">警告: 线程异常终止MyThread-<span class="number">3</span></span><br><span class="line">捕获器<span class="number">1</span>捕获了异常MyThread-<span class="number">3</span>异常</span><br><span class="line">捕获器<span class="number">1</span>捕获了异常MyThread-<span class="number">4</span>异常</span><br><span class="line">十一月 <span class="number">25</span>, <span class="number">2020</span> <span class="number">9</span>:<span class="number">03</span>:<span class="number">01</span> 下午 com.msr.study.concurrent.MyUncaughtExceptionHandler uncaughtException</span><br><span class="line">警告: 线程异常终止MyThread-<span class="number">4</span></span><br></pre></td></tr></table></figure>

<h1 id="多线程会导致的问题"><a href="#多线程会导致的问题" class="headerlink" title="多线程会导致的问题"></a>多线程会导致的问题</h1><p>本文不讲解<code>JUC</code>的用法。</p>
<h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><p>什么是线程安全问题？</p>
<p>《Java Concurrency In Practice》：当一个线程访问一个对象时，如果不用考虑这些线程在运行环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那么这个对象就是线程安全的。</p>
<p>通俗的解释：不管业务中遇到怎样的多个线程访问对象或某些方法的情况，而在编写业务逻辑的时候，都不需要额外的处理，程序也可以正常运行，不会因为多线程而出错，就可以称之为线程安全。</p>
<p>造成线程安全问题：</p>
<p>1.数据争用：数据书写由于同时写，会造成错误数据</p>
<p>2.竞争条件：即使不是同时写造成的错误数据，由于顺序原因依然会造成错误，例如在写入之前读取</p>
<p>运行结果错误</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Application application = <span class="keyword">new</span> Application();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(application);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(application);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">177</span></span><br></pre></td></tr></table></figure>

<p>运行多次发现每次的记过都不一样。会出现少加的情况。那是因为<code>i++</code>并不是原子操作，<code>i++</code>在多线程下，出现小时的请求现象，属于<code>read-modify-write</code>。所以很明显出现问题的时<code>i++</code>。</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最懒得方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Application application = <span class="keyword">new</span> Application();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(application);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(application);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最推荐常用：volatile+原子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Application application = <span class="keyword">new</span> Application();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(application);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(application);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            increment();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>死锁问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String lockA = <span class="string">"lockA"</span>;</span><br><span class="line">        String lockB = <span class="string">"lockB"</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldThread(lockA, lockB), <span class="string">"threadA"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldThread(lockB, lockA), <span class="string">"threadB"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String source1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String source2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoldThread</span><span class="params">(String source1, String source2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source1 = source1;</span><br><span class="line">        <span class="keyword">this</span>.source2 = source2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (source1) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t 持有锁"</span> + source1 + <span class="string">"尝试获得"</span> + source2);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (source2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t 持有锁"</span> + source2 + <span class="string">"尝试获得"</span> + source1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">threadA	 持有锁lockA尝试获得lockB</span><br><span class="line">threadB	 持有锁lockB尝试获得lockA</span><br></pre></td></tr></table></figure>

<p>最后程序会卡着不动，使用<code>jstack</code>命令查看，很明显出现了死锁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstack 12000</span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;threadB&quot;:</span><br><span class="line">  waiting to lock monitor 0x000000001c700c88 (object 0x000000076b6dc760, a java.lang.String),</span><br><span class="line">  which is held by &quot;threadA&quot;</span><br><span class="line">&quot;threadA&quot;:</span><br><span class="line">  waiting to lock monitor 0x000000001c703678 (object 0x000000076b6dc798, a java.lang.String),</span><br><span class="line">  which is held by &quot;threadB&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&quot;threadB&quot;:</span><br><span class="line">        at com.msr.study.concurrent.deadlock.HoldThread.run(ThreadDeadLock.java:42)</span><br><span class="line">        - waiting to lock &lt;0x000000076b6dc760&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000076b6dc798&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">&quot;threadA&quot;:</span><br><span class="line">        at com.msr.study.concurrent.deadlock.HoldThread.run(ThreadDeadLock.java:42)</span><br><span class="line">        - waiting to lock &lt;0x000000076b6dc798&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000076b6dc760&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure>



<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><p>调度：上下文切换</p>
<p>上下文：保存线程执行现场</p>
<p>缓存开销：缓存失效</p>
<p>关于JUC请看<a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p>
]]></content>
      <categories>
        <category>并发编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>【java并发编程】线程带来的安全风险问题</title>
    <url>/posts/java-concurrent-programing/2020/06/202006011815.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="活跃性问题"><a href="#活跃性问题" class="headerlink" title="活跃性问题"></a>活跃性问题</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/thread-dead-lock.png" alt="thread-dead-lock"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDeadLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String lockA = <span class="string">"lockA"</span>;</span><br><span class="line">        String lockB = <span class="string">"lockB"</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldThread(lockA, lockB), <span class="string">"threadA"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> HoldThread(lockB, lockA), <span class="string">"threadB"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoldThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String source1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String source2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HoldThread</span><span class="params">(String source1, String source2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.source1 = source1;</span><br><span class="line">        <span class="keyword">this</span>.source2 = source2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (source1) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"\t 持有锁"</span> + source1 + <span class="string">"尝试获得"</span> + source2);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (source2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"\t 持有锁"</span> + source2 + <span class="string">"尝试获得"</span> + source1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：控制台会一挂着，因为发生死锁，无法正常结束</span></span><br><span class="line">threadA	 持有锁lockA尝试获得lockB</span><br><span class="line">threadB	 持有锁lockB尝试获得lockA</span><br></pre></td></tr></table></figure>

<p>死锁的定位：1、jps命令定位进程编号 2、jstack找到死锁查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Java\projects\java-concurrent-programing&gt;jps</span><br><span class="line">15108 Jps</span><br><span class="line">2932</span><br><span class="line">728 ThreadDeadLock</span><br><span class="line">6364 RemoteMavenServer36</span><br><span class="line">9708 Launcher</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E:\Java\projects\java-concurrent-programing&gt;jstack 728</span><br><span class="line">2020-06-02 10:08:10</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.131-b11 mixed mode):</span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">"threadB"</span>:</span><br><span class="line">  waiting to lock monitor 0x000000001cea0c88 (object 0x000000076b699a98, a java.lang.String),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">"threadA"</span></span><br><span class="line"><span class="string">"threadA"</span>:</span><br><span class="line">  waiting to lock monitor 0x000000001cea3308 (object 0x000000076b699ad0, a java.lang.String),</span><br><span class="line">  <span class="built_in">which</span> is held by <span class="string">"threadB"</span></span><br><span class="line"></span><br><span class="line">Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">"threadB"</span>:</span><br><span class="line">        at com.msr.study.concurrent.deadlock.HoldThread.run(ThreadDeadLock.java:42)</span><br><span class="line">        - waiting to lock &lt;0x000000076b699a98&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000076b699ad0&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"><span class="string">"threadA"</span>:</span><br><span class="line">        at com.msr.study.concurrent.deadlock.HoldThread.run(ThreadDeadLock.java:42)</span><br><span class="line">        - waiting to lock &lt;0x000000076b699ad0&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000076b699a98&gt; (a java.lang.String)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure>

<p>jstack之后得到程序的栈信息，有很多内容。很明显可以看到<code>Found one Java-level deadlock:</code>发现一个死锁。</p>
<p>threadB：</p>
<p><code>- waiting to lock &lt;0x000000076b699a98&gt; (a java.lang.String)</code></p>
<p><code>- locked &lt;0x000000076b699ad0&gt; (a java.lang.String)</code></p>
<p>threadA：</p>
<p><code>-waiting to lock &lt;0x000000076b699ad0&gt; (a java.lang.String)</code></p>
<p><code>- locked &lt;0x000000076b699a98&gt; (a java.lang.String)</code></p>
<h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><p>如果线程优先级“不均”，并且CPU繁忙的情况下，优先级低的线程得到执行的机会很小，就可能发生线程“饥饿”；持有锁的线程，如果执行的时间过长，也可能导致“饥饿”问题。饥饿嘛，线程一直得不到CPU时间，一直被饿着。</p>
<p>所以在使用多线程的时候，要合理设置优先级。使用公平锁来取代synchronized，因为synchronized是非公平锁。</p>
<h3 id="活锁"><a href="#活锁" class="headerlink" title="活锁"></a>活锁</h3><p>活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试—失败—尝试—失败的过程。处于活锁的实体是在不断的改变状态，活锁有可能自行解开。</p>
<p>活锁一般是由于对死锁的不正确处理引起的。由于处于死锁中的多个线程同时采取了行动。 而避免的方法也是只让一个线程释放资源。</p>
<h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><ul>
<li>消耗时间：线程的创建和销毁都需要时间，当有大量的线程创建和销毁时，那么这些时间的消耗则比较明显，将导致性能上的缺失</li>
<li>消耗CPU和内存：如果发生大量的线程被创建、执行和销毁，这可是非常耗CPU和内存的，这样将直接影响系统的吞吐量，导致性能急剧下降，如果内存资源占用的比较多，还很可能造成OOM</li>
<li>容易导致GC频繁的执行：大量的线程的创建和销毁很容易导致GC频繁的执行，从而发生内存抖动现象，而发生了内存抖动，对于移动端来说，最大的影响就是造成界面卡顿</li>
<li>线程的上下文切换：在线程调度过程中需要访问由操作系统和JVM共享的数据结构。应用程序、操作系统以及JVM都使用一组相同的CPU，在JVM和操作系统的代码中消耗越多的CPU时钟周期，应用程序的可用CPU时钟周期就越来越少。当一个新的线程被切换进来时，它所需要的数据可能不在当前处理器的本地缓存中，因此上下文切换将导致一些缓存缺失，因而线程在首次调度运行时会更加缓慢。</li>
</ul>
<h2 id="线程安全性问题"><a href="#线程安全性问题" class="headerlink" title="线程安全性问题"></a>线程安全性问题</h2><p>线程安全问题可能是我们开发人员关注最多的点。那就以现在说一下的买票的例子吧！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.concurrent.threadsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUnsafe</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" sale a ticket,current:"</span> + ticketNum--);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：其中多个线程出现了卖出同一场票，同时剩余28</span></span><br><span class="line">Thread-<span class="number">9</span> sale a ticket,current:<span class="number">28</span></span><br><span class="line">Thread-<span class="number">8</span> sale a ticket,current:<span class="number">28</span></span><br><span class="line">Thread-<span class="number">1</span> sale a ticket,current:<span class="number">28</span></span><br><span class="line">Thread-<span class="number">2</span> sale a ticket,current:<span class="number">29</span></span><br><span class="line">Thread-<span class="number">4</span> sale a ticket,current:<span class="number">28</span></span><br></pre></td></tr></table></figure>

<p>从字节码的角度看：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Compiled from &quot;ThreadUnsafe.java&quot;</span><br><span class="line">class com.msr.study.concurrent.threadsafe.Ticket implements java.lang.Runnable &#123;</span><br><span class="line">  com.msr.study.concurrent.threadsafe.Ticket();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">       4: return</span><br><span class="line"></span><br><span class="line">  public void run();</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #2                  &#x2F;&#x2F; Field ticketNum:I</span><br><span class="line">       3: ifle          68</span><br><span class="line">       6: getstatic     #3                  &#x2F;&#x2F; Field java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.MILLISECONDS:Ljava&#x2F;util&#x2F;concurrent&#x2F;TimeUnit;</span><br><span class="line">       9: ldc2_w        #4                  &#x2F;&#x2F; long 100l</span><br><span class="line">      12: invokevirtual #6                  &#x2F;&#x2F; Method java&#x2F;util&#x2F;concurrent&#x2F;TimeUnit.sleep:(J)V</span><br><span class="line">      15: goto          23</span><br><span class="line">      18: astore_1</span><br><span class="line">      19: aload_1</span><br><span class="line">      20: invokevirtual #8                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;InterruptedException.printStackTrace:()V</span><br><span class="line">      23: getstatic     #9                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">      26: new           #10                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;StringBuilder</span><br><span class="line">      29: dup</span><br><span class="line">      30: invokespecial #11                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">      33: invokestatic  #12                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.currentThread:()Ljava&#x2F;lang&#x2F;Thread;</span><br><span class="line">      36: invokevirtual #13                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Thread.getName:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      39: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      42: ldc           #15                 &#x2F;&#x2F; String  sale a ticket,current:</span><br><span class="line">      44: invokevirtual #14                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      47: getstatic     #2                  &#x2F;&#x2F; Field ticketNum:I</span><br><span class="line">      50: dup</span><br><span class="line">      51: iconst_1</span><br><span class="line">      52: isub</span><br><span class="line">      53: putstatic     #2                  &#x2F;&#x2F; Field ticketNum:I</span><br><span class="line">      56: invokevirtual #16                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.append:(I)Ljava&#x2F;lang&#x2F;StringBuilder;</span><br><span class="line">      59: invokevirtual #17                 &#x2F;&#x2F; Method java&#x2F;lang&#x2F;StringBuilder.toString:()Ljava&#x2F;lang&#x2F;String;</span><br><span class="line">      62: invokevirtual #18                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span><br><span class="line">      65: goto          0</span><br><span class="line">      68: return</span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target type</span><br><span class="line">           6    15    18   Class java&#x2F;lang&#x2F;InterruptedException</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    Code:</span><br><span class="line">       0: bipush        50</span><br><span class="line">       2: putstatic     #2                  &#x2F;&#x2F; Field ticketNum:I</span><br><span class="line">       5: return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内容虽然很多但是其中可以只关注下面两行：<code>isub:</code>ticketNum进行减一操作，<code>putstatic:</code>把减一之后的值重新赋值给ticketNum。这两个操作时<code>ticketNum--</code>产生，说明<code>ticketNum--</code>不是原子操作，原子不可再分。<code>tickNum--</code>是可以分为：减一，赋值两个操作，所以这种i–或i++这些都是非原子操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">47: getstatic     #2                  &#x2F;&#x2F; Field ticketNum:I</span><br><span class="line">50: dup</span><br><span class="line">51: iconst_1</span><br><span class="line">52: isub</span><br><span class="line">53: putstatic     #2</span><br></pre></td></tr></table></figure>

<p>既然时非原子操作，那么在多线程中又如何产生线程安全问题，如下图所示。有点稍微涉及了一下JMM，在后面讲到volatile会详细讲解。其解决方案，最简单的就是synchronized去解决。线程安全的问题会在后面详细讲解</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/thread-unsafe.png" alt="thread-unsafe"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>多线程的使用会带来一系列的问题，如果盲目使用多线程而不注意这些问题，可能会带来严重的生产事故。</p>
]]></content>
      <categories>
        <category>并发编程</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>高并发</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之策略模式</title>
    <url>/posts/design-patterns/2020/05/202005311442.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>TODO</p>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>TODO</p>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>TODO</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之简单工厂模式</title>
    <url>/posts/design-patterns/2020/05/202005311442.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>TODO</p>
<p>TODO</p>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>TODO</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之委派模式</title>
    <url>/posts/design-patterns/2020/05/202005291815.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、What-is-the-delegate-pattern？"><a href="#1、What-is-the-delegate-pattern？" class="headerlink" title="1、What is the delegate pattern？"></a>1、What is the delegate pattern？</h2><p>​        委派模式不是Gof23中的设计模式，但是它能精简程序的逻辑，提高代码的可读性，消除大量的if/esle或switch语句。委派模式就是负责任务的调度和分配。大名鼎鼎的SpringMVC中的<code>DispatcherServlet</code>就是使用到了委派模式。从下图可以看得出来，DispatchServlert把查找Handler、执行Handler、解析视图等工作分配给其他组件去做。在Spring中由Delegate字眼的类都是使用了委派模式，顾名思义嘛~</p>
<p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/blog/SpringMVC-basic-process.png" alt="springmvc-delegate"></p>
<h2 id="2、代码实现委派模式"><a href="#2、代码实现委派模式" class="headerlink" title="2、代码实现委派模式"></a>2、代码实现委派模式</h2><p>下面使用委派模式：通过Leader分配任务给其他人。新建业务接口<code>IExecutor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.patterns.behavioral.delegate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IExecutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始工作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doJob</span><span class="params">(String command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务接口<code>IExecutor</code>的实现类<code>JavaEngineer</code>、<code>FrontendEngineer</code>、<code>OpsEngineer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.patterns.behavioral.delegate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaEngineer</span> <span class="keyword">implements</span> <span class="title">IExecutor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doJob</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Java工程师开始工作: "</span> + command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.study.patterns.behavioral.delegate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontendEngineer</span> <span class="keyword">implements</span> <span class="title">IExecutor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doJob</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前端工程师开始工作："</span>+command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.msr.study.patterns.behavioral.delegate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpsEngineer</span> <span class="keyword">implements</span> <span class="title">IExecutor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doJob</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"运维工程师开始工作："</span> + command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>新建个枚举类，标识不同的业务类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.msr.study.patterns.behavioral.delegate;</span><br><span class="line">public enum CommandEnum &#123;</span><br><span class="line">    JAVA,FRONTEND,OPS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Leader</code>类负责分派任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.study.patterns.behavioral.delegate;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> <span class="keyword">implements</span> <span class="title">IExecutor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IExecutor&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map.put(CommandEnum.JAVA.name(),<span class="keyword">new</span> JavaEngineer());</span><br><span class="line">        map.put(CommandEnum.FRONTEND.name(),<span class="keyword">new</span> FrontendEngineer());</span><br><span class="line">        map.put(CommandEnum.OPS.name(),<span class="keyword">new</span> OpsEngineer());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doJob</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        map.get(command).doJob(command);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">package</span> com.msr.study.patterns.behavioral.delegate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//看上去好像都是leader在工作，其实是leader委派给了其他人去工作</span></span><br><span class="line">        Leader leader = <span class="keyword">new</span> Leader();</span><br><span class="line">        leader.doJob(CommandEnum.JAVA.name());</span><br><span class="line">        leader.doJob(CommandEnum.OPS.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Java工程师开始工作: JAVA</span><br><span class="line">运维工程师开始工作：OPS</span><br></pre></td></tr></table></figure>

<h2 id="3、Spring中委派模式的使用"><a href="#3、Spring中委派模式的使用" class="headerlink" title="3、Spring中委派模式的使用"></a>3、Spring中委派模式的使用</h2><p>​        前面说到过Spring中委派模式使用的类是以Delegate结尾的，在开发工具中搜索一下Delegate。虽然<code>DispatcherServlet</code>不是delegate结尾，不过还是由应用委派模式。<code>DispatcherServlert</code>中的<code>doService()</code>方法中是调用了<code>doDispatch()</code>方法去查找Handler，执行handle()方法处理用户请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">                Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    processedRequest = <span class="keyword">this</span>.checkMultipart(request);</span><br><span class="line">                    multipartRequestParsed = processedRequest != request;</span><br><span class="line">                    mappedHandler = <span class="keyword">this</span>.getHandler(processedRequest);</span><br><span class="line">                    <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">					<span class="comment">//找到HandlerAdapter</span></span><br><span class="line">                    HandlerAdapter ha = <span class="keyword">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                    String method = request.getMethod();</span><br><span class="line">                    <span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">                    <span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">                        <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                            <span class="keyword">this</span>.logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> ((<span class="keyword">new</span> ServletWebRequest(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//委派url对应Handler去处理请求</span></span><br><span class="line">                        mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">this</span>.applyDefaultViewName(request, mv);</span><br><span class="line">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var27) &#123;</span><br><span class="line">                    dispatchException = var27;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var28) &#123;</span><br><span class="line">                <span class="keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var28);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Error var29) &#123;</span><br><span class="line">                <span class="keyword">this</span>.triggerAfterCompletionWithError(processedRequest, response, mappedHandler, var29);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
