<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maiBlog</title>
  
  <subtitle>maishuren blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maishuren.top/"/>
  <updated>2020-12-24T14:00:44.367Z</updated>
  <id>https://www.maishuren.top/</id>
  
  <author>
    <name>maishuren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>One algorithm a day(两数之和)</title>
    <link href="https://www.maishuren.top/posts/datastructure/2020/12/202012241456.html"/>
    <id>https://www.maishuren.top/posts/datastructure/2020/12/202012241456.html</id>
    <published>2020-12-24T06:56:33.000Z</published>
    <updated>2020-12-24T14:00:44.367Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="题目：两数之和"><a href="#题目：两数之和" class="headerlink" title="题目：两数之和"></a>题目：两数之和</h1><p><strong>问题描述：</strong></p><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设<strong>每种输入只会对应一个答案</strong>。但是，数组中<strong>同一个元素不能使用两遍</strong>。</p><p><strong>难度：</strong>简单</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 测试</span></span><br><span class="line">        Topic001 topic001 = <span class="keyword">new</span> Topic001();</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] result = topic001.toSum(nums, <span class="number">9</span>);</span><br><span class="line">        System.out.println(Arrays.toString(result));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] toSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> key = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;map.get(key), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路：图解"><a href="#思路：图解" class="headerlink" title="思路：图解"></a>思路：图解</h1><p>用一个HashMap存储数据，key是数组的元素，value是该元素在数组中的索引。因为要用到数据里的元素去比较，成功还要返回对应的索引。所以数组元素以及索引都要存起来并且对应起来，hash操作又是常数操作，所以对数组元素求hash很快。所以使用HashMap。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/topic1.jpg" alt="图解topic1"></p>]]></content>
    
    <summary type="html">
    
      leetcode算法题库第一道题
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="leetcode" scheme="https://www.maishuren.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>自动装箱/拆箱可能导致NPE</title>
    <link href="https://www.maishuren.top/posts/bug-log/2020/12/202012071023.html"/>
    <id>https://www.maishuren.top/posts/bug-log/2020/12/202012071023.html</id>
    <published>2020-12-07T02:23:16.000Z</published>
    <updated>2020-12-07T14:57:35.435Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自动装箱-拆箱可能导致NPE"><a href="#自动装箱-拆箱可能导致NPE" class="headerlink" title="自动装箱/拆箱可能导致NPE"></a>自动装箱/拆箱可能导致NPE</h1><p>在一次使用redisTemplate去操作的时候，发现IDEA提示<code>UnBoxing of &#39;redisTemplate.hasKey(key)&#39; may produce &#39;NullPointerException&#39;</code>，意思是说自动拆箱可能会引发空指针异常。</p><p>因为<code>hasKey</code>这个方法是返回Boolan类型，而方法的返回值是boolean，直接把Boolean的值返回，就会发生自动拆箱。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/record/record1.png" alt=""></p><h1 id="自动装箱与自动拆箱"><a href="#自动装箱与自动拆箱" class="headerlink" title="自动装箱与自动拆箱"></a>自动装箱与自动拆箱</h1><p>基本数据类型的自动装箱(autoboxing)、拆箱(unboxing)是自J2SE 5.0开始提供的功能。 一般我们要创建一个类的对象实例的时候，我们会这样： Class a = new Class(parameters); 当我们创建一个Integer对象时，却可以这样： Integer i = 100;(注意：和 int i = 100;是有区别的 ) 实际上，执行上面那句代码的时候，系统为我们执行了： Integer i = Integer.valueOf(100)。<code>Integer i = 100</code>这就是一个自动装箱。</p><h1 id="出现空指针的情况"><a href="#出现空指针的情况" class="headerlink" title="出现空指针的情况"></a>出现空指针的情况</h1><ol><li>包装器类型赋值给基本类型时，自动拆箱下出现的空指针</li><li>当把基本类型作为方法的参数类型，但是方法调用者传参使用的却是包装器类型，所以出现了自动拆箱的情况，此时包装器类型如果传的是NULL，方法中就很有可能出现NULL指针异常</li></ol><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Map&lt;String, Boolean&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">map.put(<span class="string">"key1"</span>, <span class="keyword">true</span>);</span><br><span class="line">map.put(<span class="string">"key2"</span>, <span class="keyword">false</span>);</span><br><span class="line">map.put(<span class="string">"key3"</span>, <span class="keyword">false</span>);</span><br><span class="line">Boolean b = ( map != <span class="keyword">null</span> ? map.get(<span class="string">"key"</span>) : <span class="keyword">false</span>);</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">执行结果：</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><p><code>map</code>不为空，当<code>get()</code>之后<code>key</code>不存在，<code>Boolean</code>类型的b被赋了空值。再看回<code>redisTemplate.hasKey(key)</code>的操作可能会产生空值，然后拆箱返回，因为这是一个工具类里的方法，调用者可能会直接调用，这时候就有了空指针异常的风险，影响了程序的健壮性了。</p><p>使用javap.exe反编译之后，查看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public static void main(java.lang.String[]);</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #2                  &#x2F;&#x2F; class java&#x2F;util&#x2F;HashMap</span><br><span class="line">       3: dup</span><br><span class="line">       4: bipush        16</span><br><span class="line">       6: invokespecial #3                  &#x2F;&#x2F; Method java&#x2F;util&#x2F;HashMap.&quot;&lt;init&gt;&quot;:(I)V</span><br><span class="line">       9: astore_1</span><br><span class="line">      10: aload_1</span><br><span class="line">      11: ldc           #4                  &#x2F;&#x2F; String key1</span><br><span class="line">      13: iconst_1</span><br><span class="line">      14: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      17: invokeinterface #6,  3            &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.put:(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      22: pop</span><br><span class="line">      23: aload_1</span><br><span class="line">      24: ldc           #7                  &#x2F;&#x2F; String key2</span><br><span class="line">      26: iconst_0</span><br><span class="line">      27: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      30: invokeinterface #6,  3            &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.put:(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      35: pop</span><br><span class="line">      36: aload_1</span><br><span class="line">      37: ldc           #8                  &#x2F;&#x2F; String key3</span><br><span class="line">      39: iconst_0</span><br><span class="line">      40: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      43: invokeinterface #6,  3            &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.put:(Ljava&#x2F;lang&#x2F;Object;Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      48: pop</span><br><span class="line">      49: aload_1</span><br><span class="line">      50: ifnull        67</span><br><span class="line">      53: aload_1</span><br><span class="line">      54: ldc           #9                  &#x2F;&#x2F; String key</span><br><span class="line">      56: invokeinterface #10,  2           &#x2F;&#x2F; InterfaceMethod java&#x2F;util&#x2F;Map.get:(Ljava&#x2F;lang&#x2F;Object;)Ljava&#x2F;lang&#x2F;Object;</span><br><span class="line">      61: checkcast     #11                 &#x2F;&#x2F; class java&#x2F;lang&#x2F;Boolean</span><br><span class="line">      64: goto          71</span><br><span class="line">      67: iconst_0</span><br><span class="line">      68: invokestatic  #5                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Boolean.valueOf:(Z)Ljava&#x2F;lang&#x2F;Boolean;</span><br><span class="line">      71: astore_2</span><br><span class="line">      72: getstatic     #12                 &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span><br><span class="line">      75: aload_2</span><br><span class="line">      76: invokevirtual #13                 &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;Object;)V</span><br><span class="line">      79: return</span><br></pre></td></tr></table></figure><p>从反编译的结果可以看到<code>Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;</code>出现了四次，三次是<code>map.put()</code>的时候，最后一次是：<code>Boolean b = ( map != null ? map.get(&quot;key&quot;) : false);</code>可以看出<code>Boolean</code>类型自动装箱<code>valueOf()</code>。如果一个<code>Boolean</code>引用为空时，在自动拆箱就是一个空值。这就会发生NPE</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b ? TRUE : FALSE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>包装器类型和基本数据类型都可以的业务场景下，优先考虑使用基本类型</li><li>对于不确定的包装器类型，一定要对NULL情况做检验和判断</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="踩坑日志" scheme="https://www.maishuren.top/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>六大设计原则解读</title>
    <link href="https://www.maishuren.top/posts/design-patterns/2020/09/202009051442.html"/>
    <id>https://www.maishuren.top/posts/design-patterns/2020/09/202009051442.html</id>
    <published>2020-09-05T06:42:31.000Z</published>
    <updated>2020-09-08T15:22:51.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>​        单一职责原则的英文名称是Single Responsibility Principle，简称是SRP。这个原则存在争议之处在哪里呢？就是对职责的定义，什么是类的职责，以及怎么划分类的职责。可以举个例子来说明一下单一职责原则。</p><p>​        我想很多人都应该基于RBAC模型做过一些用户和角色管理的一些模块。RBAC模型（Role-Based Access Control，基于角色的访问控制，通过分配和取消角色来完成用户权限的授予和取消，使动作主体（用户）与资源的行为（权限）分离），确实是一个很好的解决办法。这里要讲的是用户管理、修改用户的信息、增加机构（一个人属于多个机构）、增加角色等，用户有这么多的信息和行为要维护，那么就把这些写到一个接口中，都是用户管理类嘛，这样先来看它的类图：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/1.png" alt=""></p><p>​        设计这一个类对于大多数的初级程序员来说并不是难事。但是认真一看，就会发现有问题。这个类的属性和行为并没有分离开来。相信做过Java Web开发的朋友都是这样做的：将一个类所拥有的属性封装成一个BO(Business Object，业务对象)，然后再把对于这个类的操作(即行为)也独立封装成Biz(Business Logic，业务逻辑)。如下图所示：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/2.png" alt=""></p><p>​        重新拆封成两个接口，IUserBO负责用户的属性，简单地说，IUserBO的职责就是收集和反馈用户的属性信息；IUserBiz负责用户的行为，完成用户信息的维护和变更。</p><p>​        好了属性和行为分离开来了，但是这个和实际工作中用到的User类好像有差别的呀！现在先来看一看分拆成两个接口怎么使用。现在都是面向接口编程嘛，所以产生了这个UserInfo对象之后，当然可以把它当IUserBO接口使用。也可以当IUserBiz接口使用，这要看你在什么地方使用了。要获得用户信息，就当是IUserBO的实现类；要是希望维护用户的信息，就把它当作IUserBiz的实现类就成了，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IUserInfo userinfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line"></span><br><span class="line">IUserBO userBo = (IUserBo)userInfo;</span><br><span class="line"></span><br><span class="line">IUserBiz userBiz = (IUserBiz)userInfo;</span><br><span class="line">userBiz.deleteUser();</span><br></pre></td></tr></table></figure><p>​        其实，在实际的使用中，我们更倾向于使用两个不同的类或接口：一个是IUserBO，一个是IUserBiz，类图下所示：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/3.png" alt=""></p><p>​        上面把一个接口拆分成两个接口的动作，就是依赖了单一职责原则，那什么是单一职责原则呢？单一职责原则的定义是：应该有且仅有一个原因引起类的变更。</p><p>​        下面再举一个例子，电话通话的时候有4个过程发生：拨号、通话、回应、挂机。那么就来写一个电话接口。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/4.png" alt=""></p><p>​        代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhone</span> </span>&#123;</span><br><span class="line"><span class="comment">//拨通电话</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dial</span><span class="params">(String phoneNumber)</span></span>;</span><br><span class="line"><span class="comment">//通话</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chat</span><span class="params">(Object o)</span></span>;</span><br><span class="line"><span class="comment">//通话完毕，挂电话</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        单一职责原则要求一个接口或类只有一个原因引起变化，也就是一个接口或类只有一个职责，它就负责一件事情，看看上面的接口只负责一件事情吗？是只有一个原因引起变化吗？好像不是！</p><p>​        <code>IPhone</code>这个接口可不是只有一个职责，它包含了两个职责：一个是协议管理，一个是数据传送。<code>dial()</code>和<code>hangup()</code>两个方法实现的是协议管理，分别负责拨号接通和挂机；<code>chat()</code>实现的是数据的传送，把我们说的话转换成模拟信号或数字信号传递到对方，然后再把对方传递过来的信号还原成我们听得懂的语言。这里有两个原因都引起了类的变化，这样就发现<code>IPhone</code>这个接口其实是包含了两个职责，而且这两个职责的变化不互相影响，因为电话拨号成功了之后，并不关心传输的是什么数据。这样就可以考虑把<code>IPhone</code>接口再拆分成两个接口。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/5.png" alt=""></p><p>​        这样的设计就变得完美的，一个类实现了两个接口，把两个职责融合在一个类中。你会觉得这个Phone有两个原因引起变化了呀，是的，但是别忘记了我们是面向接口编程，我们对外公布的是接口而不是实现类。而且，如果真要实现类的单一职责，这个就使用上面的组合模式了，这会引起类间耦合过重、类的数量增加等问题，人为地增加了设计的复杂性。</p><p>​        单一职责原则有什么好处：</p><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义；</li><li>可读性提高，复杂性降低，那当然可读性提高了；</li><li>可维护性提高，可读性提高，那当然更容易维护了；</li><li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li></ul><p>​       其实单一职责原则最男划分的就是职责。一个职责一个接口，但问题是“职责”没有一个量化的标准，一个类到底要负责那些职责？这些职责该怎么细化？细化后是否都要有一个接口或类？这些都需要从实际的项目去考虑，从功能上来说，定义一个IPhone接口也没有错，实现了电话的功能，而且设计还很简单，仅仅一个接口一个实现类。可是一个接口有两个可以变化的原因，这就为以后的变化带来了风险。</p><p>​        <strong>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。</strong>生硬照搬单一职责原则会一起类的剧增，这就会给维护带来很多的麻烦，过细的划分职责，也会人为地增加了系统的复杂性。总之一句话，原则是死的，人是活的，原则要灵活使用。</p><p>​    <strong>对于单一职责原则，接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</strong></p><h1 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h1><p>在面向对象的语言中，继承是必不可少的、非常优秀的语言机制，它有如下优点：</p><ul><li>代码共享，减少创建类的工作量，每个子类都拥有父类的方法和属性；</li><li>提高代码的重用性；</li><li>子类可以形似父类，但又异于父类，“龙生龙，凤生凤，老鼠生来会打洞”是说子拥有父的“种”，“世界上没有两片完全相同的叶子”是指明子与父的不同；</li><li>提高代码的可扩展性，实现父类的方法就可以“为所欲为”了，君不见很多开源框架的扩展接口都是通过继承父类来完成的；</li><li>提高产品或项目的开放性。自然界的所有事物都是优点和缺点并存的，即使是鸡蛋，有时候也能挑出骨头来，继承的缺点如下：</li><li>继承是侵入性的。只要继承，就必须拥有父类的所有属性和方法；</li><li>降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束；</li><li>增强了耦合性。当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大段的代码需要重构。</li></ul><p>​        Java使用extends关键字来实现继承，它采用了单一继承的规则，从整体上来看，利大于弊，怎么才能让“利”的因素发挥最大的作用，同时减少“弊”带来的麻烦呢？解决方案是引入里氏替换原则（Liskov Substitution Principle，LSP），什么是里氏替换原则呢？它有两种定义：</p><ul><li>第一种定义，也是最正宗的定义：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型。</li><li>第二种定义：所有引用基类的地方必须能透明地使用其子类的对象。</li></ul><p>​        第二个定义是最清晰明确的，通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应。</p><h2 id="里氏替换原则的四层含义"><a href="#里氏替换原则的四层含义" class="headerlink" title="里氏替换原则的四层含义"></a>里氏替换原则的四层含义</h2><h3 id="子类必须完全实现父类的方法"><a href="#子类必须完全实现父类的方法" class="headerlink" title="子类必须完全实现父类的方法"></a>子类必须完全实现父类的方法</h3><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/6.png" alt=""></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/7.png" alt=""></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/8.png" alt=""></p><h3 id="子类可以有自己的个性"><a href="#子类可以有自己的个性" class="headerlink" title="子类可以有自己的个性"></a>子类可以有自己的个性</h3><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/principle/9.png" alt=""></p><h3 id="覆盖或实现父类的方法时输入参数可以被放大"><a href="#覆盖或实现父类的方法时输入参数可以被放大" class="headerlink" title="覆盖或实现父类的方法时输入参数可以被放大"></a>覆盖或实现父类的方法时输入参数可以被放大</h3><h3 id="覆写或实现父类的方法时输出结果可以被缩小"><a href="#覆写或实现父类的方法时输出结果可以被缩小" class="headerlink" title="覆写或实现父类的方法时输出结果可以被缩小"></a>覆写或实现父类的方法时输出结果可以被缩小</h3>]]></content>
    
    <summary type="html">
    
      大旗不挥，谁敢冲锋。要学设计，先知原则！
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.maishuren.top/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面试必备" scheme="https://www.maishuren.top/tags/%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/"/>
    
      <category term="内功心法" scheme="https://www.maishuren.top/tags/%E5%86%85%E5%8A%9F%E5%BF%83%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring IoC容器概述</title>
    <link href="https://www.maishuren.top/posts/%E5%90%8E%E7%AB%AF/2020/09/202009051038.html"/>
    <id>https://www.maishuren.top/posts/%E5%90%8E%E7%AB%AF/2020/09/202009051038.html</id>
    <published>2020-09-05T02:38:52.000Z</published>
    <updated>2020-09-05T02:42:53.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="spring" scheme="https://www.maishuren.top/tags/spring/"/>
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://www.maishuren.top/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/2020/09/202009012140.html"/>
    <id>https://www.maishuren.top/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/2020/09/202009012140.html</id>
    <published>2020-09-01T13:40:01.000Z</published>
    <updated>2020-09-01T13:41:41.860Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="计算机发展简史"><a href="#计算机发展简史" class="headerlink" title="计算机发展简史"></a>计算机发展简史</h1><h2 id="计算机发展的四个阶段"><a href="#计算机发展的四个阶段" class="headerlink" title="计算机发展的四个阶段"></a>计算机发展的四个阶段</h2><h2 id="微型计算机的发展历史"><a href="#微型计算机的发展历史" class="headerlink" title="微型计算机的发展历史"></a>微型计算机的发展历史</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="计算机基础" scheme="https://www.maishuren.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机组成原理" scheme="https://www.maishuren.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>go应用开发框架：beego</title>
    <link href="https://www.maishuren.top/posts/post/2020/08/202008222257.html"/>
    <id>https://www.maishuren.top/posts/post/2020/08/202008222257.html</id>
    <published>2020-08-22T14:57:45.000Z</published>
    <updated>2020-09-06T10:20:36.252Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com&#x2F;astaxie&#x2F;beego      &#x2F;&#x2F;下载beego框架</span><br><span class="line">$ go get -u github.com&#x2F;beego&#x2F;bee          &#x2F;&#x2F;下载bee工具</span><br></pre></td></tr></table></figure><p>bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。</p><p>如果在下载过程中发现很慢，那应该是GOPROXY使用的默认值，下载速度会很慢。可以设置使用以下加速的代理：</p><p><strong>国内七牛云代理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env -w GO111MODULE&#x3D;on</span><br><span class="line">$ go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure><hr><p><strong>全球CDN加速</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE&#x3D;on</span><br><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct</span><br></pre></td></tr></table></figure><p>选择一个就行，下载速度的问题就解决了。当下载完之后，bee的bee.exe便会生成在go的bin目录下和beego框架的源码就被下载到设置了的POPATH执行的目录。如果GOPATH和go的src目录不一致，就把下载好的复制到go的src目录，编写程序时就可以引用了。</p><h1 id="bee工具的命令"><a href="#bee工具的命令" class="headerlink" title="bee工具的命令"></a>bee工具的命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ bee help</span><br><span class="line">Bee is a Fast and Flexible tool for managing your Beego Web Application.</span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line">    bee command [arguments]</span><br><span class="line"></span><br><span class="line">AVAILABLE COMMANDS</span><br><span class="line"></span><br><span class="line">    version     Prints the current Bee version</span><br><span class="line">    migrate     Runs database migrations</span><br><span class="line">    api         Creates a Beego API application</span><br><span class="line">    bale        Transforms non-Go files to Go source files</span><br><span class="line">    fix         Fixes your application by making it compatible with newer versions of Beego</span><br><span class="line">    dlv         Start a debugging session using Delve</span><br><span class="line">    dockerize   Generates a Dockerfile for your Beego application</span><br><span class="line">    generate    Source code generator</span><br><span class="line">    hprose      Creates an RPC application based on Hprose and Beego frameworks</span><br><span class="line">    new         Creates a Beego application</span><br><span class="line">    pack        Compresses a Beego application into a single file</span><br><span class="line">    rs          Run customized scripts</span><br><span class="line">    run         Run the application by starting a local development server</span><br><span class="line">    server      serving static content over HTTP on port</span><br><span class="line"></span><br><span class="line">Use bee help [command] for more information about a command.</span><br><span class="line"></span><br><span class="line">ADDITIONAL HELP TOPICS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use bee help [topic] for more information about that topic.</span><br><span class="line">bee: Too many arguments.</span><br><span class="line">Use bee help for more information.</span><br></pre></td></tr></table></figure><h2 id="bee-new创建项目"><a href="#bee-new创建项目" class="headerlink" title="bee new创建项目"></a>bee new创建项目</h2><p>使用bee工具创建一个web项目，bee new是新建一个web项目。后面接的是想要命名的项目名称。E:\Go\go_project是我自己电脑的GOPATH路径。可见bee新建的项目是存放在GOPATH目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ bee new beedemo</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_&#x2F; &#x2F;  ___   ___</span><br><span class="line">| ___ \ &#x2F; _ \ &#x2F; _ \</span><br><span class="line">| |_&#x2F; &#x2F;|  __&#x2F;|  __&#x2F;</span><br><span class="line">\____&#x2F;  \___| \___| v1.10.0</span><br><span class="line">2020&#x2F;08&#x2F;22 22:50:04 INFO     ▶ 0001 Creating application...</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\conf\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\controllers\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\models\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\routers\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\tests\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\js\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\css\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\img\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\views\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\conf\app.conf</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\controllers\default.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\views\index.tpl</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\routers\router.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\tests\default_test.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\main.go</span><br><span class="line">2020&#x2F;08&#x2F;22 22:50:04 SUCCESS  ▶ 0002 New application successfully created!</span><br></pre></td></tr></table></figure><p>bee新建的web项目的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">beedemo</span><br><span class="line">├── conf        &#x2F;&#x2F;存放配置文件</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers &#x2F;&#x2F;存放控制器</span><br><span class="line">│   └── default.go</span><br><span class="line">├── main.go    &#x2F;&#x2F;程序入口</span><br><span class="line">├── models     &#x2F;&#x2F;存放模型，即与数据库表关联的数据模型</span><br><span class="line">├── routers    &#x2F;&#x2F;存放路由，通过编写程序将请求路径路由到对应的控制器下的方法就行处理</span><br><span class="line">│   └── router.go</span><br><span class="line">├── static     &#x2F;&#x2F;存放静态文件，如css文件,图片,js文件</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">├── tests      &#x2F;&#x2F;测试</span><br><span class="line">│   └── default_test.go</span><br><span class="line">└── views      &#x2F;&#x2F;视图模板</span><br><span class="line">    └── index.tpl</span><br></pre></td></tr></table></figure><h2 id="bee-run运行项目"><a href="#bee-run运行项目" class="headerlink" title="bee run运行项目"></a>bee run运行项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">E:\Go\go_project\src\beedemo&gt;bee run</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_&#x2F; &#x2F;  ___   ___</span><br><span class="line">| ___ \ &#x2F; _ \ &#x2F; _ \</span><br><span class="line">| |_&#x2F; &#x2F;|  __&#x2F;|  __&#x2F;</span><br><span class="line">\____&#x2F;  \___| \___| v1.10.0</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:09 INFO     ▶ 0001 Using &#39;beedemo&#39; as &#39;appname&#39;</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:09 INFO     ▶ 0002 Initializing watcher...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 SUCCESS  ▶ 0003 Built Successfully!</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 INFO     ▶ 0004 Restarting &#39;beedemo.exe&#39;...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 SUCCESS  ▶ 0005 &#39;.&#x2F;beedemo.exe&#39; is running...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12.494 [I] [asm_amd64.s:1357]  http server Running on http:&#x2F;&#x2F;:8080</span><br></pre></td></tr></table></figure><p>然后再去访问<a href="http://localhost:8080。就可以看到beego的欢迎页了。">http://localhost:8080。就可以看到beego的欢迎页了。</a></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/beego-welcome.jpg" alt=""></p><p>如果报错：missing dot in first path element。在项目下执行：go mod init。再去运行项目</p><h1 id="beego快速入门"><a href="#beego快速入门" class="headerlink" title="beego快速入门"></a>beego快速入门</h1><h2 id="项目路由设置"><a href="#项目路由设置" class="headerlink" title="项目路由设置"></a>项目路由设置</h2><p>main.go是整个项目的入口，那么就从main.go开始看</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"beedemo/routers"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数是入口函数，go的执行流程又如下图所示：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/init.png" alt=""></p><p>在通过bee生成的<code>main.go</code>文件中，导入了<code>routers</code>包，在<code>routers</code>包下有一个<code>router.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"beedemo/controllers"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init()</code>函数中注册了一个路由：<code>/</code>。路由包里面我们看到执行了路由注册 <code>beego.Router</code>, 这个函数的功能是映射 URL 到 controller，第一个参数是 URL (用户请求的地址)，这里我们注册的是 <code>/</code>，也就是我们访问的不带任何参数的 URL，第二个参数是对应的 Controller，也就是我们即将把请求分发到那个控制器来执行相应的逻辑，我们可以执行类似的方式注册如下路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/index"</span>,&amp;controller.IndexController&#123;&#125;)</span><br></pre></td></tr></table></figure><p>这样用户就可以通过访问 <code>/index</code> 去执行 <code>IndexController</code> 的逻辑。这就是我们所谓的路由，后面会介绍更多更复杂的路由规则。</p><p>再回来看看 main 函数里面的 <code>beego.Run</code>， <code>beego.Run</code> 执行之后，我们看到的效果好像只是监听服务端口这个过程，但是它内部做了很多事情：</p><ul><li><p>解析配置文件</p><p>beego 会自动解析在 conf 目录下面的配置文件 <code>app.conf</code>，通过修改配置文件相关的属性，我们可以定义：开启的端口，是否开启 session，应用名称等信息。</p></li><li><p>执行用户的 hookfunc</p><p>beego 会执行用户注册的 hookfunc，默认的已经存在了注册 mime，用户可以通过函数 <code>AddAPPStartHook</code> 注册自己的启动函数。</p></li><li><p>是否开启 session</p><p>会根据上面配置文件的分析之后判断是否开启 session，如果开启的话就初始化全局的 session。</p></li><li><p>是否编译模板</p><p>beego 会在启动的时候根据配置把 views 目录下的所有模板进行预编译，然后存在 map 里面，这样可以有效的提高模板运行的效率，无需进行多次编译。</p></li><li><p>是否开启文档功能</p><p>根据 EnableDocs 配置判断是否开启内置的文档路由功能</p></li><li><p>是否启动管理模块</p><p>beego 目前做了一个很酷的模块，应用内监控模块，会在 8088 端口做一个内部监听，我们可以通过这个端口查询到 QPS、CPU、内存、GC、goroutine、thread 等统计信息。</p></li><li><p>监听服务端口</p><p>这是最后一步也就是我们看到的访问 8080 看到的网页端口，内部其实调用了 <code>ListenAndServe</code>，充分利用了 goroutine 的优势</p></li></ul><p>一旦 run 起来之后，我们的服务就监听在两个端口了，一个服务端口 8080 作为对外服务，另一个 8088 端口实行对内监控。</p><p>通过这个代码的分析我们了解了 beego 运行起来的过程，以及内部的一些机制。接下来让我们去剥离 Controller 如何来处理逻辑的。</p><h2 id="controller控制器执行逻辑"><a href="#controller控制器执行逻辑" class="headerlink" title="controller控制器执行逻辑"></a>controller控制器执行逻辑</h2><p>在<code>router.go</code>中又引入了<code>controllers</code>包，下面有一个<code>default.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.Data[<span class="string">"Website"</span>] = <span class="string">"beego.me"</span></span><br><span class="line">c.Data[<span class="string">"Email"</span>] = <span class="string">"astaxie@gmail.com"</span></span><br><span class="line">c.TplName = <span class="string">"index.tpl"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码显示首先声明了一个控制器 <code>MainController</code>，这个控制器里面内嵌了 <code>beego.Controller</code>，这就是 Go 的嵌入方式，也就是 <code>MainController</code> 自动拥有了所有 <code>beego.Controller</code> 的方法。</p><p>而 <code>beego.Controller</code> 拥有很多方法，其中包括 <code>Init</code>、<code>Prepare</code>、<code>Post</code>、<code>Get</code>、<code>Delete</code>、<code>Head</code> 等方法。也可以通过重写的方式来实现这些方法，上面的代码就是重写了 <code>Get</code> 方法。</p><p>beego 是一个 RESTful 的框架，所以的请求默认是执行对应 <code>req.Method</code> 的方法。例如浏览器的是 <code>GET</code> 请求，那么默认就会执行 <code>MainController</code> 下的 <code>Get</code> 方法。这样上面的 Get 方法就会被执行到，这样就进入了逻辑处理。（后续将介绍自定义路由规则）里面的代码是需要执行的逻辑，这里只是简单的输出数据，可以通过各种方式获取数据，然后赋值到 <code>this.Data</code> 中，这是一个用来存储输出数据的 map，可以赋值任意类型的值，这里只是简单举例输出两个字符串。</p><p>最后一个就是需要去渲染的模板，<code>this.TplName</code> 就是需要渲染的模板，这里指定了 <code>index.tpl</code>，如果用户不设置该参数，那么默认会去到模板目录的 <code>Controller/&lt;方法名&gt;.tpl</code> 查找，例如上面的方法会去 <code>maincontroller/get.tpl</code> <strong>(文件、文件夹必须小写。beego框架规定的)</strong>。</p><p>用户设置了模板之后系统会自动的调用 <code>Render</code> 函数（这个函数是在 beego.Controller 中实现的），所以无需用户自己来调用渲染。</p><p>当然也可以不使用模版，直接用 <code>this.Ctx.WriteString</code> 输出字符串，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">this.Ctx.WriteString(<span class="string">"hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此控制器分析基本完成了，接下来看一看如何来编写 model。</p><h2 id="model分析"><a href="#model分析" class="headerlink" title="model分析"></a>model分析</h2><p>Web 应用中用的最多的就是数据库操作，而 model 层一般用来做这些操作， <code>bee new</code> 例子不存在 Model 的演示，但是 <code>bee api</code> 应用中存在 model 的应用。其实如果一个应用足够简单，那么 Controller 可以处理一切的逻辑，如果逻辑里面存在着可以复用的东西，那么就抽取出来变成一个模块。因此 Model 就是逐步抽象的过程，一般会在 Model 里面处理一些数据读取，如下是一个日志分析应用中的代码片段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"loggo/utils"</span></span><br><span class="line">    <span class="string">"path/filepath"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    NotPV []<span class="keyword">string</span> = []<span class="keyword">string</span>&#123;<span class="string">"css"</span>, <span class="string">"js"</span>, <span class="string">"class"</span>, <span class="string">"gif"</span>, <span class="string">"jpg"</span>, <span class="string">"jpeg"</span>, <span class="string">"png"</span>, <span class="string">"bmp"</span>, <span class="string">"ico"</span>, <span class="string">"rss"</span>, <span class="string">"xml"</span>, <span class="string">"swf"</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> big = <span class="number">0xFFFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LogPV</span><span class="params">(urls <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    ext := filepath.Ext(urls)</span><br><span class="line">    <span class="keyword">if</span> ext == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> NotPV &#123;</span><br><span class="line">        <span class="keyword">if</span> v == strings.ToLower(ext) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以应用足够简单，那么就不需要 Model 了；如果模块开始多了，需要复用，需要逻辑分离了，那么 Model 是必不可少的。接下来分析如何编写 View 层的东西。</p><h2 id="View层的编写"><a href="#View层的编写" class="headerlink" title="View层的编写"></a>View层的编写</h2><p>在前面编写 Controller 的时候，在MainController中的 Get方法 里面写过这样的语句 <code>this.TplName = &quot;index.tpl&quot;</code>，设置显示的模板文件，默认支持 <code>tpl</code> 和 <code>html</code> 的后缀名，如果想设置其他后缀可以调用 <code>beego.AddTemplateExt</code> 接口设置，那么模板如何来显示相应的数据呢？beego 采用了 Go 语言默认的模板引擎，所以和 Go 的模板语法一样，Go 模板的详细使用方法请参考<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/07.4.md" target="_blank" rel="noopener">《Go Web 编程》模板使用指南</a></p><p>在快速入门中beegodemo中创建的index.tpl里面的代码（<strong>去掉了 css 样式</strong>）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Beego<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"hero-unit"</span> <span class="attr">style</span>=<span class="string">"background-color:#A9F16C"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hero-text"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to Beego!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"description"</span>&gt;</span></span><br><span class="line">                            Beego is a simple &amp; powerful Go web framework which is inspired by tornado and sinatra.</span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                            Official website: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://&#123;&#123;.Website&#125;&#125;"</span>&gt;</span>&#123;&#123;.Website&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">                            Contact me: &#123;&#123;.Email&#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 Controller 里面把数据赋值给了 data（map 类型），然后我们在模板中就直接通过 key 访问 <code>.Website</code> 和 <code>.Email</code> 。这样就做到了数据的输出。接下来讲解如何让静态文件输出。</p><h2 id="静态文件处理"><a href="#静态文件处理" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><p>前面介绍了如何输出静态页面，但是一个网页往往包含了很多的静态文件，包括图片、JS、CSS 等，bee工具创建的应用里面就创建了如下目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── static</span><br><span class="line">    │   ├── css</span><br><span class="line">    │   ├── img</span><br><span class="line">    │   └── js</span><br></pre></td></tr></table></figure><p>beego 默认注册了 static 目录为静态处理的目录，注册样式：URL 前缀和映射的目录（在/main.go文件中beego.Run()之前加入）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StaticDir[&quot;&#x2F;static&quot;] &#x3D; &quot;static&quot;</span><br></pre></td></tr></table></figure><p>用户可以设置多个静态文件处理目录，例如你有多个文件下载目录 download1、download2，你可以这样映射（在 /main.go 文件中 beego.Run() 之前加入）。</p><p>例如：在static文件夹下新建download1和download2文件夹，并分别在这两个文件夹下创建文件123.txt和345.txt。里面的内容分别是”123”和345，在代码中注册静态文件夹和匹配的路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"beedemo/routers"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.SetStaticPath(<span class="string">"/down1"</span>,<span class="string">"static/download1"</span>)</span><br><span class="line">beego.SetStaticPath(<span class="string">"/down2"</span>,<span class="string">"static/download2"</span>)</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样访问 URL <code>http://localhost:8080/down1/123.txt</code> 则会请求 download1 目录下的 123.txt 文件。在浏览器上就会显示文件里面的内容。</p><h1 id="beego的MVC架构设计"><a href="#beego的MVC架构设计" class="headerlink" title="beego的MVC架构设计"></a>beego的MVC架构设计</h1><h2 id="执行逻辑图"><a href="#执行逻辑图" class="headerlink" title="执行逻辑图"></a>执行逻辑图</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/detail.png" alt=""></p><h2 id="执行流程分析"><a href="#执行流程分析" class="headerlink" title="执行流程分析"></a>执行流程分析</h2><ol><li>在监听的端口接收数据，默认监听在 8080 端口。</li><li>用户请求到达 8080 端口之后进入 beego 的处理逻辑。</li><li>初始化 Context 对象，根据请求判断是否为 WebSocket 请求，如果是的话设置 Input，同时判断请求的方法是否在标准请求方法中（GET、POST、PUT、DELETE、PATCH、OPTIONS、HEAD），防止用户的恶意伪造请求攻击造成不必要的影响。</li><li>执行 BeforeRouter 过滤器，当然在 beego 里面有开关设置。如果用户设置了过滤器，那么该开关打开，这样可以提高在没有开启过滤器的情况下提高执行效率。如果在执行过滤器过程中，responseWriter已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li><li>开始执行静态文件的处理，查看用户的请求 URL 是否和注册在静态文件处理 StaticDir 中的 prefix 是否匹配。如果匹配的话，采用 <code>http</code> 包中默认的 ServeFile 来处理静态文件。</li><li>如果不是静态文件开始初始化 session 模块(如果开启 session 的话)，这个里面大家需要注意，如果你的 BeforeRouter 过滤器用到了 session 就会报错，你应该把它加入到 AfterStatic 过滤器中。</li><li>开始执行 AfterStatic 过滤器，如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li><li>执行过过滤器之后，开始从固定的路由规则中查找和请求 URL 相匹配的对象。这个匹配是全匹配规则，即如果用户请求的 URL 是 <code>/hello/world</code>，那么固定规则中 <code>/hello</code> 是不会匹配的，只有完全匹配才算匹配。如果匹配的话就进入逻辑执行，如果不匹配进入下一环节的正则匹配。</li><li>正则匹配是进行正则的全匹配，这个正则是按照用户添加 beego 路由顺序来进行匹配的，也就是说，如果你在添加路由的时候你的顺序影响你的匹配。和固定匹配一样，如果匹配的话就进行逻辑执行，如果不匹配进入 Auto 匹配。</li><li>如果用户注册了 AutoRouter，那么会通过 <code>controller/method</code> 这样的方式去查找对应的 Controller 和他内置的方法，如果找到就开始执行逻辑，如果找不到就跳转到监控判断。</li><li>如果找到 Controller 的话，那么就开始执行逻辑，首先执行 BeforeExec 过滤器，如果在执行过滤器过程中，responseWriter 已经有数据输出了，那么就提前结束该请求，直接跳转到监控判断。</li><li>Controller 开始执行 Init 函数，初始化基本的一些信息，这个函数一般都是 beego.Controller 的初始化，不建议用户继承的时候修改该函数。</li><li>是否开启了 XSRF，开启的话就调用 Controller 的 XsrfToken，然后如果是 POST 请求就调用 CheckXsrfCookie 方法。</li><li>继续执行 Controller 的 Prepare 函数，这个函数一般是预留给用户的，用来做 Controller 里面的一些参数初始化之类的工作。如果在初始化中 responseWriter 有输出，那么就直接进入 Finish 函数逻辑。</li><li>如果没有输出的话，那么根据用户注册的方法执行相应的逻辑，如果用户没有注册，那么就调用 http.Method 对应的方法（Get/Post 等）。执行相应的逻辑，例如数据读取，数据赋值，模板显示之类的，或者直接输出 JSON 或者 XML。</li><li>如果 responseWriter 没有输出，那么就调用 Render 函数进行模板输出。</li><li>执行 Controller 的 Finish 函数，这个函数是预留给用户用来重写的，用于释放一些资源。释放在 Init 中初始化的信息数据。</li><li>执行 AfterExec 过滤器，如果有输出的话就跳转到监控判断逻辑。</li><li>执行 Controller 的 Destructor，用于释放 Init 中初始化的一些数据。</li><li>如果这一路执行下来都没有找到路由，那么会调用 404 显示找不到该页面。</li><li>最后所有的逻辑都汇聚到了监控判断，如果用户开启了监控模块（默认是开启一个 8088 端口用于进程内监控），这样就会把访问的请求链接扔给监控程序去记录当前访问的 QPS，对应的链接访问的执行时间，请求链接等。</li></ol><p>接下来就让我们开始进入 beego 的 MVC 核心第一步，路由设置：</p><h2 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h2><p>beego 存在三种方式的路由:固定路由、正则路由、自动路由，接下来详细的讲解如何使用这三种路由。</p><h3 id="基础路由"><a href="#基础路由" class="headerlink" title="基础路由"></a>基础路由</h3><p>从 beego 1.2 版本开始支持了基本的 RESTful 函数式路由,应用中的大多数路由都会定义在 <code>routers/router.go</code> 文件中。最简单的 beego 路由由 URI 和闭包函数组成。</p><ol><li><p>基础路由Get,Post。通过postman用对应的HTTP请求去访问：<a href="http://localhost:8080/basic/get，http://localhost:8080/basic/get" target="_blank" rel="noopener">http://localhost:8080/basic/get，http://localhost:8080/basic/get</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/context"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.基础路由</span></span><br><span class="line">beego.Get(<span class="string">"/basic/get"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router get"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">beego.Post(<span class="string">"/basic/post"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router post"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册一个可以响应任何 HTTP 的路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 1.基础路由</span></span><br><span class="line">beego.Get(<span class="string">"/basic/get"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router get"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">beego.Post(<span class="string">"/basic/post"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router post"</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2.注册一个可以响应任意HTTP请求的路由</span></span><br><span class="line">beego.Any(<span class="string">"/basic/any"</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"basic router any"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>beego所支持的基础函数如下</p></li></ol><ul><li>beego.Get(router, beego.FilterFunc)</li><li>beego.Post(router, beego.FilterFunc)</li><li>beego.Put(router, beego.FilterFunc)</li><li>beego.Patch(router, beego.FilterFunc)</li><li>beego.Head(router, beego.FilterFunc)</li><li>beego.Options(router, beego.FilterFunc)</li><li>beego.Delete(router, beego.FilterFunc)</li><li>beego.Any(router, beego.FilterFunc)</li></ul><ol start="4"><li><p>自定义handler</p><p>有些时候项目中已经实现了一些 rpc 的应用,但是想要集成到 beego 中,或者其他的 httpserver 应用,集成到 beego 中来.现在可以很方便的集成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s := rpc.NewServer()</span><br><span class="line">s.RegisterCodec(json.NewCodec(), <span class="string">"application/json"</span>)</span><br><span class="line">s.RegisterService(<span class="built_in">new</span>(HelloService), <span class="string">""</span>)</span><br><span class="line">beego.Handler(<span class="string">"/rpc"</span>, s)</span><br></pre></td></tr></table></figure><p><code>beego.Handler(router, http.Handler)</code> 这个函数是关键,第一个参数表示路由 URI, 第二个就是你自己实现的 <code>http.Handler</code>, 注册之后就会把所有 rpc 作为前缀的请求分发到 <code>http.Handler</code> 中进行处理.</p><p>这个函数其实还有第三个参数就是是否是前缀匹配,默认是 false, 如果设置了 true, 那么就会在路由匹配的时候前缀匹配,即 <code>/rpc/user</code> 这样的也会匹配去运行</p></li><li><p>路由参数</p><p>在项目开发中通常是需要在请求中获取对应的参数，后面的固定路由，正则路由，这些参数一样适用于上面的这些函数</p></li></ol><h3 id="RESTful-Controller-路由"><a href="#RESTful-Controller-路由" class="headerlink" title="RESTful Controller 路由"></a>RESTful Controller 路由</h3><p> RESTful 是一种目前 API 开发中广泛采用的形式，beego 默认就是支持这样的请求方法，也就是用户 Get 请求就执行 Get 方法，Post 请求就执行 Post 方法。因此默认的路由是这样 RESTful 的请求方式。</p><h3 id="RESTful风格的固定路由"><a href="#RESTful风格的固定路由" class="headerlink" title="RESTful风格的固定路由"></a>RESTful风格的固定路由</h3><p>固定路由也就是全匹配的路由.</p><p>在<code>controllers</code>包下创建UserController、ArticleController和AddController.</p><p>UserController.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UserController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path:/admin UserController:Get"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArticleController.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ArticleController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *ArticleController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path:/admin/addpkg ArticleController:Get"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AddController.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> AddController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *AddController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path:/admin/index AddController:Get"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写完之后去路由进行注册，如下面所示的路由就是我们最常用的路由方式，一个固定的路由，一个控制器，然后根据用户请求方法不同请求控制器中对应的方法，典型的 RESTful 方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"beedemo/controllers"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego/context"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// RESTful固定路由</span></span><br><span class="line">beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/admin"</span>, &amp;controllers.UserController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/admin/index"</span>, &amp;controllers.ArticleController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/admin/addpkg"</span>, &amp;controllers.AddController&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则路由"><a href="#正则路由" class="headerlink" title="正则路由"></a>正则路由</h3><p>为了用户更加方便的路由设置，beego 参考了 sinatra 的路由实现，支持多种方式的路由：</p><ul><li><p>beego.Router(“/api/?:id”, &amp;controllers.RController{})</p><p>默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”</p></li><li><p>beego.Router(“/api/:id”, &amp;controllers.RController{})</p><p>默认匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”，但URL”/api/“匹配失败</p></li><li><p>beego.Router(“/api/:id([0-9]+)” &amp;controllers.RController{})</p><p>自定义正则匹配 //例如对于URL”/api/123”可以匹配成功，此时变量”:id”值为”123”</p></li><li><p>beego.Router(“/user/:username([\w]+)”, &amp;controllers.RController{})</p><p>正则字符串匹配 //例如对于URL”/user/astaxie”可以匹配成功，此时变量”:username”值为”astaxie”</p></li><li><p>beego.Router(“/download/<em>.</em>“, &amp;controllers.RController{})</p><p>*匹配方式 //例如对于URL”/download/file/api.xml”可以匹配成功，此时变量”:path”值为”file/api”， “:ext”值为”xml”</p></li><li><p>beego.Router(“/download/ceshi/*”, &amp;controllers.RController{})</p><p>*全匹配方式 //例如对于URL”/download/ceshi/file/api.json”可以匹配成功，此时变量”:splat”值为”file/api.json”</p></li><li><p>beego.Router(“/:id :int”, &amp;controllers.RController{})</p><p>int 类型设置方式，匹配 :id为int 类型，框架帮你实现了正则 ([0-9]+)</p></li><li><p>beego.Router(“/:hi:string”, &amp;controllers.RController{})</p><p>string 类型设置方式，匹配 :hi 为 string 类型。框架帮你实现了正则 ([\w]+)</p></li><li><p>beego.Router(“/cms_:id([0-9]+).html”, &amp;controllers.CmsController{})</p><p>带有前缀的自定义正则 //匹配 :id 为正则类型。匹配 cms_123.html 这样的 url :id = 123</p></li></ul><p>现在在<code>controllers</code>包下创建RController</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *RController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 获取参数</span></span><br><span class="line">id := c.Ctx.Input.Param(<span class="string">":id"</span>)</span><br><span class="line">    <span class="comment">// 再响应回去</span></span><br><span class="line">c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path param"</span>+id))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再<code>router.go</code>中注册正则路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/api/?:id"</span>, &amp;controllers.RController&#123;&#125;)</span><br></pre></td></tr></table></figure><p>postman访问<a href="http://localhost:8080/api/123，会返回&quot;path" target="_blank" rel="noopener">http://localhost:8080/api/123，会返回&quot;path</a> parma123”。说明路由匹配成功。当访问<a href="http://localhost:8080/api的时候路由也会匹配成功，页面返回了&quot;path" target="_blank" rel="noopener">http://localhost:8080/api的时候路由也会匹配成功，页面返回了&quot;path</a> param”，就是参数为空。</p><p>现在把路由的匹配换成一下进行注册，然后再分别请求访问<a href="http://localhost:8080/api/123和http://localhost:8080/api。前者会匹配成功，页面返回了&quot;path" target="_blank" rel="noopener">http://localhost:8080/api/123和http://localhost:8080/api。前者会匹配成功，页面返回了&quot;path</a> param123”。后者会出现404页面，路由匹配失败。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/api/:id"</span>, &amp;controllers.RController&#123;&#125;)</span><br></pre></td></tr></table></figure><p>“/api/:id([0-9]+)”和”/user/:username([\w]+)”，其实从正则表达式就可以看得出来，前者是只匹配数字，后者只匹配字符。修改UserController</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *UserController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">username := c.Ctx.Input.Param(<span class="string">":username"</span>)</span><br><span class="line"><span class="comment">//c.Ctx.Output.Body([]byte("path:/admin UserController:Get"))</span></span><br><span class="line">c.Ctx.Output.Body([]<span class="keyword">byte</span>(<span class="string">"path param username:"</span> + username))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">"/api/:id([0-9]+)"</span>, &amp;controllers.RController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">"/user/:username([\\w]+)"</span>, &amp;controllers.UserController&#123;&#125;)</span><br></pre></td></tr></table></figure><p>访问测试<a href="http://localhost:8080/api/123和http://localhost:8080/api/kkk。前者会匹配成功，页面返回&quot;path" target="_blank" rel="noopener">http://localhost:8080/api/123和http://localhost:8080/api/kkk。前者会匹配成功，页面返回&quot;path</a> param id:123” ，后者访问会404。<a href="http://localhost:8080/user/123和http://localhost:8080/user/kkk。这两个路径都会成功匹配并路由到UserController的Get方法。" target="_blank" rel="noopener">http://localhost:8080/user/123和http://localhost:8080/user/kkk。这两个路径都会成功匹配并路由到UserController的Get方法。</a></p><h2 id="控制器函数"><a href="#控制器函数" class="headerlink" title="控制器函数"></a>控制器函数</h2><h2 id="xsrf-过滤"><a href="#xsrf-过滤" class="headerlink" title="xsrf 过滤"></a>xsrf 过滤</h2><h2 id="session-控制"><a href="#session-控制" class="headerlink" title="session 控制"></a>session 控制</h2><h2 id="flash-数据"><a href="#flash-数据" class="headerlink" title="flash 数据"></a>flash 数据</h2><h2 id="请求数据处理"><a href="#请求数据处理" class="headerlink" title="请求数据处理"></a>请求数据处理</h2><h2 id="多种格式数据输出"><a href="#多种格式数据输出" class="headerlink" title="多种格式数据输出"></a>多种格式数据输出</h2><h2 id="表单数据验证"><a href="#表单数据验证" class="headerlink" title="表单数据验证"></a>表单数据验证</h2><h2 id="模板输出"><a href="#模板输出" class="headerlink" title="模板输出"></a>模板输出</h2><h2 id="模板函数"><a href="#模板函数" class="headerlink" title="模板函数"></a>模板函数</h2><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><h2 id="静态文件处理-1"><a href="#静态文件处理-1" class="headerlink" title="静态文件处理"></a>静态文件处理</h2><h2 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h2><h2 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h2><h1 id="TODO更新中…"><a href="#TODO更新中…" class="headerlink" title="TODO更新中…"></a>TODO更新中…</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="GoWeb" scheme="https://www.maishuren.top/tags/GoWeb/"/>
    
      <category term="beego" scheme="https://www.maishuren.top/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java虚拟机学习之内存管理(一)</title>
    <link href="https://www.maishuren.top/posts/jvm/2020/07/202007122215.html"/>
    <id>https://www.maishuren.top/posts/jvm/2020/07/202007122215.html</id>
    <published>2020-07-12T14:15:25.000Z</published>
    <updated>2020-12-24T13:57:02.232Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​        对于Java程序员来说，在虚拟机自动内存管理机制的帮助下，不再需要为每一个new操作去写配对的delete/free代码，不容易出现内存泄漏和内存溢出问题，看起来由虚拟机管理内存一切都很美好。不过，也正是因为Java程序员把控制内存的权力交给了Java虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那排查错误、修正问题将会成为一项异常艰难的工作。</p><h1 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h1><p>​        Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而一直存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。根据《Java虚拟机规范》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如下图所示。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/jvm/jvm-memory.jpg" alt="thread-dead-lock"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>​        程序计数器时一块较小的内存空间，可以把它看作是当前线程所执行字节码的行号指示器。在Java虚拟机的概念模型里面，字节码解析工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成。</p><p>​        Java虚拟机中的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器(多核处理器来说是一个内核)都会执行一条线程中的指令。因此，为了多线程切换之后能够恢复到正确的执行位置，每条线程都需要这样的一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。因此在Java虚拟机的运行时数据区中程序计数器是属于“线程私有”的一块内存。</p><p>​        如果线程正在执行的是一个Java方法， 这个计数器记录的是正在执行的虚拟机字节码指令的地址； 如果正在执行的是本地（Native） 方法， 这个计数器值则应为空（Undefined） 。 此内存区域是唯一一个在《Java虚拟机规范》 中没有规定任何<code>OutOfMemoryError</code>情况的区域。  </p><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>​        和程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程魔性：每个方法被执行的时候，Java虚拟机都会同步创建栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每个方法被调用直至执行完毕的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>​        局部变量表存放了编译期间可知的各种Java虚拟机基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型，他并不等同于对象本身，可能是一个执行对象起始地址的引用指针，也可能是指向代表一个对象的句柄或者其他与此对象相关的位置)和<code>returnAddress</code>类型（指向下一条字节码指令的地址）。</p><p>​        这些数据类型在局部变量表中的存储空间以局部变量槽来表示，其中64位长度的ling和double类型的数据会占用两个两个变量槽， 其余的数据类型只占用一个。 局部变量表所需的内存空间在编译期间完成分配， 当进入一个方法时， 这个方法需要在栈帧中分配多大的局部变量空间是完全确定的， 在方法运行期间不会改变局部变量表的大小。 这里说的“大小”是指变量槽的数量，虚拟机真正使用多大的内存空间（譬如按照1个变量槽占用32个比特、 64个比特， 或者更多） 来实现一个变量槽， 这是完全由具体的虚拟机实现自行决定的事情。</p><p>​        在《Java虚拟机规范》中，对于这个内存区域规定了两类异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出<code>StackOverflowError</code>异常；如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存时，抛出<code>StackOverflowError</code>异常。</p><p>​        如下所示，每调用一个方法就是创建一个栈帧并入栈(进入Java虚拟机栈)，当足够多的栈帧进栈并且没有出栈，这是会导致栈内存溢出。栈内存溢出经常会发生再递归调用</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/jvm/stackoverflow.jpg" alt="stackoverflow"></p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>​        本地方法栈（Native Method Stacks） 与虚拟机栈所发挥的作用是非常相似的， 其区别只是虚拟机栈为虚拟机执行Java方法（也就是字节码） 服务， 而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p><p>​        《Java虚拟机规范》对本地方法栈中方法使用的语言、使用方式与数据结构并没有任何强制规定，因此具体的虚拟机可以根据需要自由实现它，甚至有的Java虚拟机（譬如Hot-Spot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常。  </p><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>对于Java应用程序来说，Java堆时虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的，在虚拟机启动的时候Java堆就被创建出来。此区域的唯一作用就是存放对象实例，Java中“几乎”所有的对象实例都在这里分配内存。在《Java虚拟机规范》 中对Java堆的描述是： “所有的对象实例以及数组都应当在堆上分配”， 而这里的“几乎”是指从实现角度来看， 随着Java语言的发展， 现在已经能看到些许迹象表明日后可能出现值类型的支持， 即使只考虑现在， 由于即时编<br>译技术的进步， 尤其是逃逸分析技术的日渐强大， 栈上分配、 标量替换优化手段已经导致一些微妙的变化悄然发生， 所以说Java对象实例都分配在堆上也渐渐变得不是那么绝对了。</p><p>如果从分配内存的角度看， 所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer， TLAB） ， 以提升对象分配时的效率。 不过无论从什么角度， 无论如何划分， 都不会改变Java堆中存储内容的共性， 无论是哪个区域， 存储的都只能是对象的实例， 将Java堆细分的目的只是为了更好地回收内存， 或者更快地分配内存。  </p><p>根据《Java虚拟机规范》 的规定， Java堆可以处于物理上不连续的内存空间中， 但在逻辑上它应该被视为连续的， 这点就像我们用磁盘空间去存储文件一样， 并不要求每个文件都连续存放。 但对于大对象（典型的如数组对象） ， 多数虚拟机实现出于实现简单、 存储高效的考虑， 很可能会要求连续的内存空间。</p><p>Java堆既可以被实现成固定大小的， 也可以是可扩展的， 不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定） 。 如果在Java堆中没有内存完成实例分配， 并且堆也无法再扩展时， Java虚拟机将会抛出<code>OutOfMemoryError</code>异常。  </p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区（Method Area） 与Java堆一样， 是各个线程共享的内存区域， 它用于存储已被虚拟机加载的类型信息、 常量、 静态变量、 即时编译器编译后的代码缓存等数据。 虽然《Java虚拟机规范》 中把方法区描述为堆的一个逻辑部分， 但是它却有一个别名叫作“非堆”（Non-Heap） ， 目的是与Java堆区分开来。 </p><p>《Java虚拟机规范》 对方法区的约束是非常宽松的， 除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外， 甚至还可以选择不实现垃圾收集。 相对而言， 垃圾收集行为在这个区域的确是比较少出现的， 但并非数据进入了方法区就如永久代的名字一样“永久”存在了。 这区域的内存回收目标主要是针对常量池的回收和对类型的卸载， 一般来说这个区域的回收效果比较难令人满意， 尤其是类型的卸载， 条件相当苛刻， 但是这部分区域的回收有时又确实是必要的。 </p><p>根据《Java虚拟机规范》 的规定， 如果方法区无法满足新的内存分配需求时， 将抛出OutOfMemoryError异常。  </p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池（Runtime Constant Pool） 是方法区的一部分。 Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外， 还有一项信息是常量池表（Constant Pool Table） ， 用于存放编译期生成的各种字面量与符号引用， 这部分内容将在类加载后存放到方法区的运行时常量池中。</p><p>Java虚拟机对于Class文件每一部分（自然也包括常量池） 的格式都有严格规定， 如每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、 加载和执行， 但对于运行时常量池，《Java虚拟机规范》 并没有做任何细节的要求， 不同提供商实现的虚拟机可以按照自己的需要来实现这个内存区域， 不过一般来说， 除了保存Class文件中描述的符号引用外， 还会把由符号引用翻译出来的直接引用也存储在运行时常量池中。</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。  </p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常的出现。</p><p>在JDK1.4中新加入了NIO类，引入一种基于通道与缓冲区的I/O方式，它可以使Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样内在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回恢复数据。</p><p>直接内存的分配不会受到Java堆大小的限制， 但是， 既然是内存， 则肯定还是会受到本机总内存（包括物理内存、 SWAP分区或者分页文件） 大小以及处理器寻址空间的限制， 一般服务器管理员配置虚拟机参数时， 会根据实际内存去设置-Xmx等参数信息， 但经常忽略掉直接内存， 使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。  </p><h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><h2 id="对象的定位"><a href="#对象的定位" class="headerlink" title="对象的定位"></a>对象的定位</h2><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><h1 id="实战：OOM异常"><a href="#实战：OOM异常" class="headerlink" title="实战：OOM异常"></a>实战：OOM异常</h1>]]></content>
    
    <summary type="html">
    
      Java与C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想进去，墙里面的人却想出来。
    
    </summary>
    
    
      <category term="后端" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="java" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/java/"/>
    
    
      <category term="jvm" scheme="https://www.maishuren.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>【java并发编程】多线程的线程安全问题</title>
    <link href="https://www.maishuren.top/posts/java-concurrent-programing/2020/07/202007041308.html"/>
    <id>https://www.maishuren.top/posts/java-concurrent-programing/2020/07/202007041308.html</id>
    <published>2020-07-04T05:08:02.000Z</published>
    <updated>2020-07-12T14:12:39.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>看一下下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUnsafe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" sale a ticket,current:"</span> + saleTicket());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"票已经卖完了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saleTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ticketNum--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 sale a ticket,current:18</span><br><span class="line">Thread-9 sale a ticket,current:11</span><br><span class="line">Thread-3 sale a ticket,current:19</span><br><span class="line">Thread-4 sale a ticket,current:12</span><br><span class="line">Thread-6 sale a ticket,current:14</span><br><span class="line">Thread-8 sale a ticket,current:13</span><br><span class="line">Thread-2 sale a ticket,current:15</span><br><span class="line">Thread-5 sale a ticket,current:20</span><br><span class="line">Thread-0 sale a ticket,current:17</span><br><span class="line">Thread-7 sale a ticket,current:16</span><br><span class="line">Thread-7 sale a ticket,current:10</span><br><span class="line">Thread-9 sale a ticket,current:5</span><br><span class="line">Thread-1 sale a ticket,current:6</span><br><span class="line">Thread-6 sale a ticket,current:7</span><br><span class="line">Thread-3 sale a ticket,current:8</span><br><span class="line">Thread-4 sale a ticket,current:9</span><br><span class="line">Thread-8 sale a ticket,current:9</span><br><span class="line">Thread-2 sale a ticket,current:9</span><br><span class="line">Thread-0 sale a ticket,current:9</span><br><span class="line">Thread-5 sale a ticket,current:9</span><br><span class="line">Thread-4 sale a ticket,current:2</span><br><span class="line">Thread-7 sale a ticket,current:-2</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-6 sale a ticket,current:-1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-1 sale a ticket,current:0</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-9 sale a ticket,current:0</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-8 sale a ticket,current:1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-3 sale a ticket,current:4</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-5 sale a ticket,current:1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-2 sale a ticket,current:4</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-0 sale a ticket,current:3</span><br><span class="line">票已经卖完了</span><br><span class="line">票已经卖完了</span><br></pre></td></tr></table></figure><p>从执行结果看得出来，存在</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/java-concurrent/unsafe1.jpg" alt=""></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1>]]></content>
    
    <summary type="html">
    
      多线程编程虽然用起来很爽，同时也会带来一些问题
    
    </summary>
    
    
      <category term="并发编程" scheme="https://www.maishuren.top/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
      <category term="多线程" scheme="https://www.maishuren.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="高并发" scheme="https://www.maishuren.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器下配置MySQL主从配置</title>
    <link href="https://www.maishuren.top/posts/mysql/2020/06/202006281626.html"/>
    <id>https://www.maishuren.top/posts/mysql/2020/06/202006281626.html</id>
    <published>2020-06-28T08:26:07.000Z</published>
    <updated>2020-06-29T09:31:00.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/replica.png" alt=""></p><h1 id="获取MySQL镜像"><a href="#获取MySQL镜像" class="headerlink" title="获取MySQL镜像"></a>获取MySQL镜像</h1><p>搜索mysql，前两个是mysql官方制作的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker search mysql</span><br><span class="line">NAME    DESCRIPTION                                     STARS        OFFICIAL   AUTOMATED</span><br><span class="line">mysql   MySQL is a widely used, open-source relation…   9686         [OK]                </span><br><span class="line">mariadb MariaDB is a community-developed fork of MyS…   3523         [OK]                </span><br><span class="line">mysql&#x2F;mysql-server   Optimized MySQL Server Docker images. Create…   706         [OK]</span><br></pre></td></tr></table></figure><p>拉取mysql镜像到本地，因为mysql镜像有很多版本，对应mysql的版本：mysql:tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h1 id="运行MySQL镜像生成容器"><a href="#运行MySQL镜像生成容器" class="headerlink" title="运行MySQL镜像生成容器"></a>运行MySQL镜像生成容器</h1><p>运行mysql镜像，生成容器。用户名root，密码123456</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker run -d --name mysql5.7 -p 3306:3306 -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;123456 master</span><br><span class="line"></span><br><span class="line">[root@slave ~]# docker run -d --name mysql5.7 -p 3306:3306 -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;123456 slave</span><br></pre></td></tr></table></figure><p>至于mysql的配置文件my.cnf，可以把自己准备，也可以通过一下命令获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker run -i --rm mysql5.7 cat /etc/my.cnf &gt; my.cnf</span><br></pre></td></tr></table></figure><h1 id="MySQL主从配置"><a href="#MySQL主从配置" class="headerlink" title="MySQL主从配置"></a>MySQL主从配置</h1><p>修改mysql的配置文件</p><p>master：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">#开启log-bin</span><br><span class="line">log-bin &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">#设置服务id，主从不能一致  </span><br><span class="line">server‐id &#x3D; 1  </span><br><span class="line">#设置需要同步的数据库  </span><br><span class="line">#binlog‐do‐db&#x3D;user_db  </span><br><span class="line">#屏蔽系统库同步  </span><br><span class="line">binlog‐ignore‐db&#x3D;mysql  </span><br><span class="line">binlog‐ignore‐db&#x3D;information_schema  </span><br><span class="line">binlog‐ignore‐db&#x3D;performance_schema  </span><br><span class="line">expire-logs-days &#x3D; 14</span><br><span class="line">max-binlog-size &#x3D; 500M</span><br><span class="line">default-time-zone&#x3D;&#39;+08:00&#39;</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><p>slave：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">#开启log-bin</span><br><span class="line">log-bin &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">expire-logs-days &#x3D; 14</span><br><span class="line">max-binlog-size &#x3D; 500M</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line">#relay_log的位置</span><br><span class="line">relay_log&#x3D;mysql-relay-bin</span><br><span class="line">log-slave-updates &#x3D; 1</span><br><span class="line">#设置需要同步的数据库  </span><br><span class="line">#replicate_wild_do_table&#x3D;user_db.%  </span><br><span class="line">#屏蔽系统库同步  </span><br><span class="line">replicate_wild_ignore_table&#x3D;mysql.%  </span><br><span class="line">replicate_wild_ignore_table&#x3D;information_schema.%  </span><br><span class="line">replicate_wild_ignore_table&#x3D;performance_schema.% </span><br><span class="line">#只读</span><br><span class="line">read-only &#x3D; 1</span><br><span class="line">default-time-zone&#x3D;&#39;+08:00&#39;</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><p>重启master和slave</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker restart master</span><br><span class="line">[root@msr ~]# docker restart slave</span><br></pre></td></tr></table></figure><p>下一步在Master数据库创建数据同步用户，授予用户 slave REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于在主从库之间同步数据。首先要进入到docker容器内，也可以通过向Navicat等工具执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker exec -it master &#x2F;bin&#x2F;bash</span><br><span class="line">root@207f37f4c64a:&#x2F;# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1633</span><br><span class="line">Server version: 5.7.30-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000004 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>重启数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker restart master</span><br><span class="line">[root@msr ~]# docker restart slave</span><br></pre></td></tr></table></figure><p>在salve中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;192.168.74.130&#39;, master_user&#x3D;&#39;slave&#39;, master_password&#x3D;&#39;123456&#39;, master_port&#x3D;3306, master_log_file&#x3D;&#39;mysql-bin.000004&#39;, master_log_pos&#x3D; 154, master_connect_retry&#x3D;30;</span><br></pre></td></tr></table></figure><p><strong>master_host</strong> ：Master的地址，指的是容器的独立ip,可以通过docker inspect –format=’ {{.NetworkSettings.IPAddress}} ‘容器名称|容器id`查询容器的ip，这个命令查看的是容器的Host，同服务器下可以使用。不同服务器下就要使用服务的真实IP地址。</p><p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p><p><strong>master_user</strong>：用于数据同步的用户</p><p><strong>master_password</strong>：用于同步的用户的密码</p><p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p><p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p><p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p><p>查看slave的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">show slave status\\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 192.168.74.130</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1045</span><br><span class="line">                Last_IO_Error: error connecting to master &#39;slave@47.96.175.101:3306&#39; - retry-time: 60  retries: 10</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: </span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 200628 09:03:36</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>正常情况下Slave_IO_Running: No和Slave_SQL_Running: No。因为我们还没有开启主从复制过程。使用<code>start slave</code>开启主从复制过程，然后再次查询主从同步状态show slave status \G;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.74.130</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 531</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: 0994ae5c-b83a-11ea-9769-0242ac110003</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>Slave_IO_State: Waiting for master to send event，说明正在等待master的数据。Slave_IO_Running: Yes和Slave_SQL_Running: Yes说明主从复制已经开启。此时可以测试数据同步是否成功。</p><h1 id="配置过程中可能出现的错误"><a href="#配置过程中可能出现的错误" class="headerlink" title="配置过程中可能出现的错误"></a>配置过程中可能出现的错误</h1><p>Slave_IO_State: Connecting to master或Slave_IO_Running:Connectiog。说明从库一直在尝试连接主库，所以可能是：</p><ul><li>主库的Host地址不对</li><li>端口是否不对</li><li>用于连接主库的用户和密码是否不对</li><li>master_log_file和master_log_pos是否和主库的不一致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="docker" scheme="https://www.maishuren.top/tags/docker/"/>
    
      <category term="mysql" scheme="https://www.maishuren.top/tags/mysql/"/>
    
      <category term="主从复制" scheme="https://www.maishuren.top/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据库中间件ShardingSphere</title>
    <link href="https://www.maishuren.top/posts/middleware/2020/06/202006261803.html"/>
    <id>https://www.maishuren.top/posts/middleware/2020/06/202006261803.html</id>
    <published>2020-06-26T10:03:17.000Z</published>
    <updated>2020-12-05T06:17:40.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是ShardingSphere？"><a href="#什么是ShardingSphere？" class="headerlink" title="什么是ShardingSphere？"></a>什么是ShardingSphere？</h1><p>Apache ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款相互独立，却又能够混合部署配合使用的产品组成。 它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><p>Apache ShardingSphere 定位为关系型数据库中间件，旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 它通过关注不变，进而抓住事物本质。关系型数据库当今依然占有巨大市场，是各个公司核心业务的基石，未来也难于撼动，我们目前阶段更加关注在原有基础上的增量，而非颠覆。</p><p><strong>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目</strong>。</p><p>官网：<a href="http://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noopener">http://shardingsphere.apache.org/index_zh.html</a></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/shardingsphere-scope.png" alt=""></p><h1 id="Sharding-JDBC简介"><a href="#Sharding-JDBC简介" class="headerlink" title="Sharding-JDBC简介"></a>Sharding-JDBC简介</h1><p>定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><ul><li>适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</li><li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</li><li>支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</li><li><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-jdbc-brief.png" alt=""></li></ul><h1 id="Sharding-Proxy简介"><a href="#Sharding-Proxy简介" class="headerlink" title="Sharding-Proxy简介"></a>Sharding-Proxy简介</h1><p>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供MySQL/PostgreSQL版本，它可以使用任何兼容MySQL/PostgreSQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench, Navicat等)操作数据，对DBA更加友好。</p><ul><li>向应用程序完全透明，可直接当做MySQL/PostgreSQL使用。</li><li>适用于任何兼容MySQL/PostgreSQL协议的的客户端。</li></ul><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-proxy-brief_v2.png" alt=""></p><p>由此可见，使用了Sharding-Proxy之后，我们的操作都是去操作Sharding-Proxy不需要去操作MySQL，相当于我们发送SQL操作，让这个代理去操作数据库。</p><h1 id="Sharding-Sidecar简介（开发中）"><a href="#Sharding-Sidecar简介（开发中）" class="headerlink" title="Sharding-Sidecar简介（开发中）"></a>Sharding-Sidecar简介（开发中）</h1><p>定位为Kubernetes的云原生数据库代理，以Sidecar的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的的啮合层，即Database Mesh，又可称数据网格。</p><p>Database Mesh的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互有效的梳理。使用Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-sidecar-brief_v2.png" alt=""></p><h1 id="Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比"><a href="#Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比" class="headerlink" title="Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比"></a>Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比</h1><table><thead><tr><th align="left"></th><th align="left"><em>Sharding-JDBC</em></th><th align="left"><em>Sharding-Proxy</em></th><th><em>Sharding-Sidecar</em></th></tr></thead><tbody><tr><td align="left">数据库</td><td align="left">任意</td><td align="left">MySQL</td><td>MySQL</td></tr><tr><td align="left">连接消耗数</td><td align="left">高</td><td align="left">低</td><td>高</td></tr><tr><td align="left">异构语言</td><td align="left">仅Java</td><td align="left">任意</td><td>任意</td></tr><tr><td align="left">性能</td><td align="left">损耗低</td><td align="left">损耗略高</td><td>损耗低</td></tr><tr><td align="left">无中心化</td><td align="left">是</td><td align="left">否</td><td>是</td></tr><tr><td align="left">静态入口</td><td align="left">无</td><td align="left">有</td><td>无</td></tr></tbody></table><h1 id="混合搭配使用"><a href="#混合搭配使用" class="headerlink" title="混合搭配使用"></a>混合搭配使用</h1><p>Sharding-JDBC采用无中心化架构，适用于Java开发的高性能的轻量级OLTP应用；Sharding-Proxy提供静态入口以及异构语言的支持，适用于OLAP应用以及对分片数据库进行管理和运维的场景。</p><p>ShardingSphere是多接入端共同组成的生态圈。 通过混合使用Sharding-JDBC和Sharding-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，架构师可以更加自由的调整适合于当前业务的最佳系统架构。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/shardingsphere-hybrid.png" alt=""></p><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><p>数据库中的数据量不一定是可控的，在未进行分库分表的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作，增删改查的开销 也会越来越大；另外由于无法进行分布式式部署，而一台服务器的资源（CPU、磁盘、内<br>存、IO 等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p><p>分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题，将原来独立的数据库拆分成若干数据库组成，将数据大表拆分成若干数据表组成，使得单一数据库、单一数 据表的数据量变小，从而达到提升数据库性能的目的。</p><p>数据库的切分指的是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主机）中，以达到分散单台设备负载的效果，即分库分表。数据的切分根据其切分规则的类型，可以分为 垂直切分 和水平切分。</p><h2 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h2><p>垂直切分： 把单一的表拆分成多个表，并分散到不同的数据库（主机）上。  </p><p>一个数据库有多个表构成，每个表对应不同的业务，垂直切分是只按照业务将表进行分类， </p><p>将其分布到不同的数据库上，这样就将数据分担到了不同的库上（专库专用）。  </p><p>例如：  </p><p>有如下几张表：  </p><ul><li>用户信息表（User）  </li><li>课程信息表（Courses ）  </li><li>订单信息表（Orders ）  </li><li>针对以上案例，垂直切分就是根据每个表的不同业务进行切分。  </li><li>比如 User 表，Courses 表和 Orders 表，将每个表切分到不同的数据库上。  </li></ul><p><strong>垂直切分的优点：</strong></p><p> （1）拆分后业务清晰，系统之间进行整合或扩展很容易。  </p><p> （2）按照成本、应用的等级、应用的类型等奖表放到不同的机器上，便于管理，数据维护简单。  </p><p><strong>垂直切分的缺点：</strong>  </p><p> （1）部分业务表无法关联(Join), 只能通过接口方式解决，提高了系统的复杂度。  </p><p> （2）受每种业务的不同限制，存在单库性能瓶颈，不易进行数据扩展和提升性能。  </p><p> （3）事务处理变得复杂。  </p><p><strong>垂直分表：</strong></p><p>例如：课程表中含有多个字段，我们可以通过垂直分表，把一些属性进行拆分。这样假如对“课程名称”进行修改，只会锁定“课程基本信息表”，同时对于一个表的访问变成了两个表的访问，业务复杂度也会相对上升。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/cz1.png" alt=""></p><p><strong>垂直分库：</strong></p><p>根据不同的业务，专门建立一个数据库来存储业务相关的表。例如在”商品表“专门建立一个”商品数据库“，”订单表“建立一个“订单数据库”，分库之后，同时也可以对商品表进行分表的。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/czfk.png" alt=""></p><h2 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h2><p>水平切分：根据表中数据的逻辑关系，将表中的数据按照某种条件拆分到多台数据库上。  </p><p>与垂直切分对比，水平切分不是将表进行分类，而是将其按照某个字段的某种规则分散到多个库中，在每个表中包含一部分数据，所有表加起来就是全量的数据。  </p><p>简单来说，我们可以将对数据的水平切分理解为按照数据行进行切分，就是将表中的某些行切分到一个数据库表中，而将其他行切分到其他数据库表中。这种切分方式根据单表的数据量的规模来切分，保证单表的容量不会太大，从而保证了单表的查询等处理能力  </p><p>例如将用户的信息表拆分成 User1、User2 等，表结构是完全一样的。我们通常根据某些特定的规则来划分表，比如根据用户的 ID 来取模划分。  </p><p><strong>举例：</strong></p><p>在博客类系统中，读取量一般都会很大。当同时有 100 万个用户在浏览时，如果是单表,则单表会进行 100 万次请求，如果是单库，数据库就会承受 100 万次的请求压力。  如果采取水平切分来减少每个单表的压力，将其分为 100 个表，并且分布在 10 个数据库 中，每个表进行 1 万次请求，则每个数据库会承受 10 万次的请求压力，虽然这不可能绝对平均，但是这样，压力就减少了很多，并且是成倍减少的。  </p><p><strong>水平切分的优点：</strong></p><p> （1）单库单表的数据保持在一定的量级，有助于性能的提高。  </p><p> （2）切分的表的结构相同，应用层改造较少，只需要增加路由规则即可。  </p><p> （3）提高了系统的稳定性和负载能力。  </p><p><strong>水平切分的缺点：</strong></p><p> （1）切分后，数据是分散的，很难利用数据库的Join 操作，跨库 Join 性能较差。  </p><p> （2）分片事务的一致性难以解决，数据扩容的难度和维护量极大。</p><p><strong>水平分表：</strong></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/spfb.png" alt=""></p><p><strong>水平分库：</strong></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/spfk.png" alt=""></p><h1 id="分库分表的应用和问题"><a href="#分库分表的应用和问题" class="headerlink" title="分库分表的应用和问题"></a>分库分表的应用和问题</h1><p>应用：</p><ul><li>在数据设计时可以考虑垂直分库和垂直分表</li><li>随着数据库数据量的增加，不要马上考虑水平切分，首先考虑使用如引入缓存处理、读写分离、使用数据库索引优化等方式，如果这些方式都不能根本解决问题，再考虑水平分库和水平分表。</li></ul><p>问题：</p><ul><li>跨界点连接查询(join查询)问题</li><li>多数据源管理问题</li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>1、环境：SpringBoot2.2.2+MyBatis-Plus+Sharding-JDBC+Druid</p><p>创建父工程，Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ShardingSphere-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Sharding-jdbc-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Sharding-Proxy-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Sharding-jdbc-demo的maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/sharding-jdbc-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-namespace<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、按照水平分表的方式，创建数据库和数据库表</p><p>（1）创建数据库course_db</p><p>（2）在数据库创建两张表 course_1 和 course_2</p><p>（3）约定规则：如果添加课程id 是偶数把数据添加course_1，如果奇数添加到course_2  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE test;</span><br><span class="line">USE test;</span><br><span class="line">DROP TABLE IF EXISTS &#96;course_1&#96;;</span><br><span class="line">CREATE TABLE &#96;course_1&#96;  (</span><br><span class="line">  &#96;course_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  &#96;user_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_status&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;course_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;course_2&#96;;</span><br><span class="line">CREATE TABLE &#96;course_2&#96;  (</span><br><span class="line">  &#96;course_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  &#96;user_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_status&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;course_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现水平分表"><a href="#Sharding-JDBC实现水平分表" class="headerlink" title="Sharding-JDBC实现水平分表"></a>Sharding-JDBC实现水平分表</h1><p>1.编写application.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">XXX</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>2.简单编写mapper、controller、ShardingJdbcApplication启动类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseMapper courseMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@RequestBody Course course)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insert = courseMapper.insert(course);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">queryById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> courseMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.msr.shardingjdbc.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingJdbcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ShardingJdbcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试</p><p>使用PostMan调用add方法，添加成功之后，查看控制台输出的日志，course_id为奇数。保存在course2表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 2700 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds0 ::: INSERT INTO course_2   (course_name, user_id, course_status, course_id) VALUES (?, ?, ?, ?) ::: [docker入门到实践, 100, 1, 483626785309720577]</span><br></pre></td></tr></table></figure><p>使用“483626785309720577”再去调用queryById方法，查看日志输出，确实是去course2表中查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 10220 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds0 ::: SELECT course_id,course_name,user_id,course_status FROM course_2 WHERE course_id&#x3D;? ::: [483626785309720577]</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现水平分库"><a href="#Sharding-JDBC实现水平分库" class="headerlink" title="Sharding-JDBC实现水平分库"></a>Sharding-JDBC实现水平分库</h1><p>1.修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test2?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0，ds1中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>2.水平分库的策略</p><p>根据user_id去分库，当user_id为偶数时，数据添加进数据源ds1中，奇数则是路由到数据源ds2</p><p>3.测试</p><p>启动的时候，通过日志可以看出，两个数据源都已经完成初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO 14796 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 14796 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br></pre></td></tr></table></figure><p>使用PostMan调用add方法，添加成功之后，查看控制台输出的日志。course_id=1276767761787297794，user_id=10。课程id为偶数，user_id也为偶数。所以数据会被保存在数据源ds1中的course1表中。对比日志，说明水平分库分表的策略是成功的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 8684 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO course_1   (course_id, course_name, user_id, course_status) VALUES (?, ?, ?, ?) ::: [1276767761787297794, docker入门到实践, 10, 1]</span><br></pre></td></tr></table></figure><p>然后试一下查询，使用user_id和course_id作用查询条件。controller新增一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"query/&#123;uid&#125;/&#123;cid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Course <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"uid"</span>)</span> Long uid, @<span class="title">PathVariable</span><span class="params">(<span class="string">"cid"</span>)</span> Long cid) </span>&#123;</span><br><span class="line">QueryWrapper&lt;Course&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.lambda()</span><br><span class="line">    .eq(uid != <span class="keyword">null</span>, Course::getUserId, uid)</span><br><span class="line">                .eq(cid != <span class="keyword">null</span>, Course::getCourseId, cid);java</span><br><span class="line">    <span class="keyword">return</span> courseMapper.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PostMan调用（uid=10，cid=1276767761787297794）查看结果：sql查询确实是会路由到ds1下的course1表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nio-8080-exec-2] ShardingSphere-SQL                       : Actual SQL: ds1 ::: SELECT  course_id,course_name,user_id,course_status  FROM course_1 WHERE  user_id &#x3D; ? AND course_id &#x3D; ? ::: [10, 1276767761787297794]</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现垂直切分"><a href="#Sharding-JDBC实现垂直切分" class="headerlink" title="Sharding-JDBC实现垂直切分"></a>Sharding-JDBC实现垂直切分</h1><p>通过Sharding-JDBC进行垂直分库，实现专库专表。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/czfk.png" alt=""></p><p>1.新建两个数据库和两张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE production_db;</span><br><span class="line">USE production_db;</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_production&#96;;</span><br><span class="line">CREATE TABLE &#96;t_production&#96;  (</span><br><span class="line">  &#96;pid&#96; bigint(50) NOT NULL,</span><br><span class="line">  &#96;pname&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;price&#96; int(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;pid&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE order_db;</span><br><span class="line">USE order_db;</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_order&#96;;</span><br><span class="line">CREATE TABLE &#96;t_order&#96;  (</span><br><span class="line">  &#96;order_id&#96; bigint(50) NOT NULL,</span><br><span class="line">  &#96;order_name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;create_time&#96; TIMESTAMP NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;order_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><p>2.编写相关的实体类，Mapper、测试的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_production"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductionMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Production</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductionMapper productionMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add2</span><span class="params">(@RequestBody Order order)</span> </span>&#123;</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">int</span> insert = orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add3</span><span class="params">(@RequestBody Production production)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insert = productionMapper.insert(production);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds1,ds2,ds3,ds4</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test2?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line"><span class="comment">#垂直分库的数据源</span></span><br><span class="line">      <span class="attr">ds3:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/production_db?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds4:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/order_db?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0，ds1中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">          <span class="comment">#数据库分片策略</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line"><span class="comment">#专库</span></span><br><span class="line">        <span class="attr">production:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;3&#125;.t_production</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">pid</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">pid</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_production</span></span><br><span class="line">        <span class="attr">order:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;4&#125;.t_order</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_order</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>4.测试</p><p>启动，四个数据源都已经初始化了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-3&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-4&#125; inited</span><br></pre></td></tr></table></figure><p>通过PostMan调用controller方法进行测试，sql日志如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO 13384 --- [nio-8080-exec-2] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO t_production   (pid, pname, price) VALUES (?, ?, ?) ::: [1277152899687895042, 小米10pro, 2999]</span><br><span class="line"></span><br><span class="line">INFO 13384 --- [nio-8080-exec-5] ShardingSphere-SQL                       : Actual SQL: ds2 ::: INSERT INTO t_order   (order_id, order_name, create_time) VALUES (?, ?, ?) ::: [1277153290127265794, 小米10pro-24期免息, 2020-06-28 16:14:07.384]</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现读写分离"><a href="#Sharding-JDBC实现读写分离" class="headerlink" title="Sharding-JDBC实现读写分离"></a>Sharding-JDBC实现读写分离</h1><p><a href="http://www.maishuren.top/posts/mysql/202006281626-index.html">配置MySQL主从复制(一主一从)</a></p><p>在TestController新增一个查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"order/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderMapper.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">m0,s0</span></span><br><span class="line"><span class="comment"># 主服务器数据源</span></span><br><span class="line">    <span class="attr">m0:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.74.129:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#从服务器数据源</span></span><br><span class="line">    <span class="attr">s0:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.74.130:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">masterslave:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ms</span></span><br><span class="line"><span class="comment">#主库和从库逻辑数据源定义：ds0</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">master-slave-rules:</span> </span><br><span class="line">        <span class="attr">ds0:</span> </span><br><span class="line">          <span class="attr">master-data-source-name:</span> <span class="string">m0</span></span><br><span class="line">      <span class="attr">master-slave-rules:</span></span><br><span class="line">        <span class="attr">ds0:</span></span><br><span class="line">          <span class="attr">slave-data-source-names:</span> <span class="string">s0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t_user 分表策略，固定分配至ds0 的t_user 真实表</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">       <span class="attr">t_user:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.t_order</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span> </span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>启动工程，可以看到m0和s0两个数据源初始化完毕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO 2616 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 2616 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br></pre></td></tr></table></figure><p>使用PostMan调用方法add2，执行写操作是在m0即主库中操作的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 2616 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: m0 ::: INSERT INTO t_order   (order_id, order_name, create_time) VALUES (?, ?, ?) ::: [1277540210028154881, 红米K30-24期免息, 2020-06-29 17:51:36.081]</span><br></pre></td></tr></table></figure><p>调用getOrder方法时，执行读操作是在s0即从库中操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 5188 --- [nio-8080-exec-4] ShardingSphere-SQL                       : Actual SQL: s0 ::: SELECT order_id,order_name,create_time FROM t_order WHERE order_id&#x3D;? ::: [1277540210028154881]</span><br></pre></td></tr></table></figure><p>因为MySQL配置是一主一从，在配置了一主多从的时候，只需要把数据源都配置之后，然后加入一下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.shardingsphere.masterslave.name</span>=<span class="string">ms</span></span><br><span class="line"><span class="comment">#负载均衡策略</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.load-balance-algorithm-type</span>=<span class="string">round_robin</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.master-data-source-name</span>=<span class="string">master</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.slave-data-source-names</span>=<span class="string">slave0,slave1</span></span><br></pre></td></tr></table></figure><h1 id="Sharding-Proxy的使用"><a href="#Sharding-Proxy的使用" class="headerlink" title="Sharding-Proxy的使用"></a>Sharding-Proxy的使用</h1><p>下载安装：<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/downloads/" target="_blank" rel="noopener">官网下载地址：4.x版本</a>，下载压缩包解压缩使用就行。</p><p>使用Docker安装，直接使用官方的镜像即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull apache&#x2F;sharding-proxy</span><br></pre></td></tr></table></figure><p>运行镜像生成容器，必须挂载配置路径到/opt/sharding-proxy/conf，在/opt/software/sharding/lib存放一个MySQL的连接驱动，Sharding-Proxy连接MySQL时用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sharding-proxy -di -v &#x2F;opt&#x2F;software&#x2F;sharding&#x2F;conf:&#x2F;opt&#x2F;sharding-proxy&#x2F;conf -v &#x2F;opt&#x2F;software&#x2F;sharding&#x2F;lib:&#x2F;opt&#x2F;sharding-proxy&#x2F;ext-lib -e PORT&#x3D;3308 -p13308:3308 apache&#x2F;sharding-proxy:latest</span><br></pre></td></tr></table></figure><p>修改conf里的配置文件</p><p>server.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># If you want to configure orchestration, authorization and proxy properties, please refer to this file.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># orchestration:</span></span><br><span class="line"><span class="comment">#  orchestration_ds:</span></span><br><span class="line"><span class="comment">#    orchestrationType: registry_center,config_center,distributed_lock_manager</span></span><br><span class="line"><span class="comment">#    instanceType: zookeeper</span></span><br><span class="line"><span class="comment">#    serverLists: localhost:2181</span></span><br><span class="line"><span class="comment">#    namespace: orchestration</span></span><br><span class="line"><span class="comment">#    props:</span></span><br><span class="line"><span class="comment">#      overwrite: false</span></span><br><span class="line"><span class="comment">#      retryIntervalMilliseconds: 500</span></span><br><span class="line"><span class="comment">#      timeToLiveSeconds: 60</span></span><br><span class="line"><span class="comment">#      maxRetries: 3</span></span><br><span class="line"><span class="comment">#      operationTimeoutMilliseconds: 500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line"> <span class="attr">users:</span></span><br><span class="line">   <span class="attr">root:</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">   <span class="attr">sharding:</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">sharding</span> </span><br><span class="line">     <span class="attr">authorizedSchemas:</span> <span class="string">sharding_db</span></span><br><span class="line"><span class="string">yml</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line"> <span class="attr">max.connections.size.per.query:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">acceptor.size:</span> <span class="number">16</span>  <span class="comment"># The default value is available processors count * 2.</span></span><br><span class="line"> <span class="attr">executor.size:</span> <span class="number">16</span>  <span class="comment"># Infinite by default.</span></span><br><span class="line"> <span class="attr">proxy.frontend.flush.threshold:</span> <span class="number">128</span>  <span class="comment"># The default value is 128.</span></span><br><span class="line">   <span class="comment"># LOCAL: Proxy will run with LOCAL transaction.</span></span><br><span class="line">   <span class="comment"># XA: Proxy will run with XA transaction.</span></span><br><span class="line">   <span class="comment"># BASE: Proxy will run with B.A.S.E transaction.</span></span><br><span class="line"> <span class="attr">proxy.transaction.type:</span> <span class="string">LOCAL</span></span><br><span class="line"> <span class="attr">proxy.opentracing.enabled:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">proxy.hint.enabled:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">query.with.cipher.column:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">sql.show:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">allow.range.query.with.inline.sharding:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>config-sharding.yml：配置数据分片策略。在配置文件中有两个数据库的配置：postgresql和MySQL，使用MySQL需要添加mysql的驱动包到lib，在Docker部署Sharding-Proxy容器的时候就已经添加了该jar包。配置和之前Sharding-JDBC的一些配置相似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">######################################################################################################</span><br><span class="line">#</span><br><span class="line"># If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.</span><br><span class="line">#</span><br><span class="line">######################################################################################################</span><br><span class="line"></span><br><span class="line">schemaName: sharding_db</span><br><span class="line"></span><br><span class="line">dataSources:</span><br><span class="line"> ds_0:</span><br><span class="line">   url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;demo_ds_0?serverTimezone&#x3D;UTC&amp;useSSL&#x3D;false</span><br><span class="line">   username: root</span><br><span class="line">   password:</span><br><span class="line">   connectionTimeoutMilliseconds: 30000</span><br><span class="line">   idleTimeoutMilliseconds: 60000</span><br><span class="line">   maxLifetimeMilliseconds: 1800000</span><br><span class="line">   maxPoolSize: 50</span><br><span class="line"> ds_1:</span><br><span class="line">   url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;demo_ds_1?serverTimezone&#x3D;UTC&amp;useSSL&#x3D;false</span><br><span class="line">   username: root</span><br><span class="line">   password:</span><br><span class="line">   connectionTimeoutMilliseconds: 30000</span><br><span class="line">   idleTimeoutMilliseconds: 60000</span><br><span class="line">   maxLifetimeMilliseconds: 1800000</span><br><span class="line">   maxPoolSize: 50</span><br><span class="line"></span><br><span class="line">shardingRule:</span><br><span class="line"> tables:</span><br><span class="line">   t_order:</span><br><span class="line">     actualDataNodes: ds_$&#123;0..1&#125;.t_order_$&#123;0..1&#125;</span><br><span class="line">     tableStrategy:</span><br><span class="line">       inline:</span><br><span class="line">         shardingColumn: order_id</span><br><span class="line">         algorithmExpression: t_order_$&#123;order_id % 2&#125;</span><br><span class="line">     keyGenerator:</span><br><span class="line">       type: SNOWFLAKE</span><br><span class="line">       column: order_id</span><br><span class="line">   t_order_item:</span><br><span class="line">     actualDataNodes: ds_$&#123;0..1&#125;.t_order_item_$&#123;0..1&#125;</span><br><span class="line">     tableStrategy:</span><br><span class="line">       inline:</span><br><span class="line">         shardingColumn: order_id</span><br><span class="line">         algorithmExpression: t_order_item_$&#123;order_id % 2&#125;</span><br><span class="line">     keyGenerator:</span><br><span class="line">       type: SNOWFLAKE</span><br><span class="line">       column: order_item_id</span><br><span class="line"> bindingTables:</span><br><span class="line">   - t_order,t_order_item</span><br><span class="line"> defaultDatabaseStrategy:</span><br><span class="line">   inline:</span><br><span class="line">     shardingColumn: user_id</span><br><span class="line">     algorithmExpression: ds_$&#123;user_id % 2&#125;</span><br><span class="line"> defaultTableStrategy:</span><br><span class="line">   none:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Apache顶级项目分布式数据库中间件ShardingSphere
    
    </summary>
    
    
      <category term="中间件" scheme="https://www.maishuren.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="ShardingSphere" scheme="https://www.maishuren.top/tags/ShardingSphere/"/>
    
  </entry>
  
  <entry>
    <title>大数据之hadoop：分布式文件系统HDFS</title>
    <link href="https://www.maishuren.top/posts/hadoop/2020/06/202006261023.html"/>
    <id>https://www.maishuren.top/posts/hadoop/2020/06/202006261023.html</id>
    <published>2020-06-26T02:23:16.000Z</published>
    <updated>2020-12-16T14:09:57.470Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HDFS概述"><a href="#HDFS概述" class="headerlink" title="HDFS概述"></a>HDFS概述</h1><h2 id="HDFS定义"><a href="#HDFS定义" class="headerlink" title="HDFS定义"></a>HDFS定义</h2><p>HDFS是一个文件系统，用于存储文件，荣国目录树来定义文件；其次，他是分布式的，又很多服务器联合实现其功能，集群中的服务器有各自的角色。</p><p>HDFS的使用场景：适合一次性读写，多次读出的场景，且不支持文件的修改。适合用来做数据分析，不适合频繁修改的网盘应用。</p><h2 id="HDFS的优缺点"><a href="#HDFS的优缺点" class="headerlink" title="HDFS的优缺点"></a>HDFS的优缺点</h2><ol><li><p>优点</p><ul><li><p>高容错性</p><p>数据自动保存多个副本。通过增加副本的形式，提高容错性。</p><p>某个副本丢失后，可以自动恢复</p></li><li><p>适合大数据</p><p>能够处理数据规模达到GB、TB、甚至PB级别的数据。</p><p>能够处理百万规模以上的文件数量。</p></li><li><p>可构建在连接机器上，通过多副本机制，提高可靠性</p></li></ul></li><li><p>缺点</p><ul><li><p>不适合低时延数据访问，比如毫秒级的存储数据，是做不到的</p></li><li><p>无法高效的对大量小文件进行存储</p><p>存储大量小文件的话，会占用NameNode大量的内存，来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限制的。</p><p>小文件存储的寻址事件会超过读取时间，违反了HDFS的设计目标</p></li><li><p>不支持并发写入和文件随机修改</p><p>一个文件只能有一个写，不允许多个线程同时写</p><p>仅支持数据追加，不支持文件的随机修改</p></li></ul></li></ol><h2 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hdfs-architecture.jpg" alt=""></p><ol><li>NameNode：就是Master，是管理者。<ul><li>管理HDFS的名称空间</li><li>配置副本策略</li><li>管理数据块映射信息</li><li>处理客户端读写请求</li></ul></li><li>DataNode：就是Slave，NameNode下达命令，DataNode执行实际的操作<ul><li>存储实际的数据块</li><li>执行数据块的读/写操作</li></ul></li><li>Client：客户端<ul><li>文件切分。文件上传HDFS的时候，Client将文件切分成一个个的Block，然后进行上传</li><li>与NameNode交互，获取文件的位置信息</li><li>与DataNode交互，读取或者写入数据</li><li>Client提供一些命令来管理HDFS，比如NameNode格式化</li><li>Client可以通过一些命令来访问HDFS，比如对HDFS增删查改操作</li></ul></li><li>Secondary NameNode：并非NameNode的热备。当NameNode挂掉了，它并不能马上替换NameNode并提供服务<ul><li>服务NameNode，分担其工作量，比如定期合并Fsimage和Edits，并推送给NameNode</li><li>在紧急情况下，可辅助恢复NameNode</li></ul></li></ol><h2 id="HDFS文件块大小"><a href="#HDFS文件块大小" class="headerlink" title="HDFS文件块大小"></a>HDFS文件块大小</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/hadoop/hdfs-storage.png" alt=""></p><p>HDFS中的文件在物理上是分块（Block）存储的，块的大小可以通过配置参数（dfs.blocksize）来配置，默认大小在Hadoop2中是128M，老版本是64M</p><p>HDFS的块大小配置太小会增加寻址时间，程序一直在找块的开始位置，如果设置太大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理这块数据时，会非常慢。所以HDFS块的大小设置主要取决去磁盘的传输速率</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://www.maishuren.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="https://www.maishuren.top/tags/hadoop/"/>
    
      <category term="HDFS" scheme="https://www.maishuren.top/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Algolia的ApiKey使用异常</title>
    <link href="https://www.maishuren.top/posts/bug-log/2020/06/202006251725.html"/>
    <id>https://www.maishuren.top/posts/bug-log/2020/06/202006251725.html</id>
    <published>2020-06-25T09:25:24.000Z</published>
    <updated>2020-12-07T14:56:50.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h1><p>第一次的使用Algolia作为博客的搜索系统，一开始设置的时候没怎么关注。在后面写了很多文章想要跟新一下Algolia的索引的时候，除了问题，网站根本搜索不了，起了官网一看发现索引过期了，再去看一下邮箱，发现了之前不注意到一封邮件。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia.jpg" alt=""></p><p>所以重新修改使用计划，重新选择社区版</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia2.jpg" alt=""></p><h1 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h1><p>在重新生成索引的时候，出现错误：没有足够的权限去更新索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hexo-algolia] Not enough rights to update an object near line:1 column:721</span><br></pre></td></tr></table></figure><p>在Algolia的控制台中的API Keys中可以看到，因为一开始在博客的配置中是使用Search-Only API key，只能够搜索，不能进行更新索引，这个API Key没有足够权限，然后又发现是因为初始化就有的key，不能对其ACL进行修改。那只能新增一个Key。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia3.jpg" alt=""></p><p>点击<code>New Api Key</code></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia4.jpg" alt=""></p><p>选择权限</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia5.jpg" alt=""></p><p>最后在生成索引的时候，使用新生成的，有足够权限的API Key</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="踩坑日志" scheme="https://www.maishuren.top/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法：栈</title>
    <link href="https://www.maishuren.top/posts/datastructure/2020/06/202006231844.html"/>
    <id>https://www.maishuren.top/posts/datastructure/2020/06/202006231844.html</id>
    <published>2020-06-23T10:44:45.000Z</published>
    <updated>2020-10-28T16:09:20.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><ul><li>栈是一种特殊的线性表，只能在一端进行操作</li><li>往栈中添加元素的操作，一般叫做 push，入栈</li><li>从栈中移除元素的操作，一般叫做 pop，出栈（只能移除栈顶元素，也叫做：弹出栈顶元素）</li><li>后进先出的原则，Last In First Out，LIFO</li></ul><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/19.png" alt="进栈"></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/20.png" alt="出栈"></p><h1 id="栈的接口设计"><a href="#栈的接口设计" class="headerlink" title="栈的接口设计"></a>栈的接口设计</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> MyList&lt;E&gt; list = <span class="keyword">new</span> DynamicArrayListV2&lt;E&gt;();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 清空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">list.clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 元素数量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 是否为空</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 入栈</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">list.add(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 出栈</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.remove(list.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取栈顶元素</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈的应用：leetcode算法题"><a href="#栈的应用：leetcode算法题" class="headerlink" title="栈的应用：leetcode算法题"></a>栈的应用：leetcode算法题</h1><p>题目：给定一个包含’(‘，’)’，’{‘，’}’，’[‘，’]’的字符串，是否有效。</p><p>满足条件：1.左括号必须用相同类型的右括号闭合  2.左括号必须以正确的顺序闭合</p><p>示例1：</p><p>输入：”()”</p><p>输出：true</p><p>示例2：</p><p>输入：”()[]{}” </p><p>输出：true</p><p>示例3：</p><p>输入：”(]”</p><p>输出：false</p><p>示例4：</p><p>输入：”([)]”</p><p>输出：fasle</p><p>示例5：</p><p>输入：”{[]}”</p><p>输出：true</p><ol><li>遇见左字符，将左字符入栈</li><li>遇见右字符<br>如果栈是空的，说明括号无效<br>如果栈不为空，将栈顶字符出栈，与右字符之匹配<br>✓ 如果左右字符不匹配，说明括号无效<br>✓ 如果左右字符匹配，继续扫描下一个字符</li><li>所有字符扫描完毕后<br>✓ 栈为空，说明括号有效<br>✓ 栈不为空，说明括号无效</li></ol><p><strong>解法之一（使用栈）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test20</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"([)]"</span>;</span><br><span class="line">        Test20 test20 = <span class="keyword">new</span> Test20();</span><br><span class="line">        System.out.println(test20.isValid(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : chars) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">')'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'['</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">']'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || c != stack.pop()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="https://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="https://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：链表</title>
    <link href="https://www.maishuren.top/posts/datastructure/2020/06/202006231045.html"/>
    <id>https://www.maishuren.top/posts/datastructure/2020/06/202006231045.html</id>
    <published>2020-06-23T02:45:43.000Z</published>
    <updated>2020-06-26T15:10:35.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h1><ul><li>动态数组有个明显的缺点</li><li>可能会造成内存空间的大量浪费</li><li>链表可以办到用到多少就申请多少内存</li><li>链表是一种链式存储的线性表，所有元素的内存地址不一定是连续的</li></ul><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/10.jpg" alt=""></p><h2 id="链表的设计"><a href="#链表的设计" class="headerlink" title="链表的设计"></a>链表的设计</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/11.jpg" alt=""></p><p>链表的方法都和动态数组的方法一致，所以两者通过继承AbstractList，重写方法实现各自的功能。</p><h2 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/12.jpg" alt=""></p><h2 id="指定索引位置添加元素"><a href="#指定索引位置添加元素" class="headerlink" title="指定索引位置添加元素"></a>指定索引位置添加元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/13.jpg" alt=""></p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/14.jpg" alt=""></p><h2 id="虚拟头节点"><a href="#虚拟头节点" class="headerlink" title="虚拟头节点"></a>虚拟头节点</h2><p>有时候为了让代码更加精简，统一所有节点的处理逻辑，可以在最前面增加一个虚拟的头结点（不存储数据）。因为在边界(index=0)，这个位置的一些操作是要格外的注意，增加了虚拟头节点之后，这些操作便可以统一处理。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/15.jpg" alt=""></p><h2 id="代码实现：单向链表"><a href="#代码实现：单向链表" class="headerlink" title="代码实现：单向链表"></a>代码实现：单向链表</h2><p>顶层接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元数数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断列表是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单向链表实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//虚拟头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev = index == <span class="number">0</span> ? first : node(index - <span class="number">1</span>);</span><br><span class="line">        prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev = index == <span class="number">0</span> ? first : node(index - <span class="number">1</span>);</span><br><span class="line">        Node&lt;E&gt; node = prev.next;</span><br><span class="line">        prev.next = node.next;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node.element);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h1><p>单向循环链表就是单项链表的尾元素的next指向头元素</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/17.jpg" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.datastructure.linklist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 虚拟头节点：单项循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/24 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleCircleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(element).append(<span class="string">"_"</span>).append(next.element);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; newFirst = <span class="keyword">new</span> Node&lt;&gt;(element, first);</span><br><span class="line">            <span class="comment">// 拿到最后一个节点</span></span><br><span class="line">            Node&lt;E&gt; last = (size == <span class="number">0</span>) ? newFirst : node(size - <span class="number">1</span>);</span><br><span class="line">            last.next = newFirst;</span><br><span class="line">            first = newFirst;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">                first = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;E&gt; last = node(size - <span class="number">1</span>);</span><br><span class="line">                first = first.next;</span><br><span class="line">                last.next = first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            node = prev.next;</span><br><span class="line">            prev.next = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/16.jpg" alt=""></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="comment">// 往最后面添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            Node&lt;E&gt; oldLast = last;</span><br><span class="line">            last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 这是链表添加的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = last;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oldLast.next = last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = next.prev;</span><br><span class="line">            Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev, element, next);</span><br><span class="line">            next.prev = node;</span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        Node&lt;E&gt; prev = node.prev;</span><br><span class="line">        Node&lt;E&gt; next = node.next;</span><br><span class="line">        <span class="comment">// index == 0，第一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// index == size - 1，最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="comment">//1.如果index小于链表容量的一半，则从首元素开始向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.index大于链表容量的一半，从尾元素向前查找</span></span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(prev.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"_"</span>).append(element).append(<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(next.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/18.jpg" alt=""></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; current;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        current = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current = current.next;</span><br><span class="line">        <span class="keyword">return</span> current.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next = current.next;</span><br><span class="line">        E element = remove(current);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="comment">// 往最后面添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            Node&lt;E&gt; oldLast = last;</span><br><span class="line">            last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, first);</span><br><span class="line">            <span class="comment">// 这是链表添加的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = last;</span><br><span class="line">                first.next = first;</span><br><span class="line">                first.prev = first;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oldLast.next = last;</span><br><span class="line">                first.prev = last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = next.prev;</span><br><span class="line">            Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev, element, next);</span><br><span class="line">            next.prev = node;</span><br><span class="line">            prev.next = node;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (next == first) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> remove(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">remove</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node.prev;</span><br><span class="line">            Node&lt;E&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (node == first) &#123;</span><br><span class="line">                first = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// index == size - 1</span></span><br><span class="line">            <span class="keyword">if</span> (node == last) &#123;</span><br><span class="line">                last = prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.如果index小于链表容量的一半，则从首元素开始向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.index大于链表容量的一半，从尾元素向前查找</span></span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(prev.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"_"</span>).append(element).append(<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(next.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="https://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="https://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：动态数组</title>
    <link href="https://www.maishuren.top/posts/datastructure/2020/06/202006230937.html"/>
    <id>https://www.maishuren.top/posts/datastructure/2020/06/202006230937.html</id>
    <published>2020-06-23T01:37:40.000Z</published>
    <updated>2020-06-26T15:09:53.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h1><p>数据结构是计算机存储、组织数据的方式。常见的数据结构如下：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/3.jpg" alt=""></p><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是具有 n 个<strong>相同类型元素</strong>的<strong>有限序列</strong>（ n ≥ 0 ）</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/4.jpg" alt=""></p><p>常见的线性表有：</p><ul><li>数组</li><li>链表</li><li>栈</li><li>队列</li><li>哈希表（散列表）</li></ul><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组是一种顺序存储的线性表，所有元素的内存地址是连续的。在很多编程语言中，数组都有个致命的缺点，无法动态修改容量，实际开发中，我们更希望数组的容量是可以动态改变的。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/5.jpg" alt=""></p><h1 id="动态数组接口设计"><a href="#动态数组接口设计" class="headerlink" title="动态数组接口设计"></a>动态数组接口设计</h1><p>◼ int size();                                         // 元素的数量<br>◼ boolean isEmpty();                       // 是否为空<br>◼ boolean contains(E element);    // 是否包含某个元素<br>◼ void add(E element);                   // 添加元素到最后面<br>◼ E get(int index);                            // 返回index位置对应的元素<br>◼ E set(int index, E element);        // 设置index位置的元素<br>◼ void add(int index, E element); // 往index位置添加元素<br>◼ E remove(int index);                   // 删除index位置对应的元素<br>◼ int indexOf(E element);             // 查看元素的位置<br>◼ void clear();                                 // 清除所有元素</p><h1 id="动态数组设计"><a href="#动态数组设计" class="headerlink" title="动态数组设计"></a>动态数组设计</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/6.jpg" alt=""></p><h2 id="添加元素：add-E-element"><a href="#添加元素：add-E-element" class="headerlink" title="添加元素：add(E element)"></a>添加元素：add(E element)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/7.jpg" alt=""></p><h2 id="删除元素：remove-int-index"><a href="#删除元素：remove-int-index" class="headerlink" title="删除元素：remove(int index)"></a>删除元素：remove(int index)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/8.jpg" alt=""></p><h2 id="指定索引位置添加元素：-add-int-index-E-element"><a href="#指定索引位置添加元素：-add-int-index-E-element" class="headerlink" title="指定索引位置添加元素： add(int index, E element)"></a>指定索引位置添加元素： add(int index, E element)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/9.jpg" alt=""></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>把原动态数组复制到新的动态组数(比原数组的容量大)</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>MyList接口：定义要实现的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元数数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断列表是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyAbstractList：抽象类，实现接口MyList一些通用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态数组的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicArrayListV3</span><span class="params">(<span class="keyword">int</span> capaticy)</span> </span>&#123;</span><br><span class="line">        capaticy = (capaticy &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capaticy;</span><br><span class="line">        elements = (E[]) <span class="keyword">new</span> Object[capaticy];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicArrayListV3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅供参考</span></span><br><span class="line">        <span class="keyword">if</span> (elements != <span class="keyword">null</span> &amp;&amp; elements.length &gt; DEFAULT_CAPACITY) &#123;</span><br><span class="line">            elements = (E[]) <span class="keyword">new</span> Object[DEFAULT_CAPACITY];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">// O(1)</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elements[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123; <span class="comment">// O(1)</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最好：O(1)</span></span><br><span class="line"><span class="comment">         * 最坏：O(n)</span></span><br><span class="line"><span class="comment">         * 平均：O(n)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">            elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125; <span class="comment">// size是数据规模</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最好：O(1)</span></span><br><span class="line"><span class="comment">         * 最坏：O(n)</span></span><br><span class="line"><span class="comment">         * 平均：O(n)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        <span class="comment">//index后面的元素往前移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//原尾元素置空</span></span><br><span class="line">        elements[--size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(elements[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的2倍</span></span><br><span class="line">        <span class="comment">// int newCapacity = oldCapacity &lt;&lt; 1;</span></span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 30</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="comment">// 15</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; (newCapacity) || oldCapacity &lt;= DEFAULT_CAPACITY) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剩余空间还很多</span></span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"缩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// size=3, [99, 88, 77]</span></span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            string.append(elements[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Java中也有动态数组的实现ArrayList，本文的动态数组也是模仿jdk实现的ArrayList。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="https://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="https://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：时间复杂度</title>
    <link href="https://www.maishuren.top/posts/datastructure/2020/06/202006230817.html"/>
    <id>https://www.maishuren.top/posts/datastructure/2020/06/202006230817.html</id>
    <published>2020-06-23T00:17:20.000Z</published>
    <updated>2020-06-26T15:10:05.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="如何评判一个算法的好坏？"><a href="#如何评判一个算法的好坏？" class="headerlink" title="如何评判一个算法的好坏？"></a>如何评判一个算法的好坏？</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        result+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果单从执行效率上进行评估，可能会想到这么一种方案。比较不同算法对同一组输入的执行处理时间，这种方案也叫做：事后统计法</li><li>上述方案有比较明显的缺点<ul><li>执行时间严重依赖硬件以及运行时各种不确定的环境因素</li><li>必须编写相应的测算代码</li><li>测试数据的选择比较难保证公正性</li></ul></li><li>一般从以下维度来评估算法的优劣<ul><li>正确性、可读性、健壮性（对不合理输入的反应能力和处理能力）</li><li>时间复杂度（time complexity）：估算程序指令的执行次数（执行时间）</li><li>空间复杂度（space complexity）：估算所需占用的存储空间</li></ul></li></ul><h1 id="大O表示法（Big-O）"><a href="#大O表示法（Big-O）" class="headerlink" title="大O表示法（Big O）"></a>大O表示法（Big O）</h1><ul><li>一般用大O表示法来描述复杂度，它表示的是数据规模 n 对应的复杂度</li><li>忽略常数、系数、低阶</li><li>9 &gt;&gt; O(1)</li><li>2n + 3 &gt;&gt; O(n)</li><li>n² + 2n + 6 &gt;&gt; O(n 2 )</li><li>4n ³ + 3n²+ 22n + 100 &gt;&gt; O(n³)</li><li>写法上，n³ 等价于 n^3</li><li>注意：大O表示法仅仅是一种粗略的分析模型，是一种估算，能帮助我们短时间内了解一个算法的执行效率</li></ul><h1 id="对数阶的细节"><a href="#对数阶的细节" class="headerlink" title="对数阶的细节"></a>对数阶的细节</h1><p>对数阶一般省略底数，不管是怎么以什么为底的对数，都是可以乘以一个<strong>常数</strong>，最后转化为以2为底的对数。所以在计算时间复杂度时，对数都统称为logn。<br>$$<br>\log_2n=\log_29*log_9n<br>$$</p><h1 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h1><table><thead><tr><th>执行次数</th><th>复杂度</th><th>非正式术语</th></tr></thead><tbody><tr><td>12</td><td>O(1)</td><td>常数阶</td></tr><tr><td>3n+1</td><td>O(n)</td><td>线性阶</td></tr><tr><td>2n^2+5n+6</td><td>O(n^2)</td><td>平方阶</td></tr><tr><td>4log_2n+25</td><td>O(logn)</td><td>对数阶</td></tr><tr><td>3n+2nlog_3n+15</td><td>O(nlogn)</td><td>nlogn阶</td></tr><tr><td>4n^3+3n^2+22n+10</td><td>O(n^3)</td><td>立方阶</td></tr><tr><td>2^n</td><td>O(2^n)</td><td>指数阶</td></tr></tbody></table><p>查看函数图像的网站：<a href="https://zh.numberempire.com/graphingcalculator.php" target="_blank" rel="noopener">https://zh.numberempire.com/graphingcalculator.php</a></p><h1 id="数据规模对比"><a href="#数据规模对比" class="headerlink" title="数据规模对比"></a>数据规模对比</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/2.jpg" alt=""></p><h1 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h1><p>斐波那契数列，下面有两种解法。递归和非递归。其实可以发现递归的时间复杂度是更高的，当是具规模越大的时候，递归就会越耗时。所以一般都不要使用递归，但是使用了递归也是可以优化的，例如：尾递归，备忘录优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#时间复杂度O(2^n)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> fib1(n-<span class="number">2</span>)+fib(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#时间复杂度O(n)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        second+=first;</span><br><span class="line">        first=second+first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多个数据规模的情况"><a href="#多个数据规模的情况" class="headerlink" title="多个数据规模的情况"></a>多个数据规模的情况</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n+k)</p><h1 id="算法的优化方向"><a href="#算法的优化方向" class="headerlink" title="算法的优化方向"></a>算法的优化方向</h1><ul><li>用尽量少的存储空间</li><li>用尽量少的执行时间</li><li>空间换时间 OR 时间换空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="https://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="https://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="https://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Go Web编程学习一：接受请求</title>
    <link href="https://www.maishuren.top/posts/golang/2020/06/202006212020.html"/>
    <id>https://www.maishuren.top/posts/golang/2020/06/202006212020.html</id>
    <published>2020-06-21T12:20:07.000Z</published>
    <updated>2021-02-02T15:01:59.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Go开发web服务器：接收请求"><a href="#Go开发web服务器：接收请求" class="headerlink" title="Go开发web服务器：接收请求"></a>Go开发web服务器：接收请求</h1><h2 id="Go的net-http标准库"><a href="#Go的net-http标准库" class="headerlink" title="Go的net/http标准库"></a>Go的net/http标准库</h2><ol><li>net/http 标准库的各个组成部分：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/go-net-http.jpg" alt="go-http"></p><ol start="2"><li>Go服务器的处理请求：</li></ol><p>在启动了一个http服务器之后，就可以就收客户端发过来的请求，进行处理并相应。<code>net/http</code>标准库还提供了一个连接多路复用器的接口以及一个默认实现了的多路复用器。多路复用器根据客户端的请求路径，找到对应的处理器，处理器就会进行一系列的操作。最后把处理结果通过模板引擎在模板上显示。</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/handle-http.jpg" alt=""></p><h2 id="使用net-http标准库搭建一个简单web服务器"><a href="#使用net-http标准库搭建一个简单web服务器" class="headerlink" title="使用net/http标准库搭建一个简单web服务器"></a>使用net/http标准库搭建一个简单web服务器</h2><p>新建一个server.go以下代码。然后运行，在浏览器上访问<a href="http://localhost:8080，浏览器上就会出现一个空白页。至此一个简单地web服务器就这样搭建成功了。对比于Java">http://localhost:8080，浏览器上就会出现一个空白页。至此一个简单地web服务器就这样搭建成功了。对比于Java</a> Web，在搭建的时候还要使用Servlet，然后面向对象，需要写的代码量比Go会多很多。所以说Go比较适合做网络应用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">Handler: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line">err := server.ListenAndServe()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<code>http.Server</code>的详细配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Http服务器的运行参数</span></span><br><span class="line"><span class="comment">// 服务器的零值是有效配置</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Addr可以选择以“ host：port”的形式指定服务器侦听的TCP地址。如果为空，则使用“：http”（端口80）</span></span><br><span class="line"><span class="comment">// 有关地址格式的详细信息，请参见net.Dial</span></span><br><span class="line">Addr <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用的处理程序，如果为nil，则为http.DefaultServeMux</span></span><br><span class="line">Handler Handler </span><br><span class="line"></span><br><span class="line"><span class="comment">// TLSConfig optionally provides a TLS configuration for use</span></span><br><span class="line"><span class="comment">// by ServeTLS and ListenAndServeTLS. Note that this value is</span></span><br><span class="line"><span class="comment">// cloned by ServeTLS and ListenAndServeTLS, so it's not</span></span><br><span class="line"><span class="comment">// possible to modify the configuration with methods like</span></span><br><span class="line"><span class="comment">// tls.Config.SetSessionTicketKeys. To use</span></span><br><span class="line"><span class="comment">// SetSessionTicketKeys, use Server.Serve with a TLS Listener</span></span><br><span class="line"><span class="comment">// instead.</span></span><br><span class="line">TLSConfig *tls.Config</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadTimeout is the maximum duration for reading the entire</span></span><br><span class="line"><span class="comment">// request, including the body.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Because ReadTimeout does not let Handlers make per-request</span></span><br><span class="line"><span class="comment">// decisions on each request body's acceptable deadline or</span></span><br><span class="line"><span class="comment">// upload rate, most users will prefer to use</span></span><br><span class="line"><span class="comment">// ReadHeaderTimeout. It is valid to use them both.</span></span><br><span class="line">ReadTimeout time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadHeaderTimeout is the amount of time allowed to read</span></span><br><span class="line"><span class="comment">// request headers. The connection's read deadline is reset</span></span><br><span class="line"><span class="comment">// after reading the headers and the Handler can decide what</span></span><br><span class="line"><span class="comment">// is considered too slow for the body. If ReadHeaderTimeout</span></span><br><span class="line"><span class="comment">// is zero, the value of ReadTimeout is used. If both are</span></span><br><span class="line"><span class="comment">// zero, there is no timeout.</span></span><br><span class="line">ReadHeaderTimeout time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// WriteTimeout is the maximum duration before timing out</span></span><br><span class="line"><span class="comment">// writes of the response. It is reset whenever a new</span></span><br><span class="line"><span class="comment">// request's header is read. Like ReadTimeout, it does not</span></span><br><span class="line"><span class="comment">// let Handlers make decisions on a per-request basis.</span></span><br><span class="line">WriteTimeout time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// IdleTimeout is the maximum amount of time to wait for the</span></span><br><span class="line"><span class="comment">// next request when keep-alives are enabled. If IdleTimeout</span></span><br><span class="line"><span class="comment">// is zero, the value of ReadTimeout is used. If both are</span></span><br><span class="line"><span class="comment">// zero, there is no timeout.</span></span><br><span class="line">IdleTimeout time.Duration</span><br><span class="line"></span><br><span class="line"><span class="comment">// MaxHeaderBytes controls the maximum number of bytes the</span></span><br><span class="line"><span class="comment">// server will read parsing the request header's keys and</span></span><br><span class="line"><span class="comment">// values, including the request line. It does not limit the</span></span><br><span class="line"><span class="comment">// size of the request body.</span></span><br><span class="line"><span class="comment">// If zero, DefaultMaxHeaderBytes is used.</span></span><br><span class="line">MaxHeaderBytes <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TLSNextProto optionally specifies a function to take over</span></span><br><span class="line"><span class="comment">// ownership of the provided TLS connection when an ALPN</span></span><br><span class="line"><span class="comment">// protocol upgrade has occurred. The map key is the protocol</span></span><br><span class="line"><span class="comment">// name negotiated. The Handler argument should be used to</span></span><br><span class="line"><span class="comment">// handle HTTP requests and will initialize the Request's TLS</span></span><br><span class="line"><span class="comment">// and RemoteAddr if not already set. The connection is</span></span><br><span class="line"><span class="comment">// automatically closed when the function returns.</span></span><br><span class="line"><span class="comment">// If TLSNextProto is not nil, HTTP/2 support is not enabled</span></span><br><span class="line"><span class="comment">// automatically.</span></span><br><span class="line">TLSNextProto <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(*Server, *tls.Conn, Handler)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConnState specifies an optional callback function that is</span></span><br><span class="line"><span class="comment">// called when a client connection changes state. See the</span></span><br><span class="line"><span class="comment">// ConnState type and associated constants for details.</span></span><br><span class="line">ConnState <span class="function"><span class="keyword">func</span><span class="params">(net.Conn, ConnState)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ErrorLog specifies an optional logger for errors accepting</span></span><br><span class="line"><span class="comment">// connections, unexpected behavior from handlers, and</span></span><br><span class="line"><span class="comment">// underlying FileSystem errors.</span></span><br><span class="line"><span class="comment">// If nil, logging is done via the log package's standard logger.</span></span><br><span class="line">ErrorLog *log.Logger</span><br><span class="line"></span><br><span class="line"><span class="comment">// BaseContext optionally specifies a function that returns</span></span><br><span class="line"><span class="comment">// the base context for incoming requests on this server.</span></span><br><span class="line"><span class="comment">// The provided Listener is the specific Listener that's</span></span><br><span class="line"><span class="comment">// about to start accepting requests.</span></span><br><span class="line"><span class="comment">// If BaseContext is nil, the default is context.Background().</span></span><br><span class="line"><span class="comment">// If non-nil, it must return a non-nil context.</span></span><br><span class="line">BaseContext <span class="function"><span class="keyword">func</span><span class="params">(net.Listener)</span> <span class="title">context</span>.<span class="title">Context</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ConnContext optionally specifies a function that modifies</span></span><br><span class="line"><span class="comment">// the context used for a new connection c. The provided ctx</span></span><br><span class="line"><span class="comment">// is derived from the base context and has a ServerContextKey</span></span><br><span class="line"><span class="comment">// value.</span></span><br><span class="line">ConnContext <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, c net.Conn)</span> <span class="title">context</span>.<span class="title">Context</span></span></span><br><span class="line"></span><br><span class="line">disableKeepAlives <span class="keyword">int32</span>     <span class="comment">// accessed atomically.</span></span><br><span class="line">inShutdown        <span class="keyword">int32</span>     <span class="comment">// accessed atomically (non-zero means we're in Shutdown)</span></span><br><span class="line">nextProtoOnce     sync.Once <span class="comment">// guards setupHTTP2_* init</span></span><br><span class="line">nextProtoErr      error     <span class="comment">// result of http2.ConfigureServer if used</span></span><br><span class="line"></span><br><span class="line">mu         sync.Mutex</span><br><span class="line">listeners  <span class="keyword">map</span>[*net.Listener]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">activeConn <span class="keyword">map</span>[*conn]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">doneChan   <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">onShutdown []<span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搭建一个提供https服务的服务器</p><ol><li><p>生成SSL证书和私钥</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/rand"</span></span><br><span class="line"><span class="string">"crypto/rsa"</span></span><br><span class="line"><span class="string">"crypto/x509"</span></span><br><span class="line"><span class="string">"crypto/x509/pkix"</span></span><br><span class="line"><span class="string">"encoding/pem"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">max := <span class="built_in">new</span>(big.Int).Lsh(big.NewInt(<span class="number">1</span>), <span class="number">128</span>)</span><br><span class="line">serialNumber, _ := rand.Int(rand.Reader, max)</span><br><span class="line">subject := pkix.Name&#123;</span><br><span class="line">Organization:       []<span class="keyword">string</span>&#123;<span class="string">"com.msr"</span>&#125;,</span><br><span class="line">OrganizationalUnit: []<span class="keyword">string</span>&#123;<span class="string">"better"</span>&#125;,</span><br><span class="line">CommonName:         <span class="string">"go web"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template := x509.Certificate&#123;</span><br><span class="line">SerialNumber: serialNumber,</span><br><span class="line">Subject:      subject,</span><br><span class="line">NotBefore:    time.Now(),</span><br><span class="line">NotAfter:     time.Now().Add(<span class="number">365</span> * <span class="number">24</span> * time.Hour),</span><br><span class="line">KeyUsage:     x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,</span><br><span class="line">ExtKeyUsage:  []x509.ExtKeyUsage&#123;x509.ExtKeyUsageServerAuth&#125;,</span><br><span class="line">IPAddresses:  []net.IP&#123;net.ParseIP(<span class="string">"127.0.0.1"</span>)&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pk, _ := rsa.GenerateKey(rand.Reader, <span class="number">2048</span>)</span><br><span class="line"></span><br><span class="line">derBytes, _ := x509.CreateCertificate(rand.Reader, &amp;template, &amp;template, &amp;pk.PublicKey, pk)</span><br><span class="line">certOut, _ := os.Create(<span class="string">"cert.pem"</span>)</span><br><span class="line">pem.Encode(certOut, &amp;pem.Block&#123;Type: <span class="string">"CERTIFICATE"</span>, Bytes: derBytes&#125;)</span><br><span class="line">certOut.Close()</span><br><span class="line"></span><br><span class="line">keyOut, _ := os.Create(<span class="string">"key.pem"</span>)</span><br><span class="line">pem.Encode(keyOut, &amp;pem.Block&#123;Type: <span class="string">"RSA PRIVATE KEY"</span>, Bytes: x509.MarshalPKCS1PrivateKey(pk)&#125;)</span><br><span class="line">keyOut.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用https，启动运行。访问<a href="https://localhost:8080" target="_blank" rel="noopener">https://localhost:8080</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span><span class="string">",</span></span><br><span class="line"><span class="string">Handler: nil,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">err := server.ListenAndServeTLS("</span>cert.pem<span class="string">", "</span>key.pom<span class="string">")</span></span><br><span class="line"><span class="string">if err != nil &#123;</span></span><br><span class="line"><span class="string">fmt.Println(err.Error())</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="处理器和处理函数"><a href="#处理器和处理函数" class="headerlink" title="处理器和处理函数"></a>处理器和处理函数</h2><p><strong>处理器：</strong></p><p>Web应用中的处理器除了要接收和处理客户端发来的请求，还需要调用模板引擎，然后由模板引擎生成HTML并把数据填充到要回传到客户端的响应报文中。在<code>net/http</code>库中，一个处理器就是拥有一个ServeHTTP方法，这个方法一个参数是ResponseWriter 接口，而第二个参数则是一个指向Request 结构的指针。换句话说，任何接口只要拥有一个ServeHTTP 方法，并且该方法带有以下签名（signature），那么它就是一个处理器。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServeHTTP(w ResponseWriter, r *Request)</span><br></pre></td></tr></table></figure><h3 id="自定义Handler处理请求"><a href="#自定义Handler处理请求" class="headerlink" title="自定义Handler处理请求"></a>自定义Handler处理请求</h3><p>创建了一个处理器并将它与服务器进行了绑定，以此来代替原本正在使用的默认多路复用器。这意味着服务器不会再通过URL匹配来将请求路由至不同的处理器，而是直接使用同一个处理器来处理所有请求，因此无论浏览器访问什么地址，服务器返回的都是同样的<code>Hello World！</code>响应。很显然这不是常用的方法。</p><p>这也是我们在Web应用中使用多路复用器的原因：对某些特殊用途的服务器来说，只使用一个处理器也许就可以很好地完成工作了，但是在大部分情况下，我们还是希望服务器可以根据不同的URL请求返回不同的响应，而不是一成不变地只返回一种响应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *MyHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">handler := MyHandler&#123;&#125;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">Handler: &amp;handler,</span><br><span class="line">&#125;</span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用多个Handler来处理不同请求"><a href="#使用多个Handler来处理不同请求" class="headerlink" title="使用多个Handler来处理不同请求"></a>使用多个Handler来处理不同请求</h3><p>不在Server结构的Handler字段中指定处理器，而是让服务器使用默认的<code>DefaultServeMux</code>作为处理器，然后通<code>http.Handle</code> 函数将处理器绑定至<code>DefaultServeMux</code>。需要注意的是，虽然Handle 函数来源于http 包，但它实际上是<code>ServeMux</code> 结构的方法：这些函数是为了操作便利而创建的函数，调用它们等同于调用<code>DefaultServeMux</code> 的某个方法。比如说，调用<code>http.Handle</code>实际上就是在调用<code>DefaultServeMux</code>的Handle 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WorldHandler <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *HelloHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *WorldHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"world!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hello := HelloHandler&#123;&#125;</span><br><span class="line">world := WorldHandler&#123;&#125;</span><br><span class="line"></span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr: <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.Handle(<span class="string">"/hello"</span>, &amp;hello)</span><br><span class="line">http.Handle(<span class="string">"/world"</span>, &amp;world)</span><br><span class="line"></span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="处理器函数"><a href="#处理器函数" class="headerlink" title="处理器函数"></a>处理器函数</h3><p>Go语言拥有一种<code>HandlerFunc</code>函数类型，它可以把一个带有正确签名的函数<code>f</code> 转换成一个带有方法<code>f</code>的Handler </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">world</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span>&#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"hello!!!"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr: <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">&#125;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, hello)</span><br><span class="line">http.HandleFunc(<span class="string">"/world"</span>, world)</span><br><span class="line"></span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Handle 函数将一个处理器绑定至URL的具体方法。<code>HandleFun</code>函数会将函数转换成一个Handler ，并将它与<code>DefaultServeMux</code>进行绑定，以此来简化创建并绑定Handler 的工作。换句话说，处理器函数只不过是创建处理器的一种便利的方法而已。</p><h3 id="串联多个处理器和处理函数"><a href="#串联多个处理器和处理函数" class="headerlink" title="串联多个处理器和处理函数"></a>串联多个处理器和处理函数</h3><p>Go语言并不是一门函数式编程语言，但它也拥有一些函数式编程语言的特性，如函数类型、匿名函数和闭包。正如前面的代码所示，在Go语言里面，程序可以将一个函数传递给另一个函数，又或者通过标识符去引用一个具名函数。这意味着，可以将函数<code>f1</code>传递给另一个函数<code>f2</code>，然后在函数<code>f2</code>执行完某些操作之后调用<code>f1</code> 。例如：在每个处理器被调用时，都都记录一下调用日志</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/chain-func.jpg" alt=""></p><p>代码示例：</p><p>log函数返回的是一个匿名的HandlerFunc函数。因为hello 函数就是一个HandlerFunc 类型的函数，所以代码log(hello) 实际上就是将hello 函数发送至log 函数之内，换句话说，这段代码串联起了log函数和hello 函数。protect函数也是如此。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h HelloHandler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">log</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w,<span class="string">"Handler called - %T\n"</span>, h)</span><br><span class="line">h.ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">protect</span><span class="params">(h http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 假设有一系列操作....</span></span><br><span class="line">fmt.Fprintf(w,<span class="string">"Handler called - %T\n"</span>, h)</span><br><span class="line">h.ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr: <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">&#125;</span><br><span class="line">hello := HelloHandler&#123;&#125;</span><br><span class="line">http.Handle(<span class="string">"/hello"</span>, protect(log(hello)))</span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServeMux和DefaultServeMux"><a href="#ServeMux和DefaultServeMux" class="headerlink" title="ServeMux和DefaultServeMux"></a>ServeMux和DefaultServeMux</h3><p>ServeMux是一个HTTP请求多路复用器，它负责接收HTTP请求并根据请求中的URL将请求重定向到正确的处理器</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/ServeMux.png" alt=""></p><p>ServeMux结构包含一个映射，这个映射会将URL映射到相应的处理器。ServeMux也实现了ServeHTTP方法，所以也是一个处理器。当ServeHTTP方法接收到一个请求的时候，它会在结构的映射里面找出与请求URL最匹配的URL，然后调用对应的处理器的ServeHTTP方法。</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/go/ServeMux2.jpg" alt=""></p><p>ServeMux是一个结构体并不是一个接口，所以DefaultServeMux并不是ServeMux的实现。DefaultServeMux是ServeMux的实例。并且所有引入了net/http 标准库的程序都可以使用这个实例。当用户没有为Server结构指定处理器时，服务器就会使用DefaultServeMux作为ServeMux的默认实例。</p><p>因为ServeMux也是一个处理器 ，所以用户也可以在有需要的情况下对其实例实施处理器串联。</p><p>如果绑定根URL（/ ），那么匹配不成功的URL将会根据URL的层级进行下降，并最终降落在根URL之上。当浏览器访问<code>/random</code>的时候，因为服务器无法找到负责处理这个URL的处理器，所以它会把这个URL交给根URL的处理器处理。例如<code>/hello</code>绑定了处理器，当访问<code>/hello/mike</code>的时候，由于<code>/hello/mike</code>没有绑定处理器，就会降级给<code>/hello</code>的处理器去处理。</p><p><strong>最小惊讶原则:</strong></p><p>也称最小意外原则，是设计包括软件在内的一切事物的一条通用规则，它指的是我们在<br>进行设计的时候，应该做那些合乎常理的事情，使事物的行为总是显而易见、始终如一并且合乎情理。</p><h3 id="使用其他多路复用器（HttpRouter）"><a href="#使用其他多路复用器（HttpRouter）" class="headerlink" title="使用其他多路复用器（HttpRouter）"></a>使用其他多路复用器（HttpRouter）</h3><p>创建一个处理器和多路复用器唯一需要做的就是实现ServeHTTP方法，所以通过创建多路复用器来代替<code>net/http</code>包下的ServeMux是完全可行。</p><p>ServeMux 的一个缺陷是无法使用变量实现URL模式匹配。例如：<code>/user/123</code>查询id为123的用户，对于Go原生的ServeMux对URL进行语法分析提取<code>123</code>会比较麻烦，就必须在程序里面进行大量复杂的语法分析，并因此给程序带来额外的复杂度。</p><p>HttpRouter文档：<a href="https://github.com/julienschmidt/httprouter。" target="_blank" rel="noopener">https://github.com/julienschmidt/httprouter。</a></p><p>简单示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/julienschmidt/httprouter"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">(w http.ResponseWriter, r *http.Request, p httprouter.Params)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"hello, %s!\n"</span>, p.ByName(<span class="string">"name"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mux := httprouter.New()</span><br><span class="line">mux.GET(<span class="string">"/hello/:name"</span>, hello)</span><br><span class="line"></span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="string">"127.0.0.1:8080"</span>,</span><br><span class="line">Handler: mux,</span><br><span class="line">&#125;</span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于这些路由比配和变量获取很多的Web框架都有实现。</p>]]></content>
    
    <summary type="html">
    
      Go高效的net/http模块
    
    </summary>
    
    
      <category term="后端" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="Go Web" scheme="https://www.maishuren.top/tags/Go-Web/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba微服务学习一：服务发现Nacos</title>
    <link href="https://www.maishuren.top/posts/springcloud/2020/06/202006211810.html"/>
    <id>https://www.maishuren.top/posts/springcloud/2020/06/202006211810.html</id>
    <published>2020-06-21T10:10:12.000Z</published>
    <updated>2021-02-17T09:14:03.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="为什么出现Spring-Cloud-Alibaba？"><a href="#为什么出现Spring-Cloud-Alibaba？" class="headerlink" title="为什么出现Spring Cloud Alibaba？"></a>为什么出现Spring Cloud Alibaba？</h1><p>Spring Cloud的<a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now" target="_blank" rel="noopener">官网</a>中：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/springcloud/springcloud1.jpg" alt=""></p><p>在以往的Spring Cloud中官方也是推荐使用Netflix的组件，但是随着Netflix的多个组件进入维护状态，可以说Netflix的组件已经不能使用了，因为可能出现潜在风险。对于微服务来说，最重要的几个组件：服务发现、断路器、网关、负载均衡。然而这些组件都进入了维护状态。所以随之Ailibaba的组件就成为了我们的首选。</p><h1 id="Spring-Cloud-Alibaba的主要组件"><a href="#Spring-Cloud-Alibaba的主要组件" class="headerlink" title="Spring Cloud Alibaba的主要组件"></a>Spring Cloud Alibaba的主要组件</h1><ul><li>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等都各维度保护服务的稳定性。</li><li>Nacos：一个更易于构建云原生应用的动态<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理平台</strong>。</li><li>RabbitMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时、高可靠的消息发布与订阅服务。</li><li>Dubbo：高性能的Java RPC框架。</li><li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM：一款在分布式结构环境中对应用配置进行集中式管理和推送的应用配置中心产品。</li><li>Alibaba Cloud SchedulerX：分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时任务调度服务。</li><li>Alibaba Cloud SMS：覆盖全球的短信服务，友好、高效、只能的互联网通讯能力</li><li>Alibaba Cloud OSS：对象存储服务。</li></ul><p>像OSS SMS、SchedulerX、ACM这些是阿里云的收费产品，这些也不是构建微服务的必需品，我们可以不用。</p><h1 id="什么是Nacos？"><a href="#什么是Nacos？" class="headerlink" title="什么是Nacos？"></a>什么是Nacos？</h1><p>服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理：</p><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Kubernetes Service</a></p><p><a href="https://grpc.io/docs/guides/concepts.html#service-definition" target="_blank" rel="noopener">gRPC</a> &amp; <a href="https://dubbo.incubator.apache.org/" target="_blank" rel="noopener">Dubbo RPC Service</a></p><p><a href="https://spring.io/understanding/REST" target="_blank" rel="noopener">Spring Cloud RESTful Service</a></p><h1 id="使用Nacos-Server并注册应用"><a href="#使用Nacos-Server并注册应用" class="headerlink" title="使用Nacos Server并注册应用"></a>使用Nacos Server并注册应用</h1><p>1.下载Nacos。下载地址：<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>2.解压Nacos的压缩包。</p><p>3.启动Nacos。</p><p><strong>windows下启动</strong></p><p>cmd startup.cmd或者双击startup.cmd</p><p><strong>linux/Unix/Mac启动</strong></p><p>sh startup.sh -m standalone</p><p>4.启动完成</p><p>nacos有一个完整的web界面，在上面有很多完善的功能。在浏览器打开<a href="http://localhost:8848/nacos。默认的用户名为nacos，密码为nacos" target="_blank" rel="noopener">http://localhost:8848/nacos。默认的用户名为nacos，密码为nacos</a></p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos.jpg" alt=""></p><p>nacos的web界面</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos2.jpg" alt=""></p><p>5.编写应用，注册到Nacos中</p><p>创建项目：</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-user-center-nacos-7003<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-user-center-nacos-7005<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.spring.boot.starter.version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">druid.spring.boot.starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.boot.version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring.cloud.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud.alibaba.version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">spring.cloud.alibaba.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis-spring-boot-starter.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">mybatis-spring-boot-starter.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hutool-all.version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">hutool-all.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用：锁定版本 + 子module不用谢groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.spring.boot.starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建模块（cloud-user-center-nacos-7003）"><a href="#创建模块（cloud-user-center-nacos-7003）" class="headerlink" title="创建模块（cloud-user-center-nacos-7003）"></a>创建模块（cloud-user-center-nacos-7003）</h2><p><strong>pom.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-user-center-nacos-7003<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud ailibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>启动类：</strong>UserCenter7003Application</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenter7003Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(UserCenter7003Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><h2 id="创建模块（cloud-user-center-nacos-7005）"><a href="#创建模块（cloud-user-center-nacos-7005）" class="headerlink" title="创建模块（cloud-user-center-nacos-7005）"></a>创建模块（cloud-user-center-nacos-7005）</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-v2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-user-center-nacos-7005<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud ailibaba nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Nacos7005Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Nacos7005Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p>运行启动类启动，可以看到程序成功注册到Nacos注册中心。</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos3.png" alt=""></p><p>登录Nacos的Web界面查看：已经有两个实列数成功注册进去。</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos4.png" alt=""></p><h1 id="服务之间的相互感知"><a href="#服务之间的相互感知" class="headerlink" title="服务之间的相互感知"></a>服务之间的相互感知</h1><p>很明显user-center两个实列已经注册成功，对于一个注册中心来说，里面的服务时可以相互感知的。代码如下：</p><p>在7003端口的服务中创建一个UserCenterController，然后两个服务都启动。在浏览器访问<a href="http://localhost:7003/nacos/getServiceInfo" target="_blank" rel="noopener">http://localhost:7003/nacos/getServiceInfo</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos.conttoller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.SimpleClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"nacos"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getServiceInfo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">testNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        services.stream().distinct().forEach(e -&gt; list.add(discoveryClient.getInstances(e)));</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"toCall7005"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">"cloud-user-center-provider-service"</span>);</span><br><span class="line">        List&lt;ServiceInstance&gt; serviceInstances = instances.stream().filter(e -&gt; e.getPort() == <span class="number">7005</span>).collect(Collectors.toList());</span><br><span class="line">        ServiceInstance serviceInstance = serviceInstances.get(<span class="number">0</span>);</span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(uri.toString()+<span class="string">"nacos/test"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleClientHttpRequestFactory requestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">        requestFactory.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，可以通过DiscoveryClient来获取注册在Nacos上的服务信息。接下来可以使用RestTemplate来调用7005端口的服务。</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos5.jpg" alt=""></p><p>首先在7005端口的服务也创建一个UserCenterController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.cloudv2.nacos.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"nacos"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCenterController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testNacos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"welcome to use nacos port ："</span>+<span class="number">7005</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器访问<a href="http://localhost:7003/nacos/toCall7005" target="_blank" rel="noopener">http://localhost:7003/nacos/toCall7005</a></p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/rest.jpg" alt=""></p><p>综上所述，注册中Nacos中的服务时可以相互感知，并可以通过一些Http的客户端进行相互之间的调用。</p><h1 id="Nacos服务发现的领域模型"><a href="#Nacos服务发现的领域模型" class="headerlink" title="Nacos服务发现的领域模型"></a>Nacos服务发现的领域模型</h1><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos7.jpeg" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos6.png" alt=""></p><ul><li><strong>NameSpace</strong>：命名空间，Nacso默认的NameSpace是public。比如在开发中，可以创建一个开发环境和测试环境的NameSpace。这样可以通过指定服务的NameSpace做到环境隔离。</li><li><strong>Group</strong>：分组。在Nacos用作配置中心时使用。</li><li><strong>Service：</strong>微服务</li><li><strong>Cluster</strong>：对指定微服务的一个虚拟划分，默认是DEFAULT。</li><li><strong>Instance：</strong>微服务实例。</li><li><strong>Metadata</strong>： 只要用于版本控制。比如，我们在开发中可能是多个版本共存的。</li></ul><h2 id="配置使用"><a href="#配置使用" class="headerlink" title="配置使用"></a>配置使用</h2><p>在Nacos下创建一个名为dev的NameSpace，然后再该NameSpace下创建一个</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos8.png" alt=""></p><p><strong>cloud-user-center-nacos-7003</strong></p><p>只需要在配置文件中配置namespace和cluster-name这两项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 开发NameSpace，值为UUID</span></span><br><span class="line">        <span class="attr">namespace:</span> </span><br><span class="line">        <span class="comment"># 列如：广州集群</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">GZ</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p><strong>cloud-user-center-nacos-7005</strong></p><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7005</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">          <span class="comment"># 开发NameSpace，值为UUID</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">fa47d71f-9bc5-45ae-96c1-a6b9f7c55700</span></span><br><span class="line">          <span class="comment"># 北京集群</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">BJ</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>注册中心：服务列表</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos9.png" alt=""></p><p>点击”详情“，可以看到GZ和BJ两个集群</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos10.png" alt=""></p><h1 id="Nacos的元信息"><a href="#Nacos的元信息" class="headerlink" title="Nacos的元信息"></a>Nacos的元信息</h1><p>Nacos数据（如配置和服务）描述信息，如服务版本、权重、容灾策略、负载均衡策略、鉴权配置、各种自定义标签 (label)，从作用范围来看，分为服务级别的元信息、集群的元信息及实例的元信息。</p><p>设置方式：1.在Nacos的web界面的控制台设置。2.在配置文件设置</p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos11.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos12.png" alt=""></p><p>在配置文件设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-user-center-provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="comment"># 开发NameSpace，值为UUID</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">fa47d71f-9bc5-45ae-96c1-a6b9f7c55700</span></span><br><span class="line">        <span class="comment"># 广州集群</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">GZ</span></span><br><span class="line">        <span class="attr">metadata:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line">          <span class="attr">info:</span> <span class="string">user-center</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/MaiSR9527/blog-pic/springcloud/nacos13.png" alt=""></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>不积跬步无以至千里，不积小流无以成江海</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="https://www.maishuren.top/tags/java/"/>
    
      <category term="springcloud" scheme="https://www.maishuren.top/tags/springcloud/"/>
    
      <category term="微服务" scheme="https://www.maishuren.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>nginx实践：rewrite规则</title>
    <link href="https://www.maishuren.top/posts/nginx/2020/06/202006211318.html"/>
    <id>https://www.maishuren.top/posts/nginx/2020/06/202006211318.html</id>
    <published>2020-06-21T05:18:58.000Z</published>
    <updated>2020-11-29T15:49:40.262Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Rewrite规则"><a href="#Rewrite规则" class="headerlink" title="Rewrite规则"></a>Rewrite规则</h1><p>作用：rewrite规则可以实现对url的重写和重定向</p><p>主要应用场景：</p><ul><li>URL访问跳转，支持开发设计，如页面跳转，兼容性支持，展示效果</li><li>SEO优化</li><li>维护：后台维护、流量转发</li><li>安全</li></ul><h2 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h2><p>配置： rewrite regex replacement [flag];</p><p>作用域：server、location、if</p><p>参数：</p><p>last 停止rewrite检测【如果没有匹配到，会继续向下匹配】</p><p>break 停止rewrite检测【如果没有匹配到，则不再向下匹配，直接返回结果404】</p><p>redirect 返回302临时重定向，地址栏会显示跳转后的地址</p><p>permanent 返回301永久重定向，地址栏会显示跳转后的地址</p><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;log&#x2F;host.access.log  main;</span><br><span class="line">     </span><br><span class="line">    root &#x2F;opt&#x2F;app&#x2F;code; </span><br><span class="line">    location ~ ^&#x2F;break &#123;</span><br><span class="line">        rewrite ^&#x2F;break &#x2F;test&#x2F; break;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    location ~ ^&#x2F;last &#123;</span><br><span class="line">         rewrite ^&#x2F;last &#x2F;test&#x2F; last;</span><br><span class="line">         #rewrite ^&#x2F;last &#x2F;test&#x2F; redirect;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;site &#123;</span><br><span class="line">         rewrite ^&#x2F;main http:&#x2F;&#x2F;www.baidu.com&#x2F; permanent;</span><br><span class="line">         #rewrite ^&#x2F;main http:&#x2F;&#x2F;www.baidu.com&#x2F; redirect;</span><br><span class="line">    &#125;    </span><br><span class="line"> </span><br><span class="line">    location &#x2F;test&#x2F; &#123;</span><br><span class="line">       default_type application&#x2F;json;</span><br><span class="line">       return 200 &#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redirect 表示临时的重定向 ，只要后端服务是开者的。每次访问 /site都会重定向到后面的url</p><p>permanent 表示永久重定向，第一次访问成功后，把后端服务关闭后，访问/site仍然会重定向到后面的url</p><p><strong>rewrite优先级规则</strong></p><ul><li>执行server 块的rewrite 指令。将所有的网站都重定向同一个网站。</li><li>执行location匹配。</li><li>执行选定的location中的rewrite。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="运维" scheme="https://www.maishuren.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="nginx" scheme="https://www.maishuren.top/tags/nginx/"/>
    
      <category term="实践" scheme="https://www.maishuren.top/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>golang学习二十一：select和GC</title>
    <link href="https://www.maishuren.top/posts/golang/2020/06/202006201149.html"/>
    <id>https://www.maishuren.top/posts/golang/2020/06/202006201149.html</id>
    <published>2020-06-20T03:49:52.000Z</published>
    <updated>2020-07-12T14:16:37.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="select简介"><a href="#select简介" class="headerlink" title="select简介"></a>select简介</h1><ul><li>Golang中select和switch结构特别像,但是select中case的条件只能是I/O</li><li>select 的语法(condition是条件)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">  <span class="keyword">case</span> condition:</span><br><span class="line">  <span class="keyword">case</span> condition:</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>select执行过程:<ul><li>每个case必须是一个IO操作</li><li>哪个case可以执行就执行哪个</li><li>多个case都可以执行,随机执行一个</li><li>所有case都不能执行时,执行default</li><li>所有case都不能执行,且没有default,将会阻塞</li></ul></li><li>代码示例<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line">   ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">   ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">   ch1 &lt;- <span class="number">1</span></span><br><span class="line">   ch2 &lt;- <span class="string">"hello"</span></span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> value := &lt;-ch1:</span><br><span class="line">      fmt.Println(value)</span><br><span class="line">   <span class="keyword">case</span> value := &lt;-ch2:</span><br><span class="line">      fmt.Println(value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>select多和for循环结合使用,下面例子演示出了一直在接收消息的例子<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ch &lt;- arg</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//如果是一直接受消息,应该是死循环for&#123;&#125;,下面代码中是明确知道消息个数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> c := &lt;-ch:</span><br><span class="line">fmt.Println(<span class="string">"取出数据"</span>, c)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">//没有default会出现死锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>break可以对select生效,如果for中嵌套select,break选择最近结构</li></ul><h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><ul><li>GC英文全称 garbage collector</li><li>Go语言GC是相对C/C++语言非常重要的改进</li><li>一些常用GC算法<ul><li>引用计算法.当对象被引用时计算器加一.不被引用计数器减一<ul><li>PHP和Object-C使用</li><li>相互引用无法回收</li><li>计数增加消耗</li></ul></li><li>Mark And Sweep 标记和清除算法.停止程序运行,递归遍历对象,进行标记.标记完成后将所有没有引用的对象进行清除<ul><li>由于标记需要停止程序(Stop the world),当对象特别多时,标记和清除过程比较耗时(可能几百毫秒),很难接受</li></ul></li><li>三色标记法:是Mark And Sweep的改进版.从逻辑上分为白色区(未搜索),灰色区(正搜索),黑色区(已搜索).灰色区内容是子引用没有进行搜索,黑色区表示子引用存在</li><li>分代收集.一般情况都有三代,例如java中新生代,老年代,永久代.当新生代中带有阈值时会把对象放入到老年代,相同道理老年代内容达到阈值会放入到永久代</li></ul></li></ul><h1 id="Go语言中的GC"><a href="#Go语言中的GC" class="headerlink" title="Go语言中的GC"></a>Go语言中的GC</h1><ul><li>Go语言中采用Stop The World方式</li><li>Golang每个版本基本上都会对GC进行优化,从Golang1.5开始支持并发(concurrent )收集,从1.8版本已经把STW时间优化到了100微妙,通常只需要10微妙以下.且在1.10版本时再次优化减少GC对CPU占用</li><li>Go语言中GC是自动运行的,在下列情况下会触发GC<ul><li>当需要申请内存时,发现GC是上次GC两倍时会触发</li><li>每2分钟自动运行一次GC</li></ul></li><li>GC调优<ul><li>小对象复用,局部变量尽量少声明,多个小对象可以放入到结构体,方便GC扫描</li><li>少用string的”+”</li></ul></li><li>在runtime包下mgc.go中明确的说明了Golang的GC的解释<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Garbage collector (GC).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The GC runs concurrently with mutator threads, is type accurate (aka precise), allows multiple</span></span><br><span class="line"><span class="comment">// GC thread to run in parallel. It is a concurrent mark and sweep that uses a write barrier. It is</span></span><br><span class="line"><span class="comment">// non-generational and non-compacting. Allocation is done using size segregated per P allocation</span></span><br><span class="line"><span class="comment">// areas to minimize fragmentation while eliminating locks in the common case.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The algorithm decomposes into several steps.</span></span><br><span class="line"><span class="comment">// This is a high level description of the algorithm being used. For an overview of GC a good</span></span><br><span class="line"><span class="comment">// place to start is Richard Jones' gchandbook.org.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The algorithm's intellectual heritage includes Dijkstra's on-the-fly algorithm, see</span></span><br><span class="line"><span class="comment">// Edsger W. Dijkstra, Leslie Lamport, A. J. Martin, C. S. Scholten, and E. F. M. Steffens. 1978.</span></span><br><span class="line"><span class="comment">// On-the-fly garbage collection: an exercise in cooperation. Commun. ACM 21, 11 (November 1978),</span></span><br><span class="line"><span class="comment">// 966-975.</span></span><br><span class="line"><span class="comment">// For journal quality proofs that these steps are complete, correct, and terminate see</span></span><br><span class="line"><span class="comment">// Hudson, R., and Moss, J.E.B. Copying Garbage Collection without stopping the world.</span></span><br><span class="line"><span class="comment">// Concurrency and Computation: Practice and Experience 15(3-5), 2003.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. GC performs sweep termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Stop the world. This causes all Ps to reach a GC safe-point.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Sweep any unswept spans. There will only be unswept spans if</span></span><br><span class="line"><span class="comment">//    this GC cycle was forced before the expected time.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 2. GC performs the "mark 1" sub-phase. In this sub-phase, Ps are</span></span><br><span class="line"><span class="comment">// allowed to locally cache parts of the work queue.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Prepare for the mark phase by setting gcphase to _GCmark</span></span><br><span class="line"><span class="comment">//    (from _GCoff), enabling the write barrier, enabling mutator</span></span><br><span class="line"><span class="comment">//    assists, and enqueueing root mark jobs. No objects may be</span></span><br><span class="line"><span class="comment">//    scanned until all Ps have enabled the write barrier, which is</span></span><br><span class="line"><span class="comment">//    accomplished using STW.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Start the world. From this point, GC work is done by mark</span></span><br><span class="line"><span class="comment">//    workers started by the scheduler and by assists performed as</span></span><br><span class="line"><span class="comment">//    part of allocation. The write barrier shades both the</span></span><br><span class="line"><span class="comment">//    overwritten pointer and the new pointer value for any pointer</span></span><br><span class="line"><span class="comment">//    writes (see mbarrier.go for details). Newly allocated objects</span></span><br><span class="line"><span class="comment">//    are immediately marked black.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. GC performs root marking jobs. This includes scanning all</span></span><br><span class="line"><span class="comment">//    stacks, shading all globals, and shading any heap pointers in</span></span><br><span class="line"><span class="comment">//    off-heap runtime data structures. Scanning a stack stops a</span></span><br><span class="line"><span class="comment">//    goroutine, shades any pointers found on its stack, and then</span></span><br><span class="line"><span class="comment">//    resumes the goroutine.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    d. GC drains the work queue of grey objects, scanning each grey</span></span><br><span class="line"><span class="comment">//    object to black and shading all pointers found in the object</span></span><br><span class="line"><span class="comment">//    (which in turn may add those pointers to the work queue).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 3. Once the global work queue is empty (but local work queue caches</span></span><br><span class="line"><span class="comment">// may still contain work), GC performs the "mark 2" sub-phase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. GC stops all workers, disables local work queue caches,</span></span><br><span class="line"><span class="comment">//    flushes each P's local work queue cache to the global work queue</span></span><br><span class="line"><span class="comment">//    cache, and reenables workers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. GC again drains the work queue, as in 2d above.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 4. Once the work queue is empty, GC performs mark termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Stop the world.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Set gcphase to _GCmarktermination, and disable workers and</span></span><br><span class="line"><span class="comment">//    assists.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. Drain any remaining work from the work queue (typically there</span></span><br><span class="line"><span class="comment">//    will be none).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    d. Perform other housekeeping like flushing mcaches.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 5. GC performs the sweep phase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Prepare for the sweep phase by setting gcphase to _GCoff,</span></span><br><span class="line"><span class="comment">//    setting up sweep state and disabling the write barrier.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Start the world. From this point on, newly allocated objects</span></span><br><span class="line"><span class="comment">//    are white, and allocating sweeps spans before use if necessary.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. GC does concurrent sweeping in the background and in response</span></span><br><span class="line"><span class="comment">//    to allocation. See description below.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 6. When sufficient allocation has taken place, replay the sequence</span></span><br><span class="line"><span class="comment">// starting with 1 above. See discussion of GC rate below.</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="https://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="https://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="https://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
