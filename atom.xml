<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maiBlog</title>
  
  <subtitle>maishuren blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.maishuren.top/"/>
  <updated>2020-08-23T03:47:49.568Z</updated>
  <id>http://www.maishuren.top/</id>
  
  <author>
    <name>maishuren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go应用开发框架：beego</title>
    <link href="http://www.maishuren.top/posts/post/202008222257-index.html"/>
    <id>http://www.maishuren.top/posts/post/202008222257-index.html</id>
    <published>2020-08-22T14:57:45.000Z</published>
    <updated>2020-08-23T03:47:49.568Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com&#x2F;astaxie&#x2F;beego      &#x2F;&#x2F;下载beego框架</span><br><span class="line">$ go get -u github.com&#x2F;beego&#x2F;bee          &#x2F;&#x2F;下载bee工具</span><br></pre></td></tr></table></figure><p>bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。</p><p>如果在下载过程中发现很慢，那应该是GOPROXY使用的默认值，下载速度会很慢。可以设置使用以下加速的代理：</p><p><strong>国内七牛云代理</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go env -w GO111MODULE&#x3D;on</span><br><span class="line">$ go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.cn,direct</span><br></pre></td></tr></table></figure><hr><p><strong>全球CDN加速</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go env -w GO111MODULE&#x3D;on</span><br><span class="line">go env -w GOPROXY&#x3D;https:&#x2F;&#x2F;goproxy.io,direct</span><br></pre></td></tr></table></figure><p>选择一个就行，下载速度的问题就解决了。当下载完之后，bee的bee.exe便会生成在go的bin目录下和beego框架的源码就被下载到设置了的POPATH执行的目录。如果GOPATH和go的src目录不一致，就把下载好的复制到go的src目录，编写程序时就可以引用了。</p><h1 id="bee工具的命令"><a href="#bee工具的命令" class="headerlink" title="bee工具的命令"></a>bee工具的命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ bee help</span><br><span class="line">Bee is a Fast and Flexible tool for managing your Beego Web Application.</span><br><span class="line"></span><br><span class="line">USAGE</span><br><span class="line">    bee command [arguments]</span><br><span class="line"></span><br><span class="line">AVAILABLE COMMANDS</span><br><span class="line"></span><br><span class="line">    version     Prints the current Bee version</span><br><span class="line">    migrate     Runs database migrations</span><br><span class="line">    api         Creates a Beego API application</span><br><span class="line">    bale        Transforms non-Go files to Go source files</span><br><span class="line">    fix         Fixes your application by making it compatible with newer versions of Beego</span><br><span class="line">    dlv         Start a debugging session using Delve</span><br><span class="line">    dockerize   Generates a Dockerfile for your Beego application</span><br><span class="line">    generate    Source code generator</span><br><span class="line">    hprose      Creates an RPC application based on Hprose and Beego frameworks</span><br><span class="line">    new         Creates a Beego application</span><br><span class="line">    pack        Compresses a Beego application into a single file</span><br><span class="line">    rs          Run customized scripts</span><br><span class="line">    run         Run the application by starting a local development server</span><br><span class="line">    server      serving static content over HTTP on port</span><br><span class="line"></span><br><span class="line">Use bee help [command] for more information about a command.</span><br><span class="line"></span><br><span class="line">ADDITIONAL HELP TOPICS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Use bee help [topic] for more information about that topic.</span><br><span class="line">bee: Too many arguments.</span><br><span class="line">Use bee help for more information.</span><br></pre></td></tr></table></figure><h2 id="bee-new创建项目"><a href="#bee-new创建项目" class="headerlink" title="bee new创建项目"></a>bee new创建项目</h2><p>使用bee工具创建一个web项目，bee new是新建一个web项目。后面接的是想要命名的项目名称。E:\Go\go_project是我自己电脑的GOPATH路径。可见bee新建的项目是存放在GOPATH目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ bee new beedemo</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_&#x2F; &#x2F;  ___   ___</span><br><span class="line">| ___ \ &#x2F; _ \ &#x2F; _ \</span><br><span class="line">| |_&#x2F; &#x2F;|  __&#x2F;|  __&#x2F;</span><br><span class="line">\____&#x2F;  \___| \___| v1.10.0</span><br><span class="line">2020&#x2F;08&#x2F;22 22:50:04 INFO     ▶ 0001 Creating application...</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\conf\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\controllers\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\models\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\routers\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\tests\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\js\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\css\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\static\img\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\views\</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\conf\app.conf</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\controllers\default.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\views\index.tpl</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\routers\router.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\tests\default_test.go</span><br><span class="line">        create   E:\Go\go_project\src\beedemo\main.go</span><br><span class="line">2020&#x2F;08&#x2F;22 22:50:04 SUCCESS  ▶ 0002 New application successfully created!</span><br></pre></td></tr></table></figure><p>bee新建的web项目的结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">beedemo</span><br><span class="line">├── conf        &#x2F;&#x2F;存放配置文件</span><br><span class="line">│   └── app.conf</span><br><span class="line">├── controllers &#x2F;&#x2F;存放控制器</span><br><span class="line">│   └── default.go</span><br><span class="line">├── main.go    &#x2F;&#x2F;程序入口</span><br><span class="line">├── models     &#x2F;&#x2F;存放模型，即与数据库表关联的数据模型</span><br><span class="line">├── routers    &#x2F;&#x2F;存放路由，通过编写程序将请求路径路由到对应的控制器下的方法就行处理</span><br><span class="line">│   └── router.go</span><br><span class="line">├── static     &#x2F;&#x2F;存放静态文件，如css文件,图片,js文件</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   └── js</span><br><span class="line">├── tests      &#x2F;&#x2F;测试</span><br><span class="line">│   └── default_test.go</span><br><span class="line">└── views      &#x2F;&#x2F;视图模板</span><br><span class="line">    └── index.tpl</span><br></pre></td></tr></table></figure><h2 id="bee-run运行项目"><a href="#bee-run运行项目" class="headerlink" title="bee run运行项目"></a>bee run运行项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">E:\Go\go_project\src\beedemo&gt;bee run</span><br><span class="line">______</span><br><span class="line">| ___ \</span><br><span class="line">| |_&#x2F; &#x2F;  ___   ___</span><br><span class="line">| ___ \ &#x2F; _ \ &#x2F; _ \</span><br><span class="line">| |_&#x2F; &#x2F;|  __&#x2F;|  __&#x2F;</span><br><span class="line">\____&#x2F;  \___| \___| v1.10.0</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:09 INFO     ▶ 0001 Using &#39;beedemo&#39; as &#39;appname&#39;</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:09 INFO     ▶ 0002 Initializing watcher...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 SUCCESS  ▶ 0003 Built Successfully!</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 INFO     ▶ 0004 Restarting &#39;beedemo.exe&#39;...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12 SUCCESS  ▶ 0005 &#39;.&#x2F;beedemo.exe&#39; is running...</span><br><span class="line">2020&#x2F;08&#x2F;22 23:44:12.494 [I] [asm_amd64.s:1357]  http server Running on http:&#x2F;&#x2F;:8080</span><br></pre></td></tr></table></figure><p>然后再去访问<a href="http://localhost:8080。就可以看到beego的欢迎页了。">http://localhost:8080。就可以看到beego的欢迎页了。</a></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/go/beego-welcome.jpg" alt=""></p><p>如果报错：missing dot in first path element。在项目下执行：go mod init。再去运行项目</p><h1 id="项目路由设置"><a href="#项目路由设置" class="headerlink" title="项目路由设置"></a>项目路由设置</h1><p>main.go是整个项目的入口，那么就从main.go开始看</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"beedemo/routers"</span></span><br><span class="line"><span class="string">"github.com/astaxie/beego"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="GoWeb" scheme="http://www.maishuren.top/tags/GoWeb/"/>
    
      <category term="beego" scheme="http://www.maishuren.top/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>Java内存区域与内存溢出异常</title>
    <link href="http://www.maishuren.top/posts/jvm/202007122215-index.html"/>
    <id>http://www.maishuren.top/posts/jvm/202007122215-index.html</id>
    <published>2020-07-12T14:15:25.000Z</published>
    <updated>2020-07-13T11:58:21.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/jvm/jvm-memory.jpg" alt="thread-dead-lock"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器时一块较小的内存空间，可以把它看作是当前线程所执行字节码的行号指示器。在Java虚拟机的概念魔性里面，字节码解析工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖程序计数器来完成。</p><p>Java虚拟机中的多线程是通过线程轮流切换、分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器(多核处理器来说是一个内核)都会执行一条线程中的指令。因此，为了多线程切换之后能够恢复到正确的执行位置，每条线程都需要这样的一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。因此在Java虚拟机的运行时数据区中程序计数器是属于“线程私有”的一块内存。</p><p>如果线程正在执行的是一个Java方法， 这个计数器记录的是正在执行的虚拟机字节码指令的地址； 如果正在执行的是本地（Native） 方法， 这个计数器值则应为空（Undefined） 。 此内存区域是唯</p><p>一一个在《Java虚拟机规范》 中没有规定任何OutOfMemoryError情况的区域。  </p><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>和程序计数器一样，Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的线程魔性：每个方法被执行的时候，Java虚拟机都会同步创建栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。每个方法被调用直至执行完毕的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>局部变量表存放了编译期间可知的各种Java虚拟机基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(reference类型，他并不等同于对象本身，可能是一个执行对象起始地址的引用指针，也可能是指向代表一个对象的句柄或者其他与此对象相关的位置)和returnAddress类型（指向下一条字节码指令的地址）。</p><p>这些数据类型在局部变量表中的存储空间以局部变量槽来表示，其中64位长度的ling和double类型的数据会占用两个两个变量槽， 其余的数据类型只占用一个。 局部变量表所需的内存空间在编译期间完成分配， 当进入一个方法时， 这个方法需要在栈帧中分配多大的局部变量空间是完全确定的， 在方法运行期间不会改变局部变量表的大小。 这里说的“大小”是指变量槽的数量，虚拟机真正使用多大的内存空间（譬如按照1个变量槽占用32个比特、 64个比特， 或者更多） 来实现一个变量槽， 这是完全由具体的虚拟机实现自行决定的事情。</p><p>在《Java虚拟机规范》中，对于这个内存区域规定了两类异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出StackOverflowError异常；如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存时，抛出StackOverflowError异常。</p><p>如下所示，每调用一个方法就是创建一个栈帧并入栈(进入Java虚拟机栈)，当足够多的栈帧进栈并且没有出栈，这是会导致栈内存溢出。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/jvm/stackoverflow.jpg" alt="stackoverflow"></p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈（Native Method Stacks） 与虚拟机栈所发挥的作用是非常相似的， 其区别只是虚拟机栈为虚拟机执行Java方法（也就是字节码） 服务， 而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p><p>《Java虚拟机规范》 对本地方法栈中方法使用的语言、 使用方式与数据结构并没有任何强制规定， 因此具体的虚拟机可以根据需要自由实现它， 甚至有的Java虚拟机（譬如Hot-Spot虚拟机） 直接就把本地方法栈和虚拟机栈合二为一。 与虚拟机栈一样， 本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常。  </p><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><p>对于Java应用程序来说，Java堆时虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的，在虚拟机启动的时候Java堆就被创建出来。此区域的唯一作用就是存放对象实例，Java中“几乎”所有的对象实例都在这里分配内存。在《Java虚拟机规范》 中对Java堆的描述是： “所有的对象实例以及数组都应当在堆上分配”， 而这里的“几乎”是指从实现角度来看， 随着Java语言的发展， 现在已经能看到些许迹象表明日后可能出现值类型的支持， 即使只考虑现在， 由于即时编<br>译技术的进步， 尤其是逃逸分析技术的日渐强大， 栈上分配、 标量替换优化手段已经导致一些微妙的变化悄然发生， 所以说Java对象实例都分配在堆上也渐渐变得不是那么绝对了。</p><p>如果从分配内存的角度看， 所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer， TLAB） ， 以提升对象分配时的效率。 不过无论从什么角度， 无论如何划分， 都不会改变Java堆中存储内容的共性， 无论是哪个区域， 存储的都只能是对象的实例， 将Java堆细分的目的只是为了更好地回收内存， 或者更快地分配内存。  </p><p>根据《Java虚拟机规范》 的规定， Java堆可以处于物理上不连续的内存空间中， 但在逻辑上它应该被视为连续的， 这点就像我们用磁盘空间去存储文件一样， 并不要求每个文件都连续存放。 但对于大对象（典型的如数组对象） ， 多数虚拟机实现出于实现简单、 存储高效的考虑， 很可能会要求连续的内存空间。</p><p>Java堆既可以被实现成固定大小的， 也可以是可扩展的， 不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定） 。 如果在Java堆中没有内存完成实例分配， 并且堆也无法再扩展时， Java虚拟机将会抛出OutOfMemoryError异常。  </p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区（Method Area） 与Java堆一样， 是各个线程共享的内存区域， 它用于存储已被虚拟机加载的类型信息、 常量、 静态变量、 即时编译器编译后的代码缓存等数据。 虽然《Java虚拟机规范》 中把方法区描述为堆的一个逻辑部分， 但是它却有一个别名叫作“非堆”（Non-Heap） ， 目的是与Java堆区分开来。 </p><p>《Java虚拟机规范》 对方法区的约束是非常宽松的， 除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外， 甚至还可以选择不实现垃圾收集。 相对而言， 垃圾收集行为在这个区域的确是比较少出现的， 但并非数据进入了方法区就如永久代的名字一样“永久”存在了。 这区域的内存回收目标主要是针对常量池的回收和对类型的卸载， 一般来说这个区域的回收效果比较难令人满意， 尤其是类型的卸载， 条件相当苛刻， 但是这部分区域的回收有时又确实是必要的。 </p><p>根据《Java虚拟机规范》 的规定， 如果方法区无法满足新的内存分配需求时， 将抛出OutOfMemoryError异常。  </p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池（Runtime Constant Pool） 是方法区的一部分。 Class文件中除了有类的版本、 字段、 方法、 接口等描述信息外， 还有一项信息是常量池表（Constant Pool Table） ， 用于存放编译期生成的各种字面量与符号引用， 这部分内容将在类加载后存放到方法区的运行时常量池中。</p><p>Java虚拟机对于Class文件每一部分（自然也包括常量池） 的格式都有严格规定， 如每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、 加载和执行， 但对于运行时常量池，《Java虚拟机规范》 并没有做任何细节的要求， 不同提供商实现的虚拟机可以按照自己的需要来实现这个内存区域， 不过一般来说， 除了保存Class文件中描述的符号引用外， 还会把由符号引用翻译出来的直接引用也存储在运行时常量池中。</p><p>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是说，并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可以将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern()方法。</p><p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError异常。  </p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>直接内存并不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常的出现。</p><p>在JDK1.4中新加入了NIO类，引入一种基于通道与缓冲区的I/O方式，它可以使Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样内在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回恢复数据。</p><p>直接内存的分配不会受到Java堆大小的限制， 但是， 既然是内存， 则肯定还是会受到本机总内存（包括物理内存、 SWAP分区或者分页文件） 大小以及处理器寻址空间的限制， 一般服务器管理员配置虚拟机参数时， 会根据实际内存去设置-Xmx等参数信息， 但经常忽略掉直接内存， 使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。  </p><h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="java" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/java/"/>
    
    
      <category term="jvm" scheme="http://www.maishuren.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>【java并发编程】多线程的线程安全问题</title>
    <link href="http://www.maishuren.top/posts/java-concurrent-programing/202007041308-index.html"/>
    <id>http://www.maishuren.top/posts/java-concurrent-programing/202007041308-index.html</id>
    <published>2020-07-04T05:08:02.000Z</published>
    <updated>2020-07-12T14:12:39.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h1><p>看一下下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUnsafe</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket ticket = <span class="keyword">new</span> Ticket();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(ticket);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" sale a ticket,current:"</span> + saleTicket());</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"票已经卖完了"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">saleTicket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ticketNum--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Thread-1 sale a ticket,current:18</span><br><span class="line">Thread-9 sale a ticket,current:11</span><br><span class="line">Thread-3 sale a ticket,current:19</span><br><span class="line">Thread-4 sale a ticket,current:12</span><br><span class="line">Thread-6 sale a ticket,current:14</span><br><span class="line">Thread-8 sale a ticket,current:13</span><br><span class="line">Thread-2 sale a ticket,current:15</span><br><span class="line">Thread-5 sale a ticket,current:20</span><br><span class="line">Thread-0 sale a ticket,current:17</span><br><span class="line">Thread-7 sale a ticket,current:16</span><br><span class="line">Thread-7 sale a ticket,current:10</span><br><span class="line">Thread-9 sale a ticket,current:5</span><br><span class="line">Thread-1 sale a ticket,current:6</span><br><span class="line">Thread-6 sale a ticket,current:7</span><br><span class="line">Thread-3 sale a ticket,current:8</span><br><span class="line">Thread-4 sale a ticket,current:9</span><br><span class="line">Thread-8 sale a ticket,current:9</span><br><span class="line">Thread-2 sale a ticket,current:9</span><br><span class="line">Thread-0 sale a ticket,current:9</span><br><span class="line">Thread-5 sale a ticket,current:9</span><br><span class="line">Thread-4 sale a ticket,current:2</span><br><span class="line">Thread-7 sale a ticket,current:-2</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-6 sale a ticket,current:-1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-1 sale a ticket,current:0</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-9 sale a ticket,current:0</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-8 sale a ticket,current:1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-3 sale a ticket,current:4</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-5 sale a ticket,current:1</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-2 sale a ticket,current:4</span><br><span class="line">票已经卖完了</span><br><span class="line">Thread-0 sale a ticket,current:3</span><br><span class="line">票已经卖完了</span><br><span class="line">票已经卖完了</span><br></pre></td></tr></table></figure><p>从执行结果看得出来，存在</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/java-concurrent/unsafe1.jpg" alt=""></p><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1>]]></content>
    
    <summary type="html">
    
      多线程编程虽然用起来很爽，同时也会带来一些问题
    
    </summary>
    
    
      <category term="并发编程" scheme="http://www.maishuren.top/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://www.maishuren.top/tags/java/"/>
    
      <category term="多线程" scheme="http://www.maishuren.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="高并发" scheme="http://www.maishuren.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器下配置MySQL主从配置</title>
    <link href="http://www.maishuren.top/posts/mysql/202006281626-index.html"/>
    <id>http://www.maishuren.top/posts/mysql/202006281626-index.html</id>
    <published>2020-06-28T08:26:07.000Z</published>
    <updated>2020-06-29T09:31:00.641Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MySQL主从复制"><a href="#MySQL主从复制" class="headerlink" title="MySQL主从复制"></a>MySQL主从复制</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/replica.png" alt=""></p><h1 id="获取MySQL镜像"><a href="#获取MySQL镜像" class="headerlink" title="获取MySQL镜像"></a>获取MySQL镜像</h1><p>搜索mysql，前两个是mysql官方制作的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker search mysql</span><br><span class="line">NAME    DESCRIPTION                                     STARS        OFFICIAL   AUTOMATED</span><br><span class="line">mysql   MySQL is a widely used, open-source relation…   9686         [OK]                </span><br><span class="line">mariadb MariaDB is a community-developed fork of MyS…   3523         [OK]                </span><br><span class="line">mysql&#x2F;mysql-server   Optimized MySQL Server Docker images. Create…   706         [OK]</span><br></pre></td></tr></table></figure><p>拉取mysql镜像到本地，因为mysql镜像有很多版本，对应mysql的版本：mysql:tag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h1 id="运行MySQL镜像生成容器"><a href="#运行MySQL镜像生成容器" class="headerlink" title="运行MySQL镜像生成容器"></a>运行MySQL镜像生成容器</h1><p>运行mysql镜像，生成容器。用户名root，密码123456</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker run -d --name mysql5.7 -p 3306:3306 -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;123456 master</span><br><span class="line"></span><br><span class="line">[root@slave ~]# docker run -d --name mysql5.7 -p 3306:3306 -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -v &#x2F;opt&#x2F;workspace&#x2F;mysql&#x2F;conf&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf -e MYSQL_ROOT_PASSWORD&#x3D;123456 slave</span><br></pre></td></tr></table></figure><p>至于mysql的配置文件my.cnf，可以把自己准备，也可以通过一下命令获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker run -i --rm mysql5.7 cat /etc/my.cnf &gt; my.cnf</span><br></pre></td></tr></table></figure><h1 id="MySQL主从配置"><a href="#MySQL主从配置" class="headerlink" title="MySQL主从配置"></a>MySQL主从配置</h1><p>修改mysql的配置文件</p><p>master：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">#开启log-bin</span><br><span class="line">log-bin &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">#设置服务id，主从不能一致  </span><br><span class="line">server‐id &#x3D; 1  </span><br><span class="line">#设置需要同步的数据库  </span><br><span class="line">#binlog‐do‐db&#x3D;user_db  </span><br><span class="line">#屏蔽系统库同步  </span><br><span class="line">binlog‐ignore‐db&#x3D;mysql  </span><br><span class="line">binlog‐ignore‐db&#x3D;information_schema  </span><br><span class="line">binlog‐ignore‐db&#x3D;performance_schema  </span><br><span class="line">expire-logs-days &#x3D; 14</span><br><span class="line">max-binlog-size &#x3D; 500M</span><br><span class="line">default-time-zone&#x3D;&#39;+08:00&#39;</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><p>slave：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">default-storage-engine&#x3D;INNODB</span><br><span class="line">character-set-server&#x3D;utf8</span><br><span class="line">#开启log-bin</span><br><span class="line">log-bin &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br><span class="line">expire-logs-days &#x3D; 14</span><br><span class="line">max-binlog-size &#x3D; 500M</span><br><span class="line">server-id &#x3D; 2</span><br><span class="line">#relay_log的位置</span><br><span class="line">relay_log&#x3D;mysql-relay-bin</span><br><span class="line">log-slave-updates &#x3D; 1</span><br><span class="line">#设置需要同步的数据库  </span><br><span class="line">#replicate_wild_do_table&#x3D;user_db.%  </span><br><span class="line">#屏蔽系统库同步  </span><br><span class="line">replicate_wild_ignore_table&#x3D;mysql.%  </span><br><span class="line">replicate_wild_ignore_table&#x3D;information_schema.%  </span><br><span class="line">replicate_wild_ignore_table&#x3D;performance_schema.% </span><br><span class="line">#只读</span><br><span class="line">read-only &#x3D; 1</span><br><span class="line">default-time-zone&#x3D;&#39;+08:00&#39;</span><br><span class="line">[client]</span><br><span class="line">default-character-set&#x3D;utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set&#x3D;utf8</span><br></pre></td></tr></table></figure><p>重启master和slave</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker restart master</span><br><span class="line">[root@msr ~]# docker restart slave</span><br></pre></td></tr></table></figure><p>下一步在Master数据库创建数据同步用户，授予用户 slave REPLICATION SLAVE权限和REPLICATION CLIENT权限，用于在主从库之间同步数据。首先要进入到docker容器内，也可以通过向Navicat等工具执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker exec -it master &#x2F;bin&#x2F;bash</span><br><span class="line">root@207f37f4c64a:&#x2F;# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 1633</span><br><span class="line">Server version: 5.7.30-log MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000004 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>重启数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@msr ~]# docker restart master</span><br><span class="line">[root@msr ~]# docker restart slave</span><br></pre></td></tr></table></figure><p>在salve中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host&#x3D;&#39;192.168.74.130&#39;, master_user&#x3D;&#39;slave&#39;, master_password&#x3D;&#39;123456&#39;, master_port&#x3D;3306, master_log_file&#x3D;&#39;mysql-bin.000004&#39;, master_log_pos&#x3D; 154, master_connect_retry&#x3D;30;</span><br></pre></td></tr></table></figure><p><strong>master_host</strong> ：Master的地址，指的是容器的独立ip,可以通过docker inspect –format=’ {{.NetworkSettings.IPAddress}} ‘容器名称|容器id`查询容器的ip，这个命令查看的是容器的Host，同服务器下可以使用。不同服务器下就要使用服务的真实IP地址。</p><p><strong>master_port</strong>：Master的端口号，指的是容器的端口号</p><p><strong>master_user</strong>：用于数据同步的用户</p><p><strong>master_password</strong>：用于同步的用户的密码</p><p><strong>master_log_file</strong>：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值</p><p><strong>master_log_pos</strong>：从哪个 Position 开始读，即上文中提到的 Position 字段的值</p><p><strong>master_connect_retry</strong>：如果连接失败，重试的时间间隔，单位是秒，默认是60秒</p><p>查看slave的状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">show slave status\\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: </span><br><span class="line">                  Master_Host: 192.168.74.130</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000001</span><br><span class="line">                Relay_Log_Pos: 4</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: No</span><br><span class="line">            Slave_SQL_Running: No</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 154</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: NULL</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 1045</span><br><span class="line">                Last_IO_Error: error connecting to master &#39;slave@47.96.175.101:3306&#39; - retry-time: 60  retries: 10</span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 0</span><br><span class="line">                  Master_UUID: </span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: </span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: 200628 09:03:36</span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>正常情况下Slave_IO_Running: No和Slave_SQL_Running: No。因为我们还没有开启主从复制过程。使用<code>start slave</code>开启主从复制过程，然后再次查询主从同步状态show slave status \G;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.74.130</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 154</span><br><span class="line">               Relay_Log_File: edu-mysql-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 154</span><br><span class="line">              Relay_Log_Space: 531</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: 0994ae5c-b83a-11ea-9769-0242ac110003</span><br><span class="line">             Master_Info_File: &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>Slave_IO_State: Waiting for master to send event，说明正在等待master的数据。Slave_IO_Running: Yes和Slave_SQL_Running: Yes说明主从复制已经开启。此时可以测试数据同步是否成功。</p><h1 id="配置过程中可能出现的错误"><a href="#配置过程中可能出现的错误" class="headerlink" title="配置过程中可能出现的错误"></a>配置过程中可能出现的错误</h1><p>Slave_IO_State: Connecting to master或Slave_IO_Running:Connectiog。说明从库一直在尝试连接主库，所以可能是：</p><ul><li>主库的Host地址不对</li><li>端口是否不对</li><li>用于连接主库的用户和密码是否不对</li><li>master_log_file和master_log_pos是否和主库的不一致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="docker" scheme="http://www.maishuren.top/tags/docker/"/>
    
      <category term="mysql" scheme="http://www.maishuren.top/tags/mysql/"/>
    
      <category term="主从复制" scheme="http://www.maishuren.top/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据库中间件ShardingSphere</title>
    <link href="http://www.maishuren.top/posts/middleware/202006261803-index.html"/>
    <id>http://www.maishuren.top/posts/middleware/202006261803-index.html</id>
    <published>2020-06-26T10:03:17.000Z</published>
    <updated>2020-07-13T14:31:02.845Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是ShardingSphere？"><a href="#什么是ShardingSphere？" class="headerlink" title="什么是ShardingSphere？"></a>什么是ShardingSphere？</h1><p>Apache ShardingSphere 是一套开源的分布式数据库中间件解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款相互独立，却又能够混合部署配合使用的产品组成。 它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><p>Apache ShardingSphere 定位为关系型数据库中间件，旨在充分合理地在分布式的场景下利用关系型数据库的计算和存储能力，而并非实现一个全新的关系型数据库。 它通过关注不变，进而抓住事物本质。关系型数据库当今依然占有巨大市场，是各个公司核心业务的基石，未来也难于撼动，我们目前阶段更加关注在原有基础上的增量，而非颠覆。</p><p><strong>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目</strong>。</p><p>官网：<a href="http://shardingsphere.apache.org/index_zh.html" target="_blank" rel="noopener">http://shardingsphere.apache.org/index_zh.html</a></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/shardingsphere-scope.png" alt=""></p><h1 id="Sharding-JDBC简介"><a href="#Sharding-JDBC简介" class="headerlink" title="Sharding-JDBC简介"></a>Sharding-JDBC简介</h1><p>定位为轻量级Java框架，在Java的JDBC层提供的额外服务。 它使用客户端直连数据库，以jar包形式提供服务，无需额外部署和依赖，可理解为增强版的JDBC驱动，完全兼容JDBC和各种ORM框架。</p><ul><li>适用于任何基于JDBC的ORM框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用JDBC。</li><li>支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP等。</li><li>支持任意实现JDBC规范的数据库。目前支持MySQL，Oracle，SQLServer，PostgreSQL以及任何遵循SQL92标准的数据库。</li><li><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-jdbc-brief.png" alt=""></li></ul><h1 id="Sharding-Proxy简介"><a href="#Sharding-Proxy简介" class="headerlink" title="Sharding-Proxy简介"></a>Sharding-Proxy简介</h1><p>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前先提供MySQL/PostgreSQL版本，它可以使用任何兼容MySQL/PostgreSQL协议的访问客户端(如：MySQL Command Client, MySQL Workbench, Navicat等)操作数据，对DBA更加友好。</p><ul><li>向应用程序完全透明，可直接当做MySQL/PostgreSQL使用。</li><li>适用于任何兼容MySQL/PostgreSQL协议的的客户端。</li></ul><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-proxy-brief_v2.png" alt=""></p><p>由此可见，使用了Sharding-Proxy之后，我们的操作都是去操作Sharding-Proxy不需要去操作MySQL，相当于我们发送SQL操作，让这个代理去操作数据库。</p><h1 id="Sharding-Sidecar简介（开发中）"><a href="#Sharding-Sidecar简介（开发中）" class="headerlink" title="Sharding-Sidecar简介（开发中）"></a>Sharding-Sidecar简介（开发中）</h1><p>定位为Kubernetes的云原生数据库代理，以Sidecar的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的的啮合层，即Database Mesh，又可称数据网格。</p><p>Database Mesh的关注重点在于如何将分布式的数据访问应用与数据库有机串联起来，它更加关注的是交互，是将杂乱无章的应用与数据库之间的交互有效的梳理。使用Database Mesh，访问数据库的应用和数据库终将形成一个巨大的网格体系，应用和数据库只需在网格体系中对号入座即可，它们都是被啮合层所治理的对象。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/sharding-sidecar-brief_v2.png" alt=""></p><h1 id="Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比"><a href="#Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比" class="headerlink" title="Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比"></a>Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar的对比</h1><table><thead><tr><th align="left"></th><th align="left"><em>Sharding-JDBC</em></th><th align="left"><em>Sharding-Proxy</em></th><th><em>Sharding-Sidecar</em></th></tr></thead><tbody><tr><td align="left">数据库</td><td align="left">任意</td><td align="left">MySQL</td><td>MySQL</td></tr><tr><td align="left">连接消耗数</td><td align="left">高</td><td align="left">低</td><td>高</td></tr><tr><td align="left">异构语言</td><td align="left">仅Java</td><td align="left">任意</td><td>任意</td></tr><tr><td align="left">性能</td><td align="left">损耗低</td><td align="left">损耗略高</td><td>损耗低</td></tr><tr><td align="left">无中心化</td><td align="left">是</td><td align="left">否</td><td>是</td></tr><tr><td align="left">静态入口</td><td align="left">无</td><td align="left">有</td><td>无</td></tr></tbody></table><h1 id="混合搭配使用"><a href="#混合搭配使用" class="headerlink" title="混合搭配使用"></a>混合搭配使用</h1><p>Sharding-JDBC采用无中心化架构，适用于Java开发的高性能的轻量级OLTP应用；Sharding-Proxy提供静态入口以及异构语言的支持，适用于OLAP应用以及对分片数据库进行管理和运维的场景。</p><p>ShardingSphere是多接入端共同组成的生态圈。 通过混合使用Sharding-JDBC和Sharding-Proxy，并采用同一注册中心统一配置分片策略，能够灵活的搭建适用于各种场景的应用系统，架构师可以更加自由的调整适合于当前业务的最佳系统架构。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/shardingsphere-hybrid.png" alt=""></p><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><p>数据库中的数据量不一定是可控的，在未进行分库分表的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作，增删改查的开销 也会越来越大；另外由于无法进行分布式式部署，而一台服务器的资源（CPU、磁盘、内<br>存、IO 等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。</p><p>分库分表就是为了解决由于数据量过大而导致数据库性能降低的问题，将原来独立的数据库拆分成若干数据库组成，将数据大表拆分成若干数据表组成，使得单一数据库、单一数 据表的数据量变小，从而达到提升数据库性能的目的。</p><p>数据库的切分指的是通过某种特定的条件，将我们存放在同一个数据库中的数据分散存放到多个数据库（主机）中，以达到分散单台设备负载的效果，即分库分表。数据的切分根据其切分规则的类型，可以分为 垂直切分 和水平切分。</p><h2 id="垂直切分"><a href="#垂直切分" class="headerlink" title="垂直切分"></a>垂直切分</h2><p>垂直切分： 把单一的表拆分成多个表，并分散到不同的数据库（主机）上。  </p><p>一个数据库有多个表构成，每个表对应不同的业务，垂直切分是只按照业务将表进行分类， </p><p>将其分布到不同的数据库上，这样就将数据分担到了不同的库上（专库专用）。  </p><p>例如：  </p><p>有如下几张表：  </p><ul><li>用户信息表（User）  </li><li>课程信息表（Courses ）  </li><li>订单信息表（Orders ）  </li><li>针对以上案例，垂直切分就是根据每个表的不同业务进行切分。  </li><li>比如 User 表，Courses 表和 Orders 表，将每个表切分到不同的数据库上。  </li></ul><p><strong>垂直切分的优点：</strong></p><p> （1）拆分后业务清晰，系统之间进行整合或扩展很容易。  </p><p> （2）按照成本、应用的等级、应用的类型等奖表放到不同的机器上，便于管理，数据维护简单。  </p><p><strong>垂直切分的缺点：</strong>  </p><p> （1）部分业务表无法关联(Join), 只能通过接口方式解决，提高了系统的复杂度。  </p><p> （2）受每种业务的不同限制，存在单库性能瓶颈，不易进行数据扩展和提升性能。  </p><p> （3）事务处理变得复杂。  </p><p><strong>垂直分表：</strong></p><p>例如：课程表中含有多个字段，我们可以通过垂直分表，把一些属性进行拆分。这样假如对“课程名称”进行修改，只会锁定“课程基本信息表”，同时对于一个表的访问变成了两个表的访问，业务复杂度也会相对上升。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/cz1.png" alt=""></p><p><strong>垂直分库：</strong></p><p>根据不同的业务，专门建立一个数据库来存储业务相关的表。例如在”商品表“专门建立一个”商品数据库“，”订单表“建立一个“订单数据库”，分库之后，同时也可以对商品表进行分表的。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/czfk.png" alt=""></p><h2 id="水平切分"><a href="#水平切分" class="headerlink" title="水平切分"></a>水平切分</h2><p>水平切分：根据表中数据的逻辑关系，将表中的数据按照某种条件拆分到多台数据库上。  </p><p>与垂直切分对比，水平切分不是将表进行分类，而是将其按照某个字段的某种规则分散到多个库中，在每个表中包含一部分数据，所有表加起来就是全量的数据。  </p><p>简单来说，我们可以将对数据的水平切分理解为按照数据行进行切分，就是将表中的某些行切分到一个数据库表中，而将其他行切分到其他数据库表中。这种切分方式根据单表的数据量的规模来切分，保证单表的容量不会太大，从而保证了单表的查询等处理能力  </p><p>例如将用户的信息表拆分成 User1、User2 等，表结构是完全一样的。我们通常根据某些特定的规则来划分表，比如根据用户的 ID 来取模划分。  </p><p><strong>举例：</strong></p><p>在博客类系统中，读取量一般都会很大。当同时有 100 万个用户在浏览时，如果是单表,则单表会进行 100 万次请求，如果是单库，数据库就会承受 100 万次的请求压力。  如果采取水平切分来减少每个单表的压力，将其分为 100 个表，并且分布在 10 个数据库 中，每个表进行 1 万次请求，则每个数据库会承受 10 万次的请求压力，虽然这不可能绝对平均，但是这样，压力就减少了很多，并且是成倍减少的。  </p><p><strong>水平切分的优点：</strong></p><p> （1）单库单表的数据保持在一定的量级，有助于性能的提高。  </p><p> （2）切分的表的结构相同，应用层改造较少，只需要增加路由规则即可。  </p><p> （3）提高了系统的稳定性和负载能力。  </p><p><strong>水平切分的缺点：</strong></p><p> （1）切分后，数据是分散的，很难利用数据库的Join 操作，跨库 Join 性能较差。  </p><p> （2）分片事务的一致性难以解决，数据扩容的难度和维护量极大。</p><p><strong>水平分表：</strong></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/spfb.png" alt=""></p><p><strong>水平分库：</strong></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/spfk.png" alt=""></p><h1 id="分库分表的应用和问题"><a href="#分库分表的应用和问题" class="headerlink" title="分库分表的应用和问题"></a>分库分表的应用和问题</h1><p>应用：</p><ul><li>在数据设计时可以考虑垂直分库和垂直分表</li><li>随着数据库数据量的增加，不要马上考虑水平切分，首先考虑使用如引入缓存处理、读写分离、使用数据库索引优化等方式，如果这些方式都不能根本解决问题，再考虑水平分库和水平分表。</li></ul><p>问题：</p><ul><li>跨界点连接查询(join查询)问题</li><li>多数据源管理问题</li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>1、环境：SpringBoot2.2.2+MyBatis-Plus+Sharding-JDBC+Druid</p><p>创建父工程，Maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.msr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ShardingSphere-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Sharding-jdbc-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Sharding-Proxy-demo<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Sharding-jdbc-demo的maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/sharding-jdbc-core --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-namespace<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、按照水平分表的方式，创建数据库和数据库表</p><p>（1）创建数据库course_db</p><p>（2）在数据库创建两张表 course_1 和 course_2</p><p>（3）约定规则：如果添加课程id 是偶数把数据添加course_1，如果奇数添加到course_2  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE test;</span><br><span class="line">USE test;</span><br><span class="line">DROP TABLE IF EXISTS &#96;course_1&#96;;</span><br><span class="line">CREATE TABLE &#96;course_1&#96;  (</span><br><span class="line">  &#96;course_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  &#96;user_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_status&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;course_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;course_2&#96;;</span><br><span class="line">CREATE TABLE &#96;course_2&#96;  (</span><br><span class="line">  &#96;course_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_name&#96; varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  &#96;user_id&#96; bigint(20) NOT NULL,</span><br><span class="line">  &#96;course_status&#96; varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;course_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现水平分表"><a href="#Sharding-JDBC实现水平分表" class="headerlink" title="Sharding-JDBC实现水平分表"></a>Sharding-JDBC实现水平分表</h1><p>1.编写application.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">XXX</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>2.简单编写mapper、controller、ShardingJdbcApplication启动类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CourseMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Course</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CourseMapper courseMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@RequestBody Course course)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insert = courseMapper.insert(course);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"query/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Course <span class="title">queryById</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> courseMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.msr.shardingjdbc.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingJdbcApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ShardingJdbcApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试</p><p>使用PostMan调用add方法，添加成功之后，查看控制台输出的日志，course_id为奇数。保存在course2表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 2700 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds0 ::: INSERT INTO course_2   (course_name, user_id, course_status, course_id) VALUES (?, ?, ?, ?) ::: [docker入门到实践, 100, 1, 483626785309720577]</span><br></pre></td></tr></table></figure><p>使用“483626785309720577”再去调用queryById方法，查看日志输出，确实是去course2表中查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 10220 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds0 ::: SELECT course_id,course_name,user_id,course_status FROM course_2 WHERE course_id&#x3D;? ::: [483626785309720577]</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现水平分库"><a href="#Sharding-JDBC实现水平分库" class="headerlink" title="Sharding-JDBC实现水平分库"></a>Sharding-JDBC实现水平分库</h1><p>1.修改配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds0,ds1</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds0:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test2?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0，ds1中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>2.水平分库的策略</p><p>根据user_id去分库，当user_id为偶数时，数据添加进数据源ds1中，奇数则是路由到数据源ds2</p><p>3.测试</p><p>启动的时候，通过日志可以看出，两个数据源都已经完成初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO 14796 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 14796 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br></pre></td></tr></table></figure><p>使用PostMan调用add方法，添加成功之后，查看控制台输出的日志。course_id=1276767761787297794，user_id=10。课程id为偶数，user_id也为偶数。所以数据会被保存在数据源ds1中的course1表中。对比日志，说明水平分库分表的策略是成功的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 8684 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO course_1   (course_id, course_name, user_id, course_status) VALUES (?, ?, ?, ?) ::: [1276767761787297794, docker入门到实践, 10, 1]</span><br></pre></td></tr></table></figure><p>然后试一下查询，使用user_id和course_id作用查询条件。controller新增一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"query/&#123;uid&#125;/&#123;cid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Course <span class="title">query</span><span class="params">(@PathVariable(<span class="string">"uid"</span>)</span> Long uid, @<span class="title">PathVariable</span><span class="params">(<span class="string">"cid"</span>)</span> Long cid) </span>&#123;</span><br><span class="line">QueryWrapper&lt;Course&gt; queryWrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.lambda()</span><br><span class="line">    .eq(uid != <span class="keyword">null</span>, Course::getUserId, uid)</span><br><span class="line">                .eq(cid != <span class="keyword">null</span>, Course::getCourseId, cid);java</span><br><span class="line">    <span class="keyword">return</span> courseMapper.selectOne(queryWrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PostMan调用（uid=10，cid=1276767761787297794）查看结果：sql查询确实是会路由到ds1下的course1表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[nio-8080-exec-2] ShardingSphere-SQL                       : Actual SQL: ds1 ::: SELECT  course_id,course_name,user_id,course_status  FROM course_1 WHERE  user_id &#x3D; ? AND course_id &#x3D; ? ::: [10, 1276767761787297794]</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现垂直切分"><a href="#Sharding-JDBC实现垂直切分" class="headerlink" title="Sharding-JDBC实现垂直切分"></a>Sharding-JDBC实现垂直切分</h1><p>通过Sharding-JDBC进行垂直分库，实现专库专表。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/ShardingSphere/czfk.png" alt=""></p><p>1.新建两个数据库和两张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE production_db;</span><br><span class="line">USE production_db;</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_production&#96;;</span><br><span class="line">CREATE TABLE &#96;t_production&#96;  (</span><br><span class="line">  &#96;pid&#96; bigint(50) NOT NULL,</span><br><span class="line">  &#96;pname&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;price&#96; int(20) NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;pid&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br><span class="line"></span><br><span class="line">CREATE DATABASE order_db;</span><br><span class="line">USE order_db;</span><br><span class="line">DROP TABLE IF EXISTS &#96;t_order&#96;;</span><br><span class="line">CREATE TABLE &#96;t_order&#96;  (</span><br><span class="line">  &#96;order_id&#96; bigint(50) NOT NULL,</span><br><span class="line">  &#96;order_name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;create_time&#96; TIMESTAMP NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;order_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><p>2.编写相关的实体类，Mapper、测试的Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> String orderName;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"t_production"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span></span><br><span class="line">    <span class="keyword">private</span> Long pid;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> Integer price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductionMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Production</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductionMapper productionMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add2</span><span class="params">(@RequestBody Order order)</span> </span>&#123;</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">int</span> insert = orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"add3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add3</span><span class="params">(@RequestBody Production production)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> insert = productionMapper.insert(production);</span><br><span class="line">        <span class="keyword">return</span> insert == <span class="number">0</span> ? <span class="string">"添加失败"</span> : <span class="string">"添加成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="comment">#配置数据源的名称</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">ds1,ds2,ds3,ds4</span></span><br><span class="line">      <span class="comment">#配置每个数据源</span></span><br><span class="line">      <span class="attr">ds1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test2?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line"><span class="comment">#垂直分库的数据源</span></span><br><span class="line">      <span class="attr">ds3:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/production_db?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line">      <span class="attr">ds4:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/order_db?serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">mai1208142397</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="comment">#表的分布情况</span></span><br><span class="line">      <span class="attr">tables:</span></span><br><span class="line">        <span class="attr">course:</span> <span class="comment"># course表</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;1..2&#125;.course_$-&gt;&#123;1..2&#125;</span> <span class="comment">#表达式，ds0，ds1中的course_1和course_2</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">course_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="comment">#数据表分片策略：course_id为偶数时添加进course1中，奇数添加进course2中</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">course_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">course_$-&gt;&#123;course_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line">          <span class="comment">#数据库分片策略</span></span><br><span class="line">          <span class="attr">database-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">ds$-&gt;&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">+1&#125;</span></span><br><span class="line"><span class="comment">#专库</span></span><br><span class="line">        <span class="attr">production:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;3&#125;.t_production</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">pid</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">pid</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_production</span></span><br><span class="line">        <span class="attr">order:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds$-&gt;&#123;4&#125;.t_order</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">order_id</span> <span class="comment">#主键生成的例</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span> <span class="comment">#使用雪花算法生成主键</span></span><br><span class="line">          <span class="attr">table-strategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">sharding-column:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">t_order</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>4.测试</p><p>启动，四个数据源都已经初始化了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-3&#125; inited</span><br><span class="line">INFO 1240 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-4&#125; inited</span><br></pre></td></tr></table></figure><p>通过PostMan调用controller方法进行测试，sql日志如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO 13384 --- [nio-8080-exec-2] ShardingSphere-SQL                       : Actual SQL: ds1 ::: INSERT INTO t_production   (pid, pname, price) VALUES (?, ?, ?) ::: [1277152899687895042, 小米10pro, 2999]</span><br><span class="line"></span><br><span class="line">INFO 13384 --- [nio-8080-exec-5] ShardingSphere-SQL                       : Actual SQL: ds2 ::: INSERT INTO t_order   (order_id, order_name, create_time) VALUES (?, ?, ?) ::: [1277153290127265794, 小米10pro-24期免息, 2020-06-28 16:14:07.384]</span><br></pre></td></tr></table></figure><h1 id="Sharding-JDBC实现读写分离"><a href="#Sharding-JDBC实现读写分离" class="headerlink" title="Sharding-JDBC实现读写分离"></a>Sharding-JDBC实现读写分离</h1><p><a href="http://www.maishuren.top/posts/mysql/202006281626-index.html">配置MySQL主从复制(一主一从)</a></p><p>在TestController新增一个查询方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"order/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">getOrder</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Long id)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderMapper.selectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yml配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Sharding-Jdbc-demo</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">m0,s0</span></span><br><span class="line"><span class="comment"># 主服务器数据源</span></span><br><span class="line">    <span class="attr">m0:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.74.129:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#从服务器数据源</span></span><br><span class="line">    <span class="attr">s0:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.74.130:3306/test?serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">masterslave:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ms</span></span><br><span class="line"><span class="comment">#主库和从库逻辑数据源定义：ds0</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">master-slave-rules:</span> </span><br><span class="line">        <span class="attr">ds0:</span> </span><br><span class="line">          <span class="attr">master-data-source-name:</span> <span class="string">m0</span></span><br><span class="line">      <span class="attr">master-slave-rules:</span></span><br><span class="line">        <span class="attr">ds0:</span></span><br><span class="line">          <span class="attr">slave-data-source-names:</span> <span class="string">s0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t_user 分表策略，固定分配至ds0 的t_user 真实表</span></span><br><span class="line">    <span class="attr">tables:</span></span><br><span class="line">       <span class="attr">t_user:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">ds0.t_order</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span> </span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure><p>启动工程，可以看到m0和s0两个数据源初始化完毕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO 2616 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-1&#125; inited</span><br><span class="line">INFO 2616 --- [           main] com.alibaba.druid.pool.DruidDataSource   : &#123;dataSource-2&#125; inited</span><br></pre></td></tr></table></figure><p>使用PostMan调用方法add2，执行写操作是在m0即主库中操作的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 2616 --- [nio-8080-exec-1] ShardingSphere-SQL                       : Actual SQL: m0 ::: INSERT INTO t_order   (order_id, order_name, create_time) VALUES (?, ?, ?) ::: [1277540210028154881, 红米K30-24期免息, 2020-06-29 17:51:36.081]</span><br></pre></td></tr></table></figure><p>调用getOrder方法时，执行读操作是在s0即从库中操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO 5188 --- [nio-8080-exec-4] ShardingSphere-SQL                       : Actual SQL: s0 ::: SELECT order_id,order_name,create_time FROM t_order WHERE order_id&#x3D;? ::: [1277540210028154881]</span><br></pre></td></tr></table></figure><p>因为MySQL配置是一主一从，在配置了一主多从的时候，只需要把数据源都配置之后，然后加入一下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.shardingsphere.masterslave.name</span>=<span class="string">ms</span></span><br><span class="line"><span class="comment">#负载均衡策略</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.load-balance-algorithm-type</span>=<span class="string">round_robin</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.master-data-source-name</span>=<span class="string">master</span></span><br><span class="line"><span class="meta">spring.shardingsphere.masterslave.slave-data-source-names</span>=<span class="string">slave0,slave1</span></span><br></pre></td></tr></table></figure><h1 id="Sharding-Proxy的使用"><a href="#Sharding-Proxy的使用" class="headerlink" title="Sharding-Proxy的使用"></a>Sharding-Proxy的使用</h1><p>下载安装：<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/downloads/" target="_blank" rel="noopener">官网下载地址：4.x版本</a>，下载压缩包解压缩使用就行。</p><p>使用Docker安装，直接使用官方的镜像即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull apache&#x2F;sharding-proxy</span><br></pre></td></tr></table></figure><p>运行镜像生成容器，必须挂载配置路径到/opt/sharding-proxy/conf，在/opt/software/sharding/lib存放一个MySQL的连接驱动，Sharding-Proxy连接MySQL时用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name sharding-proxy -di -v &#x2F;opt&#x2F;software&#x2F;sharding&#x2F;conf:&#x2F;opt&#x2F;sharding-proxy&#x2F;conf -v &#x2F;opt&#x2F;software&#x2F;sharding&#x2F;lib:&#x2F;opt&#x2F;sharding-proxy&#x2F;ext-lib -e PORT&#x3D;3308 -p13308:3308 apache&#x2F;sharding-proxy:latest</span><br></pre></td></tr></table></figure><p>修改conf里的配置文件</p><p>server.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># If you want to configure orchestration, authorization and proxy properties, please refer to this file.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">######################################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># orchestration:</span></span><br><span class="line"><span class="comment">#  orchestration_ds:</span></span><br><span class="line"><span class="comment">#    orchestrationType: registry_center,config_center,distributed_lock_manager</span></span><br><span class="line"><span class="comment">#    instanceType: zookeeper</span></span><br><span class="line"><span class="comment">#    serverLists: localhost:2181</span></span><br><span class="line"><span class="comment">#    namespace: orchestration</span></span><br><span class="line"><span class="comment">#    props:</span></span><br><span class="line"><span class="comment">#      overwrite: false</span></span><br><span class="line"><span class="comment">#      retryIntervalMilliseconds: 500</span></span><br><span class="line"><span class="comment">#      timeToLiveSeconds: 60</span></span><br><span class="line"><span class="comment">#      maxRetries: 3</span></span><br><span class="line"><span class="comment">#      operationTimeoutMilliseconds: 500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line"> <span class="attr">users:</span></span><br><span class="line">   <span class="attr">root:</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">   <span class="attr">sharding:</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">sharding</span> </span><br><span class="line">     <span class="attr">authorizedSchemas:</span> <span class="string">sharding_db</span></span><br><span class="line"><span class="string">yml</span></span><br><span class="line"><span class="attr">props:</span></span><br><span class="line"> <span class="attr">max.connections.size.per.query:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">acceptor.size:</span> <span class="number">16</span>  <span class="comment"># The default value is available processors count * 2.</span></span><br><span class="line"> <span class="attr">executor.size:</span> <span class="number">16</span>  <span class="comment"># Infinite by default.</span></span><br><span class="line"> <span class="attr">proxy.frontend.flush.threshold:</span> <span class="number">128</span>  <span class="comment"># The default value is 128.</span></span><br><span class="line">   <span class="comment"># LOCAL: Proxy will run with LOCAL transaction.</span></span><br><span class="line">   <span class="comment"># XA: Proxy will run with XA transaction.</span></span><br><span class="line">   <span class="comment"># BASE: Proxy will run with B.A.S.E transaction.</span></span><br><span class="line"> <span class="attr">proxy.transaction.type:</span> <span class="string">LOCAL</span></span><br><span class="line"> <span class="attr">proxy.opentracing.enabled:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">proxy.hint.enabled:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">query.with.cipher.column:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">sql.show:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">allow.range.query.with.inline.sharding:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>config-sharding.yml：配置数据分片策略。在配置文件中有两个数据库的配置：postgresql和MySQL，使用MySQL需要添加mysql的驱动包到lib，在Docker部署Sharding-Proxy容器的时候就已经添加了该jar包。配置和之前Sharding-JDBC的一些配置相似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">######################################################################################################</span><br><span class="line">#</span><br><span class="line"># If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.</span><br><span class="line">#</span><br><span class="line">######################################################################################################</span><br><span class="line"></span><br><span class="line">schemaName: sharding_db</span><br><span class="line"></span><br><span class="line">dataSources:</span><br><span class="line"> ds_0:</span><br><span class="line">   url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;demo_ds_0?serverTimezone&#x3D;UTC&amp;useSSL&#x3D;false</span><br><span class="line">   username: root</span><br><span class="line">   password:</span><br><span class="line">   connectionTimeoutMilliseconds: 30000</span><br><span class="line">   idleTimeoutMilliseconds: 60000</span><br><span class="line">   maxLifetimeMilliseconds: 1800000</span><br><span class="line">   maxPoolSize: 50</span><br><span class="line"> ds_1:</span><br><span class="line">   url: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;demo_ds_1?serverTimezone&#x3D;UTC&amp;useSSL&#x3D;false</span><br><span class="line">   username: root</span><br><span class="line">   password:</span><br><span class="line">   connectionTimeoutMilliseconds: 30000</span><br><span class="line">   idleTimeoutMilliseconds: 60000</span><br><span class="line">   maxLifetimeMilliseconds: 1800000</span><br><span class="line">   maxPoolSize: 50</span><br><span class="line"></span><br><span class="line">shardingRule:</span><br><span class="line"> tables:</span><br><span class="line">   t_order:</span><br><span class="line">     actualDataNodes: ds_$&#123;0..1&#125;.t_order_$&#123;0..1&#125;</span><br><span class="line">     tableStrategy:</span><br><span class="line">       inline:</span><br><span class="line">         shardingColumn: order_id</span><br><span class="line">         algorithmExpression: t_order_$&#123;order_id % 2&#125;</span><br><span class="line">     keyGenerator:</span><br><span class="line">       type: SNOWFLAKE</span><br><span class="line">       column: order_id</span><br><span class="line">   t_order_item:</span><br><span class="line">     actualDataNodes: ds_$&#123;0..1&#125;.t_order_item_$&#123;0..1&#125;</span><br><span class="line">     tableStrategy:</span><br><span class="line">       inline:</span><br><span class="line">         shardingColumn: order_id</span><br><span class="line">         algorithmExpression: t_order_item_$&#123;order_id % 2&#125;</span><br><span class="line">     keyGenerator:</span><br><span class="line">       type: SNOWFLAKE</span><br><span class="line">       column: order_item_id</span><br><span class="line"> bindingTables:</span><br><span class="line">   - t_order,t_order_item</span><br><span class="line"> defaultDatabaseStrategy:</span><br><span class="line">   inline:</span><br><span class="line">     shardingColumn: user_id</span><br><span class="line">     algorithmExpression: ds_$&#123;user_id % 2&#125;</span><br><span class="line"> defaultTableStrategy:</span><br><span class="line">   none:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Apache顶级项目分布式数据库中间件ShardingSphere
    
    </summary>
    
    
      <category term="中间件" scheme="http://www.maishuren.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
      <category term="ShardingSphere" scheme="http://www.maishuren.top/tags/ShardingSphere/"/>
    
      <category term="Sharding-JDBC" scheme="http://www.maishuren.top/tags/Sharding-JDBC/"/>
    
      <category term="Sharding-Proxy" scheme="http://www.maishuren.top/tags/Sharding-Proxy/"/>
    
  </entry>
  
  <entry>
    <title>大数据之hadoop：分布式文件系统HDFS</title>
    <link href="http://www.maishuren.top/posts/hadoop/202006261023-index.html"/>
    <id>http://www.maishuren.top/posts/hadoop/202006261023-index.html</id>
    <published>2020-06-26T02:23:16.000Z</published>
    <updated>2020-06-26T02:38:41.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HDFS定义"><a href="#HDFS定义" class="headerlink" title="HDFS定义"></a>HDFS定义</h1><p>HDFS是一个文件系统，用于存储文件，荣国目录树来定义文件；其次，他是分布式的，又很多服务器联合实现其功能，集群中的服务器有各自的角色。</p><p>HDFS的使用场景：适合一次性读写，多次读出的场景，且不支持文件的修改。适合用来做数据分析，不适合频繁修改的网盘应用。</p><h2 id="HDFS的优缺点"><a href="#HDFS的优缺点" class="headerlink" title="HDFS的优缺点"></a>HDFS的优缺点</h2><ol><li><p>优点</p><ul><li><p>高容错性</p><p>数据自动保存多个副本。通过增加副本的形式，提高容错性。</p><p>某个副本丢失后，可以自动恢复</p></li><li><p>适合大数据</p><p>能够处理数据规模达到GB、TB、甚至PB级别的数据。</p><p>能够处理百万规模以上的文件数量。</p></li><li><p>可构建在连接机器上，通过多副本机制，提高可靠性</p></li></ul></li><li><p>缺点</p><ul><li><p>不适合低时延数据访问，比如毫秒级的存储数据，是做不到的</p></li><li><p>无法高效的对大量小文件进行存储</p><p>存储大量小文件的话，会占用NameNode大量的内存，来存储文件目录和块信息。这样是不可取的，因为NameNode的内存总是有限制的。</p><p>小文件存储的寻址事件会超过读取时间，违反了HDFS的设计目标</p></li><li><p>不支持并发写入和文件随机修改</p><p>一个文件只能有一个写，不允许多个线程同时写</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="大数据" scheme="http://www.maishuren.top/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="http://www.maishuren.top/tags/hadoop/"/>
    
      <category term="HDFS" scheme="http://www.maishuren.top/tags/HDFS/"/>
    
  </entry>
  
  <entry>
    <title>记录一次Algolia的ApiKey使用异常</title>
    <link href="http://www.maishuren.top/posts/bug-log/202006251725-index.html"/>
    <id>http://www.maishuren.top/posts/bug-log/202006251725-index.html</id>
    <published>2020-06-25T09:25:24.000Z</published>
    <updated>2020-06-26T15:08:36.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h1><p>第一次的使用Algolia作为博客的搜索系统，一开始设置的时候没怎么关注。在后面写了很多文章想要跟新一下Algolia的索引的时候，除了问题，网站根本搜索不了，起了官网一看发现索引过期了，再去看一下邮箱，发现了之前不注意到一封邮件。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia.jpg" alt=""></p><p>所以重新修改使用计划，重新选择社区版</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia2.jpg" alt=""></p><h1 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h1><p>在重新生成索引的时候，出现错误：没有足够的权限去更新索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hexo-algolia] Not enough rights to update an object near line:1 column:721</span><br></pre></td></tr></table></figure><p>在Algolia的控制台中的API Keys中可以看到，因为一开始在博客的配置中是使用Search-Only API key，只能够搜索，不能进行更新索引，这个API Key没有足够权限，然后又发现是因为初始化就有的key，不能对其ACL进行修改。那只能新增一个Key。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia3.jpg" alt=""></p><p>点击<code>New Api Key</code></p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia4.jpg" alt=""></p><p>选择权限</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/error/Algolia5.jpg" alt=""></p><p>最后在生成索引的时候，使用新生成的，有足够权限的API Key</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="踩坑日志" scheme="http://www.maishuren.top/categories/%E8%B8%A9%E5%9D%91%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="hexo" scheme="http://www.maishuren.top/tags/hexo/"/>
    
      <category term="Algolia" scheme="http://www.maishuren.top/tags/Algolia/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：栈</title>
    <link href="http://www.maishuren.top/posts/datastructure/202006231844-index.html"/>
    <id>http://www.maishuren.top/posts/datastructure/202006231844-index.html</id>
    <published>2020-06-23T10:44:45.000Z</published>
    <updated>2020-06-23T10:46:02.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><ul><li>栈是一种特殊的线性表，只能在一端进行操作</li><li>往栈中添加元素的操作，一般叫做 push，入栈</li><li>从栈中移除元素的操作，一般叫做 pop，出栈（只能移除栈顶元素，也叫做：弹出栈顶元素）</li><li>后进先出的原则，Last In First Out，LIFO</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="http://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="http://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：链表</title>
    <link href="http://www.maishuren.top/posts/datastructure/202006231045-index.html"/>
    <id>http://www.maishuren.top/posts/datastructure/202006231045-index.html</id>
    <published>2020-06-23T02:45:43.000Z</published>
    <updated>2020-06-26T15:10:35.658Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a>链表（Linked List）</h1><ul><li>动态数组有个明显的缺点</li><li>可能会造成内存空间的大量浪费</li><li>链表可以办到用到多少就申请多少内存</li><li>链表是一种链式存储的线性表，所有元素的内存地址不一定是连续的</li></ul><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/10.jpg" alt=""></p><h2 id="链表的设计"><a href="#链表的设计" class="headerlink" title="链表的设计"></a>链表的设计</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/11.jpg" alt=""></p><p>链表的方法都和动态数组的方法一致，所以两者通过继承AbstractList，重写方法实现各自的功能。</p><h2 id="清空元素"><a href="#清空元素" class="headerlink" title="清空元素"></a>清空元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/12.jpg" alt=""></p><h2 id="指定索引位置添加元素"><a href="#指定索引位置添加元素" class="headerlink" title="指定索引位置添加元素"></a>指定索引位置添加元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/13.jpg" alt=""></p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/14.jpg" alt=""></p><h2 id="虚拟头节点"><a href="#虚拟头节点" class="headerlink" title="虚拟头节点"></a>虚拟头节点</h2><p>有时候为了让代码更加精简，统一所有节点的处理逻辑，可以在最前面增加一个虚拟的头结点（不存储数据）。因为在边界(index=0)，这个位置的一些操作是要格外的注意，增加了虚拟头节点之后，这些操作便可以统一处理。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/15.jpg" alt=""></p><h2 id="代码实现：单向链表"><a href="#代码实现：单向链表" class="headerlink" title="代码实现：单向链表"></a>代码实现：单向链表</h2><p>顶层接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元数数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断列表是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单向链表实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//虚拟头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        first = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev = index == <span class="number">0</span> ? first : node(index - <span class="number">1</span>);</span><br><span class="line">        prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; prev = index == <span class="number">0</span> ? first : node(index - <span class="number">1</span>);</span><br><span class="line">        Node&lt;E&gt; node = prev.next;</span><br><span class="line">        prev.next = node.next;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node.element);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单向循环链表"><a href="#单向循环链表" class="headerlink" title="单向循环链表"></a>单向循环链表</h1><p>单向循环链表就是单项链表的尾元素的next指向头元素</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/17.jpg" alt=""></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.msr.datastructure.linklist;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 虚拟头节点：单项循环链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaiShuRen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/5/24 11:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: v1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleCircleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(element).append(<span class="string">"_"</span>).append(next.element);</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; newFirst = <span class="keyword">new</span> Node&lt;&gt;(element, first);</span><br><span class="line">            <span class="comment">// 拿到最后一个节点</span></span><br><span class="line">            Node&lt;E&gt; last = (size == <span class="number">0</span>) ? newFirst : node(size - <span class="number">1</span>);</span><br><span class="line">            last.next = newFirst;</span><br><span class="line">            first = newFirst;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            prev.next = <span class="keyword">new</span> Node&lt;&gt;(element, prev.next);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">                first = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node&lt;E&gt; last = node(size - <span class="number">1</span>);</span><br><span class="line">                first = first.next;</span><br><span class="line">                last.next = first;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node(index - <span class="number">1</span>);</span><br><span class="line">            node = prev.next;</span><br><span class="line">            prev.next = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/16.jpg" alt=""></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="comment">// 往最后面添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            Node&lt;E&gt; oldLast = last;</span><br><span class="line">            last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">// 这是链表添加的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = last;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oldLast.next = last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = next.prev;</span><br><span class="line">            Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev, element, next);</span><br><span class="line">            next.prev = node;</span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        Node&lt;E&gt; prev = node.prev;</span><br><span class="line">        Node&lt;E&gt; next = node.next;</span><br><span class="line">        <span class="comment">// index == 0，第一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// index == size - 1，最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="comment">//1.如果index小于链表容量的一半，则从首元素开始向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.index大于链表容量的一半，从尾元素向前查找</span></span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(prev.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"_"</span>).append(element).append(<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(next.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/18.jpg" alt=""></p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleLinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; current;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        current = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current = current.next;</span><br><span class="line">        <span class="keyword">return</span> current.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; next = current.next;</span><br><span class="line">        E element = remove(current);</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            current = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        Node&lt;E&gt; node = node(index);</span><br><span class="line">        E old = node.element;</span><br><span class="line">        node.element = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// size == 0</span></span><br><span class="line">        <span class="comment">// index == 0</span></span><br><span class="line">        <span class="comment">// 往最后面添加元素</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            Node&lt;E&gt; oldLast = last;</span><br><span class="line">            last = <span class="keyword">new</span> Node&lt;&gt;(oldLast, element, first);</span><br><span class="line">            <span class="comment">// 这是链表添加的第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (oldLast == <span class="keyword">null</span>) &#123;</span><br><span class="line">                first = last;</span><br><span class="line">                first.next = first;</span><br><span class="line">                first.prev = first;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                oldLast.next = last;</span><br><span class="line">                first.prev = last;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; next = node(index);</span><br><span class="line">            Node&lt;E&gt; prev = next.prev;</span><br><span class="line">            Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(prev, element, next);</span><br><span class="line">            next.prev = node;</span><br><span class="line">            prev.next = node;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (next == first) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="keyword">return</span> remove(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">remove</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; prev = node.prev;</span><br><span class="line">            Node&lt;E&gt; next = node.next;</span><br><span class="line">            prev.next = next;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            <span class="comment">// index == 0</span></span><br><span class="line">            <span class="keyword">if</span> (node == first) &#123;</span><br><span class="line">                first = next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// index == size - 1</span></span><br><span class="line">            <span class="keyword">if</span> (node == last) &#123;</span><br><span class="line">                last = prev;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> node.element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.element == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(node.element)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置对应的节点对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.如果index小于链表容量的一半，则从首元素开始向后查找</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; node = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//2.index大于链表容量的一半，从尾元素向前查找</span></span><br><span class="line">            Node&lt;E&gt; node = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">                node = node.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        Node&lt;E&gt; node = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            string.append(node);</span><br><span class="line"></span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E element;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(prev.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(<span class="string">"_"</span>).append(element).append(<span class="string">"_"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(next.element);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="http://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="http://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：动态数组</title>
    <link href="http://www.maishuren.top/posts/datastructure/202006230937-index.html"/>
    <id>http://www.maishuren.top/posts/datastructure/202006230937-index.html</id>
    <published>2020-06-23T01:37:40.000Z</published>
    <updated>2020-06-26T15:09:53.652Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="什么是数据结构？"><a href="#什么是数据结构？" class="headerlink" title="什么是数据结构？"></a>什么是数据结构？</h1><p>数据结构是计算机存储、组织数据的方式。常见的数据结构如下：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/3.jpg" alt=""></p><h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p>线性表是具有 n 个<strong>相同类型元素</strong>的<strong>有限序列</strong>（ n ≥ 0 ）</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/4.jpg" alt=""></p><p>常见的线性表有：</p><ul><li>数组</li><li>链表</li><li>栈</li><li>队列</li><li>哈希表（散列表）</li></ul><h1 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a>数组（Array）</h1><p>数组是一种顺序存储的线性表，所有元素的内存地址是连续的。在很多编程语言中，数组都有个致命的缺点，无法动态修改容量，实际开发中，我们更希望数组的容量是可以动态改变的。</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/5.jpg" alt=""></p><h1 id="动态数组接口设计"><a href="#动态数组接口设计" class="headerlink" title="动态数组接口设计"></a>动态数组接口设计</h1><p>◼ int size();                                         // 元素的数量<br>◼ boolean isEmpty();                       // 是否为空<br>◼ boolean contains(E element);    // 是否包含某个元素<br>◼ void add(E element);                   // 添加元素到最后面<br>◼ E get(int index);                            // 返回index位置对应的元素<br>◼ E set(int index, E element);        // 设置index位置的元素<br>◼ void add(int index, E element); // 往index位置添加元素<br>◼ E remove(int index);                   // 删除index位置对应的元素<br>◼ int indexOf(E element);             // 查看元素的位置<br>◼ void clear();                                 // 清除所有元素</p><h1 id="动态数组设计"><a href="#动态数组设计" class="headerlink" title="动态数组设计"></a>动态数组设计</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/6.jpg" alt=""></p><h2 id="添加元素：add-E-element"><a href="#添加元素：add-E-element" class="headerlink" title="添加元素：add(E element)"></a>添加元素：add(E element)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/7.jpg" alt=""></p><h2 id="删除元素：remove-int-index"><a href="#删除元素：remove-int-index" class="headerlink" title="删除元素：remove(int index)"></a>删除元素：remove(int index)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/8.jpg" alt=""></p><h2 id="指定索引位置添加元素：-add-int-index-E-element"><a href="#指定索引位置添加元素：-add-int-index-E-element" class="headerlink" title="指定索引位置添加元素： add(int index, E element)"></a>指定索引位置添加元素： add(int index, E element)</h2><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/9.jpg" alt=""></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>把原动态数组复制到新的动态组数(比原数组的容量大)</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>MyList接口：定义要实现的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ELEMENT_NOT_FOUND = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清楚所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列表元数数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断列表是否为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否包含某个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素到尾部</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index   索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyAbstractList：抽象类，实现接口MyList一些通用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">MyList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(element) != ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        add(size, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">outOfBounds</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index:"</span> + index + <span class="string">", Size:"</span> + size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line">            outOfBounds(index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态数组的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">MyAbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicArrayListV3</span><span class="params">(<span class="keyword">int</span> capaticy)</span> </span>&#123;</span><br><span class="line">        capaticy = (capaticy &lt; DEFAULT_CAPACITY) ? DEFAULT_CAPACITY : capaticy;</span><br><span class="line">        elements = (E[]) <span class="keyword">new</span> Object[capaticy];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicArrayListV3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仅供参考</span></span><br><span class="line">        <span class="keyword">if</span> (elements != <span class="keyword">null</span> &amp;&amp; elements.length &gt; DEFAULT_CAPACITY) &#123;</span><br><span class="line">            elements = (E[]) <span class="keyword">new</span> Object[DEFAULT_CAPACITY];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123; <span class="comment">// O(1)</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elements[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原来的元素ֵ</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123; <span class="comment">// O(1)</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在index位置插入一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最好：O(1)</span></span><br><span class="line"><span class="comment">         * 最坏：O(n)</span></span><br><span class="line"><span class="comment">         * 平均：O(n)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--) &#123;</span><br><span class="line">            elements[i] = elements[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elements[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125; <span class="comment">// size是数据规模</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除index位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 最好：O(1)</span></span><br><span class="line"><span class="comment">         * 最坏：O(n)</span></span><br><span class="line"><span class="comment">         * 平均：O(n)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E old = elements[index];</span><br><span class="line">        <span class="comment">//index后面的元素往前移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">            elements[i - <span class="number">1</span>] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//原尾元素置空</span></span><br><span class="line">        elements[--size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看元素的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (element == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elements[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (element.equals(elements[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ELEMENT_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证要有capacity的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity &gt;= capacity) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新容量为旧容量的2倍</span></span><br><span class="line">        <span class="comment">// int newCapacity = oldCapacity &lt;&lt; 1;</span></span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"扩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">trim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 30</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elements.length;</span><br><span class="line">        <span class="comment">// 15</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; (newCapacity) || oldCapacity &lt;= DEFAULT_CAPACITY) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剩余空间还很多</span></span><br><span class="line">        E[] newElements = (E[]) <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            newElements[i] = elements[i];</span><br><span class="line">        &#125;</span><br><span class="line">        elements = newElements;</span><br><span class="line"></span><br><span class="line">        System.out.println(oldCapacity + <span class="string">"缩容为"</span> + newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// size=3, [99, 88, 77]</span></span><br><span class="line">        StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        string.append(<span class="string">"size="</span>).append(size).append(<span class="string">", ["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">                string.append(<span class="string">", "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            string.append(elements[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        string.append(<span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">return</span> string.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在Java中也有动态数组的实现ArrayList，本文的动态数组也是模仿jdk实现的ArrayList。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="http://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="http://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法：时间复杂度</title>
    <link href="http://www.maishuren.top/posts/datastructure/202006230817-index.html"/>
    <id>http://www.maishuren.top/posts/datastructure/202006230817-index.html</id>
    <published>2020-06-23T00:17:20.000Z</published>
    <updated>2020-06-26T15:10:05.926Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="如何评判一个算法的好坏？"><a href="#如何评判一个算法的好坏？" class="headerlink" title="如何评判一个算法的好坏？"></a>如何评判一个算法的好坏？</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        result+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果单从执行效率上进行评估，可能会想到这么一种方案。比较不同算法对同一组输入的执行处理时间，这种方案也叫做：事后统计法</li><li>上述方案有比较明显的缺点<ul><li>执行时间严重依赖硬件以及运行时各种不确定的环境因素</li><li>必须编写相应的测算代码</li><li>测试数据的选择比较难保证公正性</li></ul></li><li>一般从以下维度来评估算法的优劣<ul><li>正确性、可读性、健壮性（对不合理输入的反应能力和处理能力）</li><li>时间复杂度（time complexity）：估算程序指令的执行次数（执行时间）</li><li>空间复杂度（space complexity）：估算所需占用的存储空间</li></ul></li></ul><h1 id="大O表示法（Big-O）"><a href="#大O表示法（Big-O）" class="headerlink" title="大O表示法（Big O）"></a>大O表示法（Big O）</h1><ul><li>一般用大O表示法来描述复杂度，它表示的是数据规模 n 对应的复杂度</li><li>忽略常数、系数、低阶</li><li>9 &gt;&gt; O(1)</li><li>2n + 3 &gt;&gt; O(n)</li><li>n² + 2n + 6 &gt;&gt; O(n 2 )</li><li>4n ³ + 3n²+ 22n + 100 &gt;&gt; O(n³)</li><li>写法上，n³ 等价于 n^3</li><li>注意：大O表示法仅仅是一种粗略的分析模型，是一种估算，能帮助我们短时间内了解一个算法的执行效率</li></ul><h1 id="对数阶的细节"><a href="#对数阶的细节" class="headerlink" title="对数阶的细节"></a>对数阶的细节</h1><p>对数阶一般省略底数，不管是怎么以什么为底的对数，都是可以乘以一个<strong>常数</strong>，最后转化为以2为底的对数。所以在计算时间复杂度时，对数都统称为logn。<br>$$<br>\log_2n=\log_29*log_9n<br>$$</p><h1 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h1><table><thead><tr><th>执行次数</th><th>复杂度</th><th>非正式术语</th></tr></thead><tbody><tr><td>12</td><td>O(1)</td><td>常数阶</td></tr><tr><td>3n+1</td><td>O(n)</td><td>线性阶</td></tr><tr><td>2n^2+5n+6</td><td>O(n^2)</td><td>平方阶</td></tr><tr><td>4log_2n+25</td><td>O(logn)</td><td>对数阶</td></tr><tr><td>3n+2nlog_3n+15</td><td>O(nlogn)</td><td>nlogn阶</td></tr><tr><td>4n^3+3n^2+22n+10</td><td>O(n^3)</td><td>立方阶</td></tr><tr><td>2^n</td><td>O(2^n)</td><td>指数阶</td></tr></tbody></table><p>查看函数图像的网站：<a href="https://zh.numberempire.com/graphingcalculator.php" target="_blank" rel="noopener">https://zh.numberempire.com/graphingcalculator.php</a></p><h1 id="数据规模对比"><a href="#数据规模对比" class="headerlink" title="数据规模对比"></a>数据规模对比</h1><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/datastructure/2.jpg" alt=""></p><h1 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h1><p>斐波那契数列，下面有两种解法。递归和非递归。其实可以发现递归的时间复杂度是更高的，当是具规模越大的时候，递归就会越耗时。所以一般都不要使用递归，但是使用了递归也是可以优化的，例如：尾递归，备忘录优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#时间复杂度O(2^n)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> fib1(n-<span class="number">2</span>)+fib(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#时间复杂度O(n)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> second = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        second+=first;</span><br><span class="line">        first=second+first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多个数据规模的情况"><a href="#多个数据规模的情况" class="headerlink" title="多个数据规模的情况"></a>多个数据规模的情况</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">multi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n+k)</p><h1 id="算法的优化方向"><a href="#算法的优化方向" class="headerlink" title="算法的优化方向"></a>算法的优化方向</h1><ul><li>用尽量少的存储空间</li><li>用尽量少的执行时间</li><li>空间换时间 OR 时间换空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://www.maishuren.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="java" scheme="http://www.maishuren.top/tags/java/"/>
    
      <category term="数据结构" scheme="http://www.maishuren.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="动态数组" scheme="http://www.maishuren.top/tags/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba微服务入门到进阶一：服务发现Nacos</title>
    <link href="http://www.maishuren.top/posts/springcloud/202006211810-index.html"/>
    <id>http://www.maishuren.top/posts/springcloud/202006211810-index.html</id>
    <published>2020-06-21T10:10:12.000Z</published>
    <updated>2020-06-26T15:14:52.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="为什么出现Spring-Cloud-Alibaba？"><a href="#为什么出现Spring-Cloud-Alibaba？" class="headerlink" title="为什么出现Spring Cloud Alibaba？"></a>为什么出现Spring Cloud Alibaba？</h1><p>Spring Cloud的<a href="https://spring.io/blog/2018/12/12/spring-cloud-greenwich-rc1-available-now" target="_blank" rel="noopener">官网</a>中：</p><p><img src="https://code.aliyun.com/msr/blog-pic/raw/master/springcloud/springcloud1.jpg" alt=""></p><p>在以往的Spring Cloud中官方也是推荐使用Netflix的组件，但是随着Netflix的多个组件进入维护状态，可以说Netflix的组件已经不能使用了，因为可能出现潜在风险。对于微服务来说，最重要的几个组件：服务发现、断路器、网关、负载均衡。然而这些组件都进入了维护状态。所以随之Ailibaba的组件就成为了我们的首选。</p><h1 id="Spring-Cloud-Netflix的替换组件"><a href="#Spring-Cloud-Netflix的替换组件" class="headerlink" title="Spring Cloud Netflix的替换组件"></a>Spring Cloud Netflix的替换组件</h1><h1 id="Spring-Cloud-Alibaba的主要组件"><a href="#Spring-Cloud-Alibaba的主要组件" class="headerlink" title="Spring Cloud Alibaba的主要组件"></a>Spring Cloud Alibaba的主要组件</h1><ul><li>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等都各维度保护服务的稳定性。</li><li>Nacos：一个更易于构建云原生应用的动态<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理平台</strong>。</li><li>RabbitMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时、高可靠的消息发布与订阅服务。</li><li>Dubbo：高性能的Java RPC框架。</li><li>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM：一款在分布式结构环境中对应用配置进行集中式管理和推送的应用配置中心产品。</li><li>Alibaba Cloud SchedulerX：分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时任务调度服务。</li><li>Alibaba Cloud SMS：覆盖全球的短信服务，友好、高效、只能的互联网通讯能力</li><li>Alibaba Cloud OSS：对象存储服务。</li></ul><p>像OSS SMS、SchedulerX、ACM这些是阿里云的收费产品，这些也不是构建微服务的必需品，我们可以不用。</p><h1 id="什么是Nacos？"><a href="#什么是Nacos？" class="headerlink" title="什么是Nacos？"></a>什么是Nacos？</h1><p>服务（Service）是 Nacos 世界的一等公民。Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理：</p><p><a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Kubernetes Service</a></p><p><a href="https://grpc.io/docs/guides/concepts.html#service-definition" target="_blank" rel="noopener">gRPC</a> &amp; <a href="https://dubbo.incubator.apache.org/" target="_blank" rel="noopener">Dubbo RPC Service</a></p><p><a href="https://spring.io/understanding/REST" target="_blank" rel="noopener">Spring Cloud RESTful Service</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://www.maishuren.top/tags/java/"/>
    
      <category term="springcloud" scheme="http://www.maishuren.top/tags/springcloud/"/>
    
      <category term="微服务" scheme="http://www.maishuren.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>nginx实践：rewrite规则</title>
    <link href="http://www.maishuren.top/posts/nginx/202006211318-index.html"/>
    <id>http://www.maishuren.top/posts/nginx/202006211318-index.html</id>
    <published>2020-06-21T05:18:58.000Z</published>
    <updated>2020-06-21T06:49:53.021Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Rewrite规则"><a href="#Rewrite规则" class="headerlink" title="Rewrite规则"></a>Rewrite规则</h1><p>作用：rewrite规则可以实现对url的重写和重定向</p><p>主要应用场景：</p><ul><li>URL访问跳转，支持开发设计，如页面跳转，兼容性支持，展示效果</li><li>SEO优化</li><li>维护：后台维护、流量转发</li><li>安全</li></ul><h2 id="配置语法"><a href="#配置语法" class="headerlink" title="配置语法"></a>配置语法</h2><p>配置： rewrite regex replacement [flag];</p><p>作用域：server、location、if</p><p>参数：</p><p>last 停止rewrite检测【如果没有匹配到，会继续向下匹配】</p><p>break 停止rewrite检测【如果没有匹配到，则不再向下匹配，直接返回结果404】</p><p>redirect 返回302临时重定向，地址栏会显示跳转后的地址</p><p>permanent 返回301永久重定向，地址栏会显示跳转后的地址</p><h2 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    access_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;log&#x2F;host.access.log  main;</span><br><span class="line">     </span><br><span class="line">    root &#x2F;opt&#x2F;app&#x2F;code; </span><br><span class="line">    location ~ ^&#x2F;break &#123;</span><br><span class="line">        rewrite ^&#x2F;break &#x2F;test&#x2F; break;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    location ~ ^&#x2F;last &#123;</span><br><span class="line">         rewrite ^&#x2F;last &#x2F;test&#x2F; last;</span><br><span class="line">         #rewrite ^&#x2F;last &#x2F;test&#x2F; redirect;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    location ~ ^&#x2F;imooc &#123;</span><br><span class="line">         rewrite ^&#x2F;main http:&#x2F;&#x2F;www.baidu.com&#x2F; permanent;</span><br><span class="line">         #rewrite ^&#x2F;main http:&#x2F;&#x2F;www.baidu.com&#x2F; redirect;</span><br><span class="line">    &#125;    </span><br><span class="line"> </span><br><span class="line">    location &#x2F;test&#x2F; &#123;</span><br><span class="line">       default_type application&#x2F;json;</span><br><span class="line">       return 200 &#39;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redirect 表示临时的重定向 ，只要后端服务是开者的。每次访问 /imoc 都会重定向到后面的url</p><p>permanent 表示永久重定向，第一次访问成功后，把后端服务关闭后，访问/imoc 仍然会重定向到后面的url</p><p><strong>rewrite优先级规则</strong></p><ul><li>执行server 块的rewrite 指令。将所有的网站都重定向同一个网站。</li><li>执行location匹配。</li><li>执行选定的location中的rewrite。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="运维" scheme="http://www.maishuren.top/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="nginx" scheme="http://www.maishuren.top/tags/nginx/"/>
    
      <category term="实践" scheme="http://www.maishuren.top/tags/%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>golang学习二十一：select和GC</title>
    <link href="http://www.maishuren.top/posts/golang/202006201149-index.html"/>
    <id>http://www.maishuren.top/posts/golang/202006201149-index.html</id>
    <published>2020-06-20T03:49:52.000Z</published>
    <updated>2020-07-12T14:16:37.596Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="select简介"><a href="#select简介" class="headerlink" title="select简介"></a>select简介</h1><ul><li>Golang中select和switch结构特别像,但是select中case的条件只能是I/O</li><li>select 的语法(condition是条件)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>&#123;</span><br><span class="line">  <span class="keyword">case</span> condition:</span><br><span class="line">  <span class="keyword">case</span> condition:</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>select执行过程:<ul><li>每个case必须是一个IO操作</li><li>哪个case可以执行就执行哪个</li><li>多个case都可以执行,随机执行一个</li><li>所有case都不能执行时,执行default</li><li>所有case都不能执行,且没有default,将会阻塞</li></ul></li><li>代码示例<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line">   ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">   ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">   ch1 &lt;- <span class="number">1</span></span><br><span class="line">   ch2 &lt;- <span class="string">"hello"</span></span><br><span class="line">   <span class="keyword">select</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> value := &lt;-ch1:</span><br><span class="line">      fmt.Println(value)</span><br><span class="line">   <span class="keyword">case</span> value := &lt;-ch2:</span><br><span class="line">      fmt.Println(value)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>select多和for循环结合使用,下面例子演示出了一直在接收消息的例子<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(arg <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">ch &lt;- arg</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//如果是一直接受消息,应该是死循环for&#123;&#125;,下面代码中是明确知道消息个数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> c := &lt;-ch:</span><br><span class="line">fmt.Println(<span class="string">"取出数据"</span>, c)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="comment">//没有default会出现死锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>break可以对select生效,如果for中嵌套select,break选择最近结构</li></ul><h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h1><ul><li>GC英文全称 garbage collector</li><li>Go语言GC是相对C/C++语言非常重要的改进</li><li>一些常用GC算法<ul><li>引用计算法.当对象被引用时计算器加一.不被引用计数器减一<ul><li>PHP和Object-C使用</li><li>相互引用无法回收</li><li>计数增加消耗</li></ul></li><li>Mark And Sweep 标记和清除算法.停止程序运行,递归遍历对象,进行标记.标记完成后将所有没有引用的对象进行清除<ul><li>由于标记需要停止程序(Stop the world),当对象特别多时,标记和清除过程比较耗时(可能几百毫秒),很难接受</li></ul></li><li>三色标记法:是Mark And Sweep的改进版.从逻辑上分为白色区(未搜索),灰色区(正搜索),黑色区(已搜索).灰色区内容是子引用没有进行搜索,黑色区表示子引用存在</li><li>分代收集.一般情况都有三代,例如java中新生代,老年代,永久代.当新生代中带有阈值时会把对象放入到老年代,相同道理老年代内容达到阈值会放入到永久代</li></ul></li></ul><h1 id="Go语言中的GC"><a href="#Go语言中的GC" class="headerlink" title="Go语言中的GC"></a>Go语言中的GC</h1><ul><li>Go语言中采用Stop The World方式</li><li>Golang每个版本基本上都会对GC进行优化,从Golang1.5开始支持并发(concurrent )收集,从1.8版本已经把STW时间优化到了100微妙,通常只需要10微妙以下.且在1.10版本时再次优化减少GC对CPU占用</li><li>Go语言中GC是自动运行的,在下列情况下会触发GC<ul><li>当需要申请内存时,发现GC是上次GC两倍时会触发</li><li>每2分钟自动运行一次GC</li></ul></li><li>GC调优<ul><li>小对象复用,局部变量尽量少声明,多个小对象可以放入到结构体,方便GC扫描</li><li>少用string的”+”</li></ul></li><li>在runtime包下mgc.go中明确的说明了Golang的GC的解释<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Garbage collector (GC).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The GC runs concurrently with mutator threads, is type accurate (aka precise), allows multiple</span></span><br><span class="line"><span class="comment">// GC thread to run in parallel. It is a concurrent mark and sweep that uses a write barrier. It is</span></span><br><span class="line"><span class="comment">// non-generational and non-compacting. Allocation is done using size segregated per P allocation</span></span><br><span class="line"><span class="comment">// areas to minimize fragmentation while eliminating locks in the common case.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The algorithm decomposes into several steps.</span></span><br><span class="line"><span class="comment">// This is a high level description of the algorithm being used. For an overview of GC a good</span></span><br><span class="line"><span class="comment">// place to start is Richard Jones' gchandbook.org.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The algorithm's intellectual heritage includes Dijkstra's on-the-fly algorithm, see</span></span><br><span class="line"><span class="comment">// Edsger W. Dijkstra, Leslie Lamport, A. J. Martin, C. S. Scholten, and E. F. M. Steffens. 1978.</span></span><br><span class="line"><span class="comment">// On-the-fly garbage collection: an exercise in cooperation. Commun. ACM 21, 11 (November 1978),</span></span><br><span class="line"><span class="comment">// 966-975.</span></span><br><span class="line"><span class="comment">// For journal quality proofs that these steps are complete, correct, and terminate see</span></span><br><span class="line"><span class="comment">// Hudson, R., and Moss, J.E.B. Copying Garbage Collection without stopping the world.</span></span><br><span class="line"><span class="comment">// Concurrency and Computation: Practice and Experience 15(3-5), 2003.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 1. GC performs sweep termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Stop the world. This causes all Ps to reach a GC safe-point.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Sweep any unswept spans. There will only be unswept spans if</span></span><br><span class="line"><span class="comment">//    this GC cycle was forced before the expected time.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 2. GC performs the "mark 1" sub-phase. In this sub-phase, Ps are</span></span><br><span class="line"><span class="comment">// allowed to locally cache parts of the work queue.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Prepare for the mark phase by setting gcphase to _GCmark</span></span><br><span class="line"><span class="comment">//    (from _GCoff), enabling the write barrier, enabling mutator</span></span><br><span class="line"><span class="comment">//    assists, and enqueueing root mark jobs. No objects may be</span></span><br><span class="line"><span class="comment">//    scanned until all Ps have enabled the write barrier, which is</span></span><br><span class="line"><span class="comment">//    accomplished using STW.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Start the world. From this point, GC work is done by mark</span></span><br><span class="line"><span class="comment">//    workers started by the scheduler and by assists performed as</span></span><br><span class="line"><span class="comment">//    part of allocation. The write barrier shades both the</span></span><br><span class="line"><span class="comment">//    overwritten pointer and the new pointer value for any pointer</span></span><br><span class="line"><span class="comment">//    writes (see mbarrier.go for details). Newly allocated objects</span></span><br><span class="line"><span class="comment">//    are immediately marked black.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. GC performs root marking jobs. This includes scanning all</span></span><br><span class="line"><span class="comment">//    stacks, shading all globals, and shading any heap pointers in</span></span><br><span class="line"><span class="comment">//    off-heap runtime data structures. Scanning a stack stops a</span></span><br><span class="line"><span class="comment">//    goroutine, shades any pointers found on its stack, and then</span></span><br><span class="line"><span class="comment">//    resumes the goroutine.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    d. GC drains the work queue of grey objects, scanning each grey</span></span><br><span class="line"><span class="comment">//    object to black and shading all pointers found in the object</span></span><br><span class="line"><span class="comment">//    (which in turn may add those pointers to the work queue).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 3. Once the global work queue is empty (but local work queue caches</span></span><br><span class="line"><span class="comment">// may still contain work), GC performs the "mark 2" sub-phase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. GC stops all workers, disables local work queue caches,</span></span><br><span class="line"><span class="comment">//    flushes each P's local work queue cache to the global work queue</span></span><br><span class="line"><span class="comment">//    cache, and reenables workers.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. GC again drains the work queue, as in 2d above.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 4. Once the work queue is empty, GC performs mark termination.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Stop the world.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Set gcphase to _GCmarktermination, and disable workers and</span></span><br><span class="line"><span class="comment">//    assists.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. Drain any remaining work from the work queue (typically there</span></span><br><span class="line"><span class="comment">//    will be none).</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    d. Perform other housekeeping like flushing mcaches.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 5. GC performs the sweep phase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    a. Prepare for the sweep phase by setting gcphase to _GCoff,</span></span><br><span class="line"><span class="comment">//    setting up sweep state and disabling the write barrier.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    b. Start the world. From this point on, newly allocated objects</span></span><br><span class="line"><span class="comment">//    are white, and allocating sweeps spans before use if necessary.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    c. GC does concurrent sweeping in the background and in response</span></span><br><span class="line"><span class="comment">//    to allocation. See description below.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 6. When sufficient allocation has taken place, replay the sequence</span></span><br><span class="line"><span class="comment">// starting with 1 above. See discussion of GC rate below.</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang学习二十：golang并发编程入门</title>
    <link href="http://www.maishuren.top/posts/golang/202006201134-index.html"/>
    <id>http://www.maishuren.top/posts/golang/202006201134-index.html</id>
    <published>2020-06-20T03:34:59.000Z</published>
    <updated>2020-07-12T14:16:33.512Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h1><ul><li>Go语言中main()函数为主线程(协程),程序是从上向下执行的</li><li>可以通过time包下的Sleep(n)让程序阻塞多少纳秒<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"1"</span>)</span><br><span class="line"><span class="comment">//单位是纳秒,表示阻塞多长时间</span></span><br><span class="line"><span class="comment">//e9表示10的9次方</span></span><br><span class="line">time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">fmt.Println(<span class="string">"2"</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="延迟执行"><a href="#延迟执行" class="headerlink" title="延迟执行"></a>延迟执行</h1><ul><li>延迟指定时间后执行一次,但是需要注意在触发时程序没有结束<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"开始"</span>)</span><br><span class="line"> <span class="comment">//2秒后执行匿名函数</span></span><br><span class="line"> time.AfterFunc(<span class="number">2e9</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"延迟延迟触发"</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> time.Sleep(<span class="number">10e9</span>)<span class="comment">//一定要休眠,否则程序结束了</span></span><br><span class="line"> fmt.Println(<span class="string">"结束"</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="goroutine简介"><a href="#goroutine简介" class="headerlink" title="goroutine简介"></a>goroutine简介</h1><ul><li><p>Golang中最迷人的一个优点就是从语言层面就支持并发</p></li><li><p>在Golang中的goroutine(协程)类似于其他语言的线程</p></li><li><p>并发和并行</p><ul><li>并行(parallelism)指不同的代码片段同时在不同的物理处理器上支持</li><li>并发(concurrency)指同时管理多个事情,物理处理器上可能运行某个内容一半后就处理其他事情</li><li>在一般看来并发的性能要好于并行.因为计算机的物理资源是固定的,较少的,而程序需要执行的内容是很多的.所以并发是”以较少的资源去去做更多事情”</li></ul></li><li><p>几种主流并发模型</p><ul><li>多线程,每个线程只处理一个请求,只有请求结束后,对应的线程才会接收下一个请求.这种模式在高并发下,性能开销极大.</li><li>基于回调的异步IO.在程序运行过程中可能产生大量回调导致维护成本加大,程序执行流程也不便于思维</li><li>协程.不需要抢占式调用,可以有效提升线程任务的并发性,弥补了多线程模式的缺点;Golang在语言层面就支持,而其他语言很少支持</li></ul></li><li><p>goroutine的语法</p><ul><li>表达式可以是一条语句</li><li>表达式也可以是函数,函数返回值即使有,也无效,当函数执行完成此goroutine自动结束<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> 表达式</span><br></pre></td></tr></table></figure><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2></li></ul></li><li><p>对比多次调用函数和使用goroutine的效果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//正常调用,输出3遍1 2 3 4 5(每个数字后换行)</span></span><br><span class="line">   <span class="comment">//for i:=1; i&lt;=3; i++ &#123;</span></span><br><span class="line">   <span class="comment">// go demo()</span></span><br><span class="line">   <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   添加go关键字后发现控制台什么也没有输出</span></span><br><span class="line"><span class="comment">   原因:把demo()设置到协程后没等到函数执行,主</span></span><br><span class="line"><span class="comment">   线程执行结束</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> demo(i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"第%d次执行,i的值为:%d\n"</span>, index, i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加休眠等待goroutine执行结束</p></li><li><p>这种方式很大的问题就是休眠时间,如果休眠时间设置过小,可能goroutine并没有执行完成,如果休眠时间设置过大,影响程序执行执行.找到的本次执行的休眠时间,下次程序执行时这个休眠时间可能”过大”或”过小”</p></li><li><p>通过程序运行结果发现每次执行结果都不一定是一样的,因为每个demo()都是并发执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//正常调用,输出3遍1 2 3 4 5(每个数字后换行)</span></span><br><span class="line">   <span class="comment">//for i:=1; i&lt;=3; i++ &#123;</span></span><br><span class="line">   <span class="comment">// go demo()</span></span><br><span class="line">   <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   添加go关键字后发现控制台什么也没有输出</span></span><br><span class="line"><span class="comment">   原因:把demo()设置到协程后没等到函数执行,主</span></span><br><span class="line"><span class="comment">   线程执行结束</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> demo(i)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   添加休眠,让主线程等待协程执行结束.</span></span><br><span class="line"><span class="comment">   具体休眠时间需要根据计算机性能去估计</span></span><br><span class="line"><span class="comment">   次数没有固定值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   time.Sleep(<span class="number">3e9</span>)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"第%d次执行,i的值为:%d\n"</span>, index, i)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="WaitGroup简介"><a href="#WaitGroup简介" class="headerlink" title="WaitGroup简介"></a>WaitGroup简介</h1><ul><li>Golang中sync包提供了基本同步基元,如互斥锁等.除了Once和WaitGroup类型,    大部分都只适用于低水平程序线程,高水平同步线程使用channel通信更好一些</li><li>WaitGroup直译为等待组,其实就是计数器,只要计数器中有内容将一直阻塞</li><li>在Golang中WaitGroup存在于sync包中,在sync包中类型都是不应该被拷贝的.源码定义如下<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A WaitGroup waits for a collection of goroutines to finish.</span></span><br><span class="line"><span class="comment">// The main goroutine calls Add to set the number of</span></span><br><span class="line"><span class="comment">// goroutines to wait for. Then each of the goroutines</span></span><br><span class="line"><span class="comment">// runs and calls Done when finished. At the same time,</span></span><br><span class="line"><span class="comment">// Wait can be used to block until all goroutines have finished.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A WaitGroup must not be copied after first use.</span></span><br><span class="line"><span class="keyword">type</span> WaitGroup <span class="keyword">struct</span> &#123;</span><br><span class="line">noCopy noCopy</span><br><span class="line"></span><br><span class="line"><span class="comment">// 64-bit value: high 32 bits are counter, low 32 bits are waiter count.</span></span><br><span class="line"><span class="comment">// 64-bit atomic operations require 64-bit alignment, but 32-bit</span></span><br><span class="line"><span class="comment">// compilers do not ensure it. So we allocate 12 bytes and then use</span></span><br><span class="line"><span class="comment">// the aligned 8 bytes in them as state.</span></span><br><span class="line">state1 [<span class="number">12</span>]<span class="keyword">byte</span></span><br><span class="line">sema   <span class="keyword">uint32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Go语言标准库中WaitGroup只有三个方法<ul><li>Add(delta int)表示向内部计数器添加增量(delta),其中参数delta可以是负数</li><li>Done()表示减少WaitGroup计数器的值,应当在程序最后执行.相当于Add(-1)</li><li>Wait()表示阻塞直到WaitGroup计数器为0<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> WaitGroup</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span> <span class="title">Add</span><span class="params">(delta <span class="keyword">int</span>)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span> <span class="title">Done</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(wg *WaitGroup)</span> <span class="title">Wait</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>使用WaitGroup可以有效解决goroutine未执行完成主协程执行完成,导致程序结束,goroutine未执行问题<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</span><br><span class="line">      wg.Add(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">go</span> demo(i)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//阻塞,知道WaitGroup队列中所有任务执行结束时自动解除阻塞</span></span><br><span class="line">   fmt.Println(<span class="string">"开始阻塞"</span>)</span><br><span class="line">   wg.Wait()</span><br><span class="line">   fmt.Println(<span class="string">"任务执行结束,解除阻塞"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">      fmt.Printf(<span class="string">"第%d次执行,i的值为:%d\n"</span>, index, i)</span><br><span class="line">   &#125;</span><br><span class="line">   wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h1><ul><li>Go语言中多个协程操作一个变量时会出现冲突的问题</li><li>go run -race 可以查看竞争</li><li>可以使用<code>sync.Mutex</code>对内容加锁</li><li>互斥锁的使用场景<ul><li>多个goroutine访问同一个函数(代码段)</li><li>这个函数操作一个全局变量</li><li>为了保证共享变量安全性,值合法性</li></ul></li><li>使用互斥锁模拟售票窗口<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"sync"</span></span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">   <span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   <span class="comment">//票数</span></span><br><span class="line">   num = <span class="number">100</span></span><br><span class="line">   wg  sync.WaitGroup</span><br><span class="line">   <span class="comment">//互斥锁</span></span><br><span class="line">   mu sync.Mutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sellTicker</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> wg.Done()</span><br><span class="line">   <span class="keyword">for</span> &#123;</span><br><span class="line">      <span class="comment">//加锁,多个goroutine互斥</span></span><br><span class="line">      mu.Lock()</span><br><span class="line">      <span class="keyword">if</span> num &gt;= <span class="number">1</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">"第"</span>, i, <span class="string">"个窗口卖了"</span>, num)</span><br><span class="line">         num = num - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//解锁</span></span><br><span class="line">      mu.Unlock()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> num &lt;= <span class="number">0</span> &#123;</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//添加休眠,防止结果可能出现在一个goroutine中</span></span><br><span class="line">      time.Sleep(time.Duration(rand.Int63n(<span class="number">1000</span>) * <span class="number">1e6</span>))</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//设置随机数种子</span></span><br><span class="line">   rand.Seed(time.Now().UnixNano())</span><br><span class="line">   <span class="comment">//计算器的起始值和票数相同</span></span><br><span class="line">   wg.Add(<span class="number">4</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">2</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">3</span>)</span><br><span class="line">   <span class="keyword">go</span> sellTicker(<span class="number">4</span>)</span><br><span class="line">   wg.Wait()</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"所有票卖完"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="RWMutex读写锁"><a href="#RWMutex读写锁" class="headerlink" title="RWMutex读写锁"></a>RWMutex读写锁</h1><ul><li>RWMutex 源码如下<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// There is a modified copy of this file in runtime/rwmutex.go.</span></span><br><span class="line"><span class="comment">// If you make any changes here, see if you should make them there.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A RWMutex is a reader/writer mutual exclusion lock.</span></span><br><span class="line"><span class="comment">// The lock can be held by an arbitrary number of readers or a single writer.</span></span><br><span class="line"><span class="comment">// The zero value for a RWMutex is an unlocked mutex.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A RWMutex must not be copied after first use.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If a goroutine holds a RWMutex for reading and another goroutine might</span></span><br><span class="line"><span class="comment">// call Lock, no goroutine should expect to be able to acquire a read lock</span></span><br><span class="line"><span class="comment">// until the initial read lock is released. In particular, this prohibits</span></span><br><span class="line"><span class="comment">// recursive read locking. This is to ensure that the lock eventually becomes</span></span><br><span class="line"><span class="comment">// available; a blocked Lock call excludes new readers from acquiring the</span></span><br><span class="line"><span class="comment">// lock.</span></span><br><span class="line"><span class="keyword">type</span> RWMutex <span class="keyword">struct</span> &#123;</span><br><span class="line">w           Mutex  <span class="comment">// held if there are pending writers</span></span><br><span class="line">writerSem   <span class="keyword">uint32</span> <span class="comment">// semaphore for writers to wait for completing readers</span></span><br><span class="line">readerSem   <span class="keyword">uint32</span> <span class="comment">// semaphore for readers to wait for completing writers</span></span><br><span class="line">readerCount <span class="keyword">int32</span>  <span class="comment">// number of pending readers</span></span><br><span class="line">readerWait  <span class="keyword">int32</span>  <span class="comment">// number of departing readers</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Go语言标准库中API如下<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RWMutex</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Lock</span><span class="params">()</span>//禁止其他协程读写</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">Unlock</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLock</span><span class="params">()</span>//禁止其他协程写入,只能读取</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RUnlock</span><span class="params">()</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(rw *RWMutex)</span> <span class="title">RLocker</span><span class="params">()</span> <span class="title">Locker</span></span></span><br></pre></td></tr></table></figure></li><li>Go语言中的map不是线程安全的,多个goroutine同时操作会出现错误.</li><li>RWMutex可以添加多个读锁或一个写锁.读写锁不能同时存在.<ul><li>map在并发下读写就需要结合读写锁完成</li><li>互斥锁表示锁的代码同一时间只能有一个人goroutine运行,而读写锁表示在锁范围内数据的读写操作<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"sync"</span></span><br><span class="line">   <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> rwm sync.RWMutex</span><br><span class="line">   m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">   <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">   wg.Add(<span class="number">10</span>)</span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">         <span class="comment">//没有锁在map时可能出现问题</span></span><br><span class="line">         rwm.Lock()</span><br><span class="line">         m[<span class="string">"key"</span>+strconv.Itoa(j)] = <span class="string">"value"</span> + strconv.Itoa(j)</span><br><span class="line">         fmt.Println(m)</span><br><span class="line">         rwm.Unlock()</span><br><span class="line">         wg.Done()</span><br><span class="line">      &#125;(i)</span><br><span class="line">   &#125;</span><br><span class="line">   wg.Wait()</span><br><span class="line">   fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><ul><li>线程通信在每个编程语言中都是重难点,在Golang中提供了语言级别的goroutine之间通信:channel</li><li>channel不同的翻译资料叫法不一样.常见的几种叫法<ul><li>管道</li><li>信道</li><li>通道</li></ul></li><li>channel是进程内通信方式,每个channel只能传递一个类型的值.这个类型需要在声明channel时指定</li><li>channel在Golang中主要的两个作用<ul><li>同步</li><li>通信</li></ul></li><li>Go语言中channel的关键字是chan</li><li>声明channel的语法<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 名称 <span class="keyword">chan</span> 类型</span><br><span class="line"><span class="keyword">var</span> 名称 <span class="keyword">chan</span> &lt;- 类型 <span class="comment">//只写</span></span><br><span class="line"><span class="keyword">var</span> 名称 &lt;- <span class="keyword">chan</span> 类型<span class="comment">//只读</span></span><br><span class="line">名称:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">//无缓存channel</span></span><br><span class="line">名称:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">0</span>)<span class="comment">//无缓存channel</span></span><br><span class="line">名称:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>,<span class="number">100</span>)<span class="comment">//有缓存channel</span></span><br></pre></td></tr></table></figure></li><li>操作channel的语法:(假设定义一个channel名称为ch)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- 值 <span class="comment">//向ch中添加一个值</span></span><br><span class="line">&lt;- ch <span class="comment">//从ch中取出一个值</span></span><br><span class="line">a:=&lt;-ch <span class="comment">//从ch中取出一个值并赋值给a</span></span><br><span class="line">a,b:=&lt;-ch<span class="comment">//从ch中取出一个值赋值给a,如果ch已经关闭或ch中没有值,b为false</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>简单无缓存通道代码示例<ul><li>此代码中如果没有从channel中取值c,d=&lt;-ch语句,程序结束时go func并没有执行</li><li>下面代码示例演示了同步操作,类似与WaitGroup功能,保证程序结束时goroutine已经执行完成</li><li>向goroutine中添加内容的代码会阻塞goroutine执行,所以要把ch&lt;-1放入到goroutine有效代码最后一行</li><li>无论是向channel存数据还是取数据都会阻塞</li><li>close(channel)关闭channel,关闭后只读不可写<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"进入goroutine"</span>)</span><br><span class="line">      <span class="comment">// 添加一个内容后控制台输出:1 true</span></span><br><span class="line">      <span class="comment">//ch&lt;-1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//关闭ch控制台输出:0 false</span></span><br><span class="line">      <span class="built_in">close</span>(ch)</span><br><span class="line">   &#125;()</span><br><span class="line">   c, d := &lt;-ch </span><br><span class="line">   fmt.Println(c, d)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>使用channel实现goroutine之间通信<ul><li>channel其实就是消息通信机制实现方案,在Golang中没有使用共享内存完成线程通信,而是使用channel实现goroutine之间通信.<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">//用于goroutine之间传递数据</span></span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">   <span class="comment">//用于控制程序执行</span></span><br><span class="line">   ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"执行第一个goroutine,等待第二个goroutine传递数据"</span>)</span><br><span class="line">      content := &lt;-ch</span><br><span class="line">      fmt.Println(<span class="string">"接收到的数据为:"</span>, content)</span><br><span class="line">      ch2 &lt;- <span class="string">"第一个"</span></span><br><span class="line">   &#125;()</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"进入到第二个,开始传递数据"</span>)</span><br><span class="line">      ch &lt;- <span class="string">"内容随意"</span></span><br><span class="line">      <span class="built_in">close</span>(ch)</span><br><span class="line">      fmt.Println(<span class="string">"发送数据完成"</span>)</span><br><span class="line">      ch2 &lt;- <span class="string">"第二个"</span></span><br><span class="line">   &#125;()</span><br><span class="line">   result1 := &lt;-ch2</span><br><span class="line">   fmt.Println(result1, <span class="string">"执行完成"</span>)</span><br><span class="line">   result2 := &lt;-ch2</span><br><span class="line">   fmt.Println(result2, <span class="string">"执行完成"</span>)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>可以使用for range获取channel中内容<ul><li>不需要确定channel中数据个数<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">   ch2:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i:=<span class="number">97</span>;i&lt;<span class="number">97</span>+<span class="number">26</span>;i++&#123;</span><br><span class="line">         ch &lt;- strconv.Itoa(i)</span><br><span class="line">      &#125;</span><br><span class="line">      ch2&lt;<span class="number">-1</span></span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> c := <span class="keyword">range</span> ch&#123;</span><br><span class="line">         fmt.Println(<span class="string">"取出来的"</span>,c)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line">   &lt;-ch2</span><br><span class="line">   fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>channel是安全的.多个goroutine同时操作时,同一时间只能有一个goroutine存取数据<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">         fmt.Println(j, <span class="string">"开始"</span>)</span><br><span class="line">         ch &lt;- j</span><br><span class="line">         fmt.Println(j, <span class="string">"结束"</span>)</span><br><span class="line">      &#125;(i)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">5</span>; j++ &#123;</span><br><span class="line">      time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">      &lt;-ch</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul><li>在主goroutine中向无缓存channel添加内容或在主goroutine中向channel添加内容且添加内容的个数已经大于channel缓存个数就会产生死锁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal error : all goroutines are asleep -deadlock!</span><br></pre></td></tr></table></figure></li><li>死锁:在程序中多个进程(Golang中goroutine)由于相互竞争资源而产生的阻塞(等待)状态,而这种状态一直保持下去,此时称这个线程是死锁状态</li><li>在Golang中使用无缓存channel时一定要注意.以下是一个最简单的死锁程序<ul><li>主协程中有ch&lt;-1,无缓存channel无论添加还是取出数据都会阻塞goroutine,当前程序无其他代码,主goroutine会一直被阻塞下去,此时主goroutine就是死锁状态<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   ch &lt;- <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>而下面代码就不会产生死锁<ul><li>通过代码示例可以看出,在使用无缓存channel时,特别要注意的是在主协程中有操作channel代码<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"time"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      ch &lt;- <span class="number">1</span></span><br><span class="line">      fmt.Println(<span class="string">"执行goroutine"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   time.Sleep(<span class="number">5e9</span>)</span><br><span class="line">   fmt.Println(<span class="string">"程序执行结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="有缓存通道"><a href="#有缓存通道" class="headerlink" title="有缓存通道"></a>有缓存通道</h1><ul><li>创建一个有缓存通道<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//缓存大小3,里面消息个数小于等于3时都不会阻塞goroutine</span></span><br><span class="line">   ch &lt;- <span class="number">1</span></span><br><span class="line">   ch &lt;- <span class="number">2</span></span><br><span class="line">   ch &lt;- <span class="number">3</span></span><br><span class="line">   ch &lt;- <span class="number">4</span> <span class="comment">//此行出现死锁,超过缓存大小数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在Golang中有缓存channel的缓存大小是不能改变的,但是只要不超过缓存数量大小,都不会出现阻塞状态<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>) <span class="comment">//缓存大小3,里面消息个数小于等于3时都不会阻塞goroutine</span></span><br><span class="line">   ch &lt;- <span class="number">1</span></span><br><span class="line">   fmt.Println(&lt;-ch)</span><br><span class="line">   ch &lt;- <span class="number">2</span></span><br><span class="line">   fmt.Println(&lt;-ch)</span><br><span class="line">   ch &lt;- <span class="number">3</span></span><br><span class="line">   ch &lt;- <span class="number">4</span></span><br><span class="line">   fmt.Println(<span class="built_in">len</span>(ch))<span class="comment">//输出2,表示channel中有两个消息</span></span><br><span class="line">   fmt.Println(<span class="built_in">cap</span>(ch))<span class="comment">//输出3,表示缓存大小总量为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang学习十九：日志</title>
    <link href="http://www.maishuren.top/posts/golang/202006201131-index.html"/>
    <id>http://www.maishuren.top/posts/golang/202006201131-index.html</id>
    <published>2020-06-20T03:31:14.000Z</published>
    <updated>2020-07-12T14:17:16.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="日志简介"><a href="#日志简介" class="headerlink" title="日志简介"></a>日志简介</h1><ul><li>使用开发工具时,控制台打印的信息就是日志信息</li><li>项目最终发布后是没有开发工具的,而需要记录日志应该把信息输出到文件中,这个功能也是日志的功能</li><li>在Go语言标准的log包提供了对日志的支持</li><li>有三种级别日志输出<ul><li>Print() 输出日志信息</li><li>Panic()  打印日志信息,并触发panic,日志信息为Panic信息</li><li>Fatal()  打印日志信息后调用os.Exit(1)</li></ul></li><li>所有日志信息打印时都带有时间,且颜色为红色</li><li>每种级别日志打印都提供了三个函数<ul><li>Println()</li><li>Print()</li><li>Printf()</li></ul></li><li>日志文件扩展名为log<h1 id="普通日志信息打印"><a href="#普通日志信息打印" class="headerlink" title="普通日志信息打印"></a>普通日志信息打印</h1></li><li>官方源码如下<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Println</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">std.Output(<span class="number">2</span>, fmt.Sprintln(v...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>直接使用log包调用Println()即可<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.Println(<span class="string">"打印日志信息"</span>)</span><br></pre></td></tr></table></figure><h1 id="Panic日志信息打印"><a href="#Panic日志信息打印" class="headerlink" title="Panic日志信息打印"></a>Panic日志信息打印</h1></li><li>通过源码可以看出在日志信息打印后调用了panic()函数,且日志信息为panic信息<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Panicln is equivalent to Println() followed by a call to panic().</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Panicln</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">s := fmt.Sprintln(v...)</span><br><span class="line">std.Output(<span class="number">2</span>, s)</span><br><span class="line"><span class="built_in">panic</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>执行后输出日志信息,同时也会触发panic<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.Panicln(<span class="string">"打印日志信息"</span>)</span><br></pre></td></tr></table></figure><h1 id="致命日志信息"><a href="#致命日志信息" class="headerlink" title="致命日志信息"></a>致命日志信息</h1></li><li>打印日志后,终止程序<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fatal is equivalent to Print() followed by a call to os.Exit(1).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fatal</span><span class="params">(v ...<span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">std.Output(<span class="number">2</span>, fmt.Sprint(v...))</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>执行日志打印后,程序被终止<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.Fatal(<span class="string">"打印日志信息"</span>)</span><br></pre></td></tr></table></figure><h1 id="打印日志信息到文件中"><a href="#打印日志信息到文件中" class="headerlink" title="打印日志信息到文件中"></a>打印日志信息到文件中</h1></li><li>Go语言标准库支持输出日志信息到文件中.</li><li>输出日志时的几种状态<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Ldate         = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span>     <span class="comment">// the date in the local time zone: 2009/01/23</span></span><br><span class="line">Ltime                         <span class="comment">// the time in the local time zone: 01:23:23</span></span><br><span class="line">Lmicroseconds                 <span class="comment">// microsecond resolution: 01:23:23.123123.  assumes Ltime.</span></span><br><span class="line">Llongfile                     <span class="comment">// full file name and line number: /a/b/c/d.go:23</span></span><br><span class="line">Lshortfile                    <span class="comment">// final file name element and line number: d.go:23. overrides Llongfile</span></span><br><span class="line">LUTC                          <span class="comment">// if Ldate or Ltime is set, use UTC rather than the local time zone</span></span><br><span class="line">LstdFlags     = Ldate | Ltime <span class="comment">// initial values for the standard logger</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>代码如下<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f, _ := os.OpenFile(<span class="string">"D:/golog.log"</span>, os.O_APPEND|os.O_CREATE, <span class="number">07777</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">logger := log.New(f, <span class="string">"[info]\t"</span>, log.Ltime)</span><br><span class="line">logger.Println(<span class="string">"输出日志信息"</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang学习十八：XML操作</title>
    <link href="http://www.maishuren.top/posts/goalng/202006201125-index.html"/>
    <id>http://www.maishuren.top/posts/goalng/202006201125-index.html</id>
    <published>2020-06-20T03:25:17.000Z</published>
    <updated>2020-07-12T14:17:01.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Go语言标准库提供的API"><a href="#Go语言标准库提供的API" class="headerlink" title="Go语言标准库提供的API"></a>Go语言标准库提供的API</h1><ul><li>在encoding/xml包下提供了对XML序列化和反序列化的API</li><li>使用Unmarshal可以直接把XML字节切片数据转换为结构体</li><li>转换时按照特定的转换规则进行转换,且数据类型可以自动转换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">* 如果结构体字段的类型为字符串或者[]byte，且标签为&quot;,innerxml&quot;，</span><br><span class="line">  Unmarshal函数直接将对应原始XML文本写入该字段，其余规则仍适用。</span><br><span class="line">* 如果结构体字段类型为xml.Name且名为XMLName，Unmarshal会将元素名写入该字段</span><br><span class="line">* 如果字段XMLName的标签的格式为&quot;name&quot;或&quot;namespace-URL name&quot;，</span><br><span class="line">  XML元素必须有给定的名字（以及可选的名字空间），否则Unmarshal会返回错误。</span><br><span class="line">* 如果XML元素的属性的名字匹配某个标签&quot;,attr&quot;为字段的字段名，或者匹配某个标签为&quot;name,attr&quot;</span><br><span class="line">  的字段的标签名，Unmarshal会将该属性的值写入该字段。</span><br><span class="line">* 如果XML元素包含字符数据，该数据会存入结构体中第一个具有标签&quot;,chardata&quot;的字段中，</span><br><span class="line">  该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</span><br><span class="line">* 如果XML元素包含注释，该数据会存入结构体中第一个具有标签&quot;,comment&quot;的字段中，</span><br><span class="line">  该字段可以是字符串类型或者[]byte类型。如果没有这样的字段，字符数据会丢弃。</span><br><span class="line">* 如果XML元素包含一个子元素，其名称匹配格式为&quot;a&quot;或&quot;a&gt;b&gt;c&quot;的标签的前缀，反序列化会深入</span><br><span class="line">  XML结构中寻找具有指定名称的元素，并将最后端的元素映射到该标签所在的结构体字段。</span><br><span class="line">  以&quot;&gt;&quot;开始的标签等价于以字段名开始并紧跟着&quot;&gt;&quot; 的标签。</span><br><span class="line">* 如果XML元素包含一个子元素，其名称匹配某个结构体类型字段的XMLName字段的标签名，</span><br><span class="line">  且该结构体字段本身没有显式指定标签名，Unmarshal会将该元素映射到该字段。</span><br><span class="line">* 如果XML元素的包含一个子元素，其名称匹配够格结构体字段的字段名，且该字段没有任何模式选项</span><br><span class="line">  （&quot;,attr&quot;、&quot;,chardata&quot;等），Unmarshal会将该元素映射到该字段。</span><br><span class="line">* 如果XML元素包含的某个子元素不匹配以上任一条，而存在某个字段其标签为&quot;,any&quot;，</span><br><span class="line">  Unmarshal会将该元素映射到该字段。</span><br><span class="line">* 匿名字段被处理为其字段好像位于外层结构体中一样。</span><br><span class="line">* 标签为&quot;-&quot;的结构体字段永不会被反序列化填写。</span><br></pre></td></tr></table></figure></li></ul><h1 id="XML文件读取"><a href="#XML文件读取" class="headerlink" title="XML文件读取"></a>XML文件读取</h1><ul><li>给定XML文件内容如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">people</span> <span class="attr">id</span>=<span class="string">"888"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>msr<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span>中国上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>新建结构体,装载XML数据<ul><li>结构体中属性首字母必须大写,否则无法装配<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName xml.Name <span class="string">`xml:"people"`</span></span><br><span class="line">Id      <span class="keyword">int</span>      <span class="string">`xml:"id,attr"`</span></span><br><span class="line">Name    <span class="keyword">string</span>   <span class="string">`xml:"name"`</span></span><br><span class="line">Address <span class="keyword">string</span>   <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">peo := <span class="built_in">new</span>(People)</span><br><span class="line">b, err := ioutil.ReadFile(<span class="string">"demo.xml"</span>)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">fmt.Println(<span class="string">"111:"</span>, err)</span><br><span class="line">err = xml.Unmarshal(b, peo)</span><br><span class="line">fmt.Println(<span class="string">"2222"</span>, err)</span><br><span class="line">fmt.Println(peo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多层嵌套XML文件读取"><a href="#多层嵌套XML文件读取" class="headerlink" title="多层嵌套XML文件读取"></a>多层嵌套XML文件读取</h1></li></ul></li><li>给定XML中数据如下<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">peoples</span> <span class="attr">version</span>=<span class="string">"0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">people</span> <span class="attr">id</span>=<span class="string">"888"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>msr<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>中国上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">people</span> <span class="attr">id</span>=<span class="string">"998"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>maishuren<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">address</span>&gt;</span>中国上海<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">people</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">peoples</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>编写读取XML数据代码<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Peoples <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName xml.Name <span class="string">`xml:"peoples"`</span></span><br><span class="line">Version <span class="keyword">string</span>   <span class="string">`xml:"version,attr"`</span></span><br><span class="line">Peos    []People <span class="string">`xml:"people"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName xml.Name <span class="string">`xml:"people"`</span></span><br><span class="line">Id      <span class="keyword">int</span>      <span class="string">`xml:"id,attr"`</span></span><br><span class="line">Name    <span class="keyword">string</span>   <span class="string">`xml:"name"`</span></span><br><span class="line">Address <span class="keyword">string</span>   <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">peo := <span class="built_in">new</span>(Peoples)</span><br><span class="line">b, err := ioutil.ReadFile(<span class="string">"demo.xml"</span>)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">fmt.Println(<span class="string">"111:"</span>, err)</span><br><span class="line">err = xml.Unmarshal(b, peo)</span><br><span class="line">fmt.Println(<span class="string">"2222"</span>, err)</span><br><span class="line">fmt.Println(peo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="生成XML"><a href="#生成XML" class="headerlink" title="生成XML"></a>生成XML</h1><ul><li>生成XML只要在学习下encoding/xml包下的Marshal()函数,结合输入流就可以完成xml文件生成</li><li>在encoding/xml中有常量,常量中是xml文档头<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// Header is a generic XML header suitable for use with the output of Marshal.</span></span><br><span class="line"><span class="comment">// This is not automatically added to any output of this package,</span></span><br><span class="line"><span class="comment">// it is provided as a convenience.</span></span><br><span class="line">Header = <span class="string">`&lt;?xml version="1.0" encoding="UTF-8"?&gt;`</span> + <span class="string">"\n"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>使用Marshal()函数生成的[]byte没有格式化</li><li>使用MarshalIndent()可以对内容进行格式化<ul><li>第一个参数:结构体对象</li><li>第二个参数:每行的前缀</li><li>第三个参数:层级缩进内容<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">XMLName xml.Name <span class="string">`xml:"people"`</span></span><br><span class="line">Id      <span class="keyword">int</span>      <span class="string">`xml:"id,attr"`</span></span><br><span class="line">Name    <span class="keyword">string</span>   <span class="string">`xml:"name"`</span></span><br><span class="line">Address <span class="keyword">string</span>   <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">peo := People&#123;Id: <span class="number">123</span>, Name: <span class="string">"maishuren"</span>, Address: <span class="string">"中国上海"</span>&#125;</span><br><span class="line">b, _ := xml.MarshalIndent(peo, <span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line">b = <span class="built_in">append</span>([]<span class="keyword">byte</span>(xml.Header), b...)</span><br><span class="line">ioutil.WriteFile(<span class="string">"D:/peo.xml"</span>, b, <span class="number">0666</span>)</span><br><span class="line">fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang学习十七：反射</title>
    <link href="http://www.maishuren.top/posts/goalng/202006201120-index.html"/>
    <id>http://www.maishuren.top/posts/goalng/202006201120-index.html</id>
    <published>2020-06-20T03:20:58.000Z</published>
    <updated>2020-07-12T14:17:26.116Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="反射介绍"><a href="#反射介绍" class="headerlink" title="反射介绍"></a>反射介绍</h1><ul><li>在Go语言标准库中reflect包提供了运行时反射,程序运行过程中动态操作结构体</li><li>当变量存储结构体属性名称,想要对结构体这个属性赋值或查看时,就可以使用反射.</li><li>反射还可以用作判断变量类型</li><li>整个reflect包中最重要的两个类型<ul><li>reflect.Type 类型</li><li>reflect.Value 值</li></ul></li><li>获取到Type和Value的函数<ul><li>reflect.TypeOf(interface{}) 返回Type</li><li>reflect.ValueOf(interface{}) 返回值Value</li></ul></li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><ul><li>判断变量类型<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:=<span class="number">1.5</span></span><br><span class="line">fmt.Println(reflect.TypeOf(a))</span><br></pre></td></tr></table></figure></li><li>获取结构体属性的值<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ype People <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="keyword">int</span></span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"asdf"</span>)</span><br><span class="line"></span><br><span class="line">   peo := People&#123;<span class="number">1</span>, <span class="string">"张三"</span>&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取peo的值</span></span><br><span class="line">   v := reflect.ValueOf(peo)</span><br><span class="line">   <span class="comment">//获取属性个数,如果v不是结构体类型panic</span></span><br><span class="line">   fmt.Println(v.NumField())</span><br><span class="line"></span><br><span class="line">   <span class="comment">//获取第0个属性,id,并转换为int64类型</span></span><br><span class="line">   fmt.Println(v.Field(<span class="number">0</span>).Int())</span><br><span class="line">   <span class="comment">//获取第1个属性,转换换为string类型</span></span><br><span class="line">   fmt.Println(v.Field(<span class="number">1</span>).String())</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据名字获取类型,并把类型名称转换为string类型</span></span><br><span class="line">   idValue := v.FieldByName(<span class="string">"Id"</span>)</span><br><span class="line">   fmt.Println(idValue.Kind().String())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>设置结构体属性的值时要传递结构体指针,否者无法获取设置的结构体对象<ul><li>反射直射结构体属性时,要求属性名首字母必须大写,否则无法设置<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">   <span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">   Id   <span class="keyword">int</span></span><br><span class="line">   Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"asdf"</span>)</span><br><span class="line">   peo := People&#123;<span class="number">1</span>, <span class="string">"张三"</span>&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   反射时获取peo的地址.</span></span><br><span class="line"><span class="comment">   Elem()获取指针指向地址的封装.</span></span><br><span class="line"><span class="comment">   地址的值必须调用Elem()才可以继续操作</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   v := reflect.ValueOf(&amp;peo).Elem()</span><br><span class="line"></span><br><span class="line">   fmt.Println(v.FieldByName(<span class="string">"Id"</span>).CanSet())</span><br><span class="line">   v.FieldByName(<span class="string">"Id"</span>).SetInt(<span class="number">123</span>)</span><br><span class="line">   v.FieldByName(<span class="string">"Name"</span>).SetString(<span class="string">"李四"</span>)</span><br><span class="line">   fmt.Println(peo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>结构体支持标记(tag),标记通常都是通过反射技术获取到.结构体标记语法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type 结构体名称 struct&#123;</span><br><span class="line">  属性名 类型 &#96;key:&quot;Value&quot;&#96;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>获取结构体标记(tag)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">Name    <span class="keyword">string</span> <span class="string">`xml:"name"`</span></span><br><span class="line">Address <span class="keyword">string</span> <span class="string">`xml:"address"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t:=reflect.TypeOf(People&#123;&#125;)</span><br><span class="line">name,_:=t.FieldByName(<span class="string">"Name"</span>)</span><br><span class="line">fmt.Println(name.Tag)<span class="comment">//获取完整标记</span></span><br><span class="line">fmt.Println(name.Tag.Get(<span class="string">"xml"</span>))<span class="comment">//获取标记中xml对应内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang学习十六：文件操作</title>
    <link href="http://www.maishuren.top/posts/goalng/202006201116-index.html"/>
    <id>http://www.maishuren.top/posts/goalng/202006201116-index.html</id>
    <published>2020-06-20T03:16:19.000Z</published>
    <updated>2020-07-12T14:17:21.610Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="os包结构介绍"><a href="#os包结构介绍" class="headerlink" title="os包结构介绍"></a>os包结构介绍</h1><ul><li>Go语言标准库中os包提供了不依赖平台的操作系统接口</li><li>设计为Unix风格的，而错误处理是go风格的,失败的调用会返回错误值而非错误码。通常错误值里包含更多信息</li><li>os包及子包功能<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- os 包</span><br><span class="line">  --os&#x2F;exec 包,负责执行外部命令.</span><br><span class="line">  --os&#x2F;signal对输入信息的访问</span><br><span class="line">  --os&#x2F;user 通过名称或ID查询用户账户</span><br></pre></td></tr></table></figure></li><li>在os/user中提供了User结构体,表示操作系统用户<ul><li>Uid 用户id</li><li>Gid 所属组id</li><li>Username 用户名</li><li>Name 所属组名</li><li>HomeDir 用户对应文件夹路径<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User represents a user account.</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Uid is the user ID.</span></span><br><span class="line"><span class="comment">// On POSIX systems, this is a decimal number representing the uid.</span></span><br><span class="line"><span class="comment">// On Windows, this is a security identifier (SID) in a string format.</span></span><br><span class="line"><span class="comment">// On Plan 9, this is the contents of /dev/user.</span></span><br><span class="line">Uid <span class="keyword">string</span></span><br><span class="line"><span class="comment">// Gid is the primary group ID.</span></span><br><span class="line"><span class="comment">// On POSIX systems, this is a decimal number representing the gid.</span></span><br><span class="line"><span class="comment">// On Windows, this is a SID in a string format.</span></span><br><span class="line"><span class="comment">// On Plan 9, this is the contents of /dev/user.</span></span><br><span class="line">Gid <span class="keyword">string</span></span><br><span class="line"><span class="comment">// Username is the login name.</span></span><br><span class="line">Username <span class="keyword">string</span></span><br><span class="line"><span class="comment">// Name is the user's real or display name.</span></span><br><span class="line"><span class="comment">// It might be blank.</span></span><br><span class="line"><span class="comment">// On POSIX systems, this is the first (or only) entry in the GECOS field</span></span><br><span class="line"><span class="comment">// list.</span></span><br><span class="line"><span class="comment">// On Windows, this is the user's display name.</span></span><br><span class="line"><span class="comment">// On Plan 9, this is the contents of /dev/user.</span></span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line"><span class="comment">// HomeDir is the path to the user's home directory (if they have one).</span></span><br><span class="line">HomeDir <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>在os/user中的Group表示用户所属组<ul><li>Gid 组的id</li><li>Name 组的名称<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Group represents a grouping of users.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// On POSIX systems Gid contains a decimal number representing the group ID.</span></span><br><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">Gid  <span class="keyword">string</span> <span class="comment">// group ID</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="comment">// group name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>整个os/user包中内容比较少,提供了两个错误类型和获取当前用户,查找用户<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UnknownUserError</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(e UnknownUserError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="keyword">type</span> UnknownUserIdError</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="params">(e UnknownUserIdError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="keyword">type</span> User</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">Current</span><span class="params">()</span> <span class="params">(*User, error)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">Lookup</span><span class="params">(username <span class="keyword">string</span>)</span> <span class="params">(*User, error)</span></span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">LookupId</span><span class="params">(uid <span class="keyword">string</span>)</span> <span class="params">(*User, error)</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><ul><li>可以获取当前用户或查找用户后获取用户信息<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前登录用户</span></span><br><span class="line"><span class="comment">//u,_:=user.Current()</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Lookup()参数是用户名,按照用户名查找指定用户对象</span></span><br><span class="line"><span class="comment">注意:必须使用完整名称不可以只写zhang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">u, _ := user.Lookup(<span class="string">`LAPTOP-APM56\maishuren`</span>)</span><br><span class="line">fmt.Println(u.Name)</span><br><span class="line">fmt.Println(u.Gid)</span><br><span class="line">fmt.Println(u.HomeDir)</span><br><span class="line">fmt.Println(u.Uid)</span><br><span class="line">fmt.Println(u.Username)</span><br></pre></td></tr></table></figure></li></ul><h1 id="os包内容介绍"><a href="#os包内容介绍" class="headerlink" title="os包内容介绍"></a>os包内容介绍</h1><ul><li><p>使用os包中内容进行操作系统文件或目录</p></li><li><p>File结构体表示操作系统文件(夹)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File represents an open file descriptor.</span></span><br><span class="line"><span class="keyword">type</span> File <span class="keyword">struct</span> &#123;</span><br><span class="line">*file <span class="comment">// os specific</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file is the real representation of *File.</span></span><br><span class="line"><span class="comment">// The extra level of indirection ensures that no clients of os</span></span><br><span class="line"><span class="comment">// can overwrite this data, which could cause the finalizer</span></span><br><span class="line"><span class="comment">// to close the wrong file descriptor.</span></span><br><span class="line"><span class="keyword">type</span> file <span class="keyword">struct</span> &#123;</span><br><span class="line">pfd     poll.FD</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">dirinfo *dirInfo <span class="comment">// nil unless directory being read</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>操作系统的文件都是有权限控制的,包含可读,可写等,在os包中FileMode表示文件权限,本质是uint32,可取值都以常量形式提供</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A FileMode represents a file's mode and permission bits.</span></span><br><span class="line"><span class="comment">// The bits have the same definition on all systems, so that</span></span><br><span class="line"><span class="comment">// information about files can be moved from one system</span></span><br><span class="line"><span class="comment">// to another portably. Not all bits apply to all systems.</span></span><br><span class="line"><span class="comment">// The only required bit is ModeDir for directories.</span></span><br><span class="line"><span class="keyword">type</span> FileMode <span class="keyword">uint32</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The defined file mode bits are the most significant bits of the FileMode.</span></span><br><span class="line"><span class="comment">// The nine least-significant bits are the standard Unix rwxrwxrwx permissions.</span></span><br><span class="line"><span class="comment">// The values of these bits should be considered part of the public API and</span></span><br><span class="line"><span class="comment">// may be used in wire protocols or disk representations: they must not be</span></span><br><span class="line"><span class="comment">// changed, although new bits might be added.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="comment">// The single letters are the abbreviations</span></span><br><span class="line"><span class="comment">// used by the String method's formatting.</span></span><br><span class="line">ModeDir        FileMode = <span class="number">1</span> &lt;&lt; (<span class="number">32</span> - <span class="number">1</span> - <span class="literal">iota</span>) <span class="comment">// d: is a directory</span></span><br><span class="line">ModeAppend                                     <span class="comment">// a: append-only</span></span><br><span class="line">ModeExclusive                                  <span class="comment">// l: exclusive use</span></span><br><span class="line">ModeTemporary                                  <span class="comment">// T: temporary file; Plan 9 only</span></span><br><span class="line">ModeSymlink                                    <span class="comment">// L: symbolic link</span></span><br><span class="line">ModeDevice                                     <span class="comment">// D: device file</span></span><br><span class="line">ModeNamedPipe                                  <span class="comment">// p: named pipe (FIFO)</span></span><br><span class="line">ModeSocket                                     <span class="comment">// S: Unix domain socket</span></span><br><span class="line">ModeSetuid                                     <span class="comment">// u: setuid</span></span><br><span class="line">ModeSetgid                                     <span class="comment">// g: setgid</span></span><br><span class="line">ModeCharDevice                          <span class="comment">// c: Unix character device, when ModeDevice is set</span></span><br><span class="line">ModeSticky                                     <span class="comment">// t: sticky</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Mask for the type bits. For regular files, none will be set.</span></span><br><span class="line">ModeType = ModeDir | ModeSymlink | ModeNamedPipe | ModeSocket | ModeDevice</span><br><span class="line"></span><br><span class="line">ModePerm FileMode = <span class="number">0777</span> <span class="comment">// Unix permission bits</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>FIleInfo是一个interface表示文件的信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A FileInfo describes a file and is returned by Stat and Lstat.</span></span><br><span class="line"><span class="keyword">type</span> FileInfo <span class="keyword">interface</span> &#123;</span><br><span class="line">Name() <span class="keyword">string</span>       <span class="comment">// base name of the file</span></span><br><span class="line">Size() <span class="keyword">int64</span>        <span class="comment">// length in bytes for regular files; system-dependent for others</span></span><br><span class="line">Mode() FileMode     <span class="comment">// file mode bits</span></span><br><span class="line">ModTime() time.Time <span class="comment">// modification time</span></span><br><span class="line">IsDir() <span class="keyword">bool</span>        <span class="comment">// abbreviation for Mode().IsDir()</span></span><br><span class="line">Sys() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// underlying data source (can return nil)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h2></li><li><p>在获取系统资源时资源路径分为相对路径和绝对路径</p></li><li><p>相对路径:在Go语言中相对路径用于是GOPATH,也就是项目的根目录</p></li><li><p>绝对路径:磁盘根目录开始表示资源详细路径的描述</p><h2 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h2></li><li><p>Go语言标准库中提供了两种创建文件夹的方式</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要求文件夹不存在且父目录必须存在,才能创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//error := os.Mkdir("D:/godir", os.ModeDir)</span></span><br><span class="line"><span class="comment">//if error != nil &#123;</span></span><br><span class="line"><span class="comment">//fmt.Println("文件夹创建失败",error)</span></span><br><span class="line"><span class="comment">//return</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//fmt.Println("文件夹创建成功")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果文件夹已经存在,不报错,保留原文件夹</span></span><br><span class="line"><span class="comment">如果父目录不存在帮助创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">error := os.MkdirAll(<span class="string">"D:/godir/a/b"</span>, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"文件夹创建失败"</span>,error)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件夹创建成功"</span>)</span><br></pre></td></tr></table></figure><ul><li>创建空文件<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建文件时要求文件目录必须已经存在</span></span><br><span class="line"><span class="comment">如果文件已经存在则会创建一个空文件覆盖之前的文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">file, err := os.Create(<span class="string">"D:/godir/test.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"文件创建失败,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件创建成功"</span>,file.Name())</span><br></pre></td></tr></table></figure></li><li>重命名文件或文件夹<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个参数:原文件夹名称,要求此路径是必须存在的</span></span><br><span class="line"><span class="comment">第二个参数:新文件夹名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err := os.Rename(<span class="string">"D:/godir"</span>, <span class="string">"D:/godir1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"重命名文件夹失败,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件夹重命名成功"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">重命名文件和重命名文件夹用法相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err = os.Rename(<span class="string">"D:/godir1/test.txt"</span>, <span class="string">"D:/godir1/test1.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"重命名文件失败,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件重命名成功"</span>)</span><br></pre></td></tr></table></figure></li><li>获取文件(夹)信息<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"D:/godir1/test1.txt"</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close() <span class="comment">//文件打开后要关闭,释放资源</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"打开文件失败"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileInfo, err := f.Stat()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"获取文件信息失败"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(fileInfo.Name())    <span class="comment">//文件名</span></span><br><span class="line">fmt.Println(fileInfo.IsDir())   <span class="comment">//是否是文件夹,返回bool,true表示文件夹,false表示文件</span></span><br><span class="line">fmt.Println(fileInfo.Mode())    <span class="comment">//文件权限</span></span><br><span class="line">fmt.Println(fileInfo.ModTime()) <span class="comment">//修改时间</span></span><br><span class="line">fmt.Println(fileInfo.Size())    <span class="comment">//文件大小</span></span><br></pre></td></tr></table></figure></li><li>删除文件或文件夹<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除的内容只能是一个文件或空文件夹且必须存在</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//err := os.Remove("D:/godir1/a")</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"><span class="comment">//fmt.Println("文件删除失败", err)</span></span><br><span class="line"><span class="comment">//return</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//fmt.Println("删除成功")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">只要文件夹存在,删除文件夹.</span></span><br><span class="line"><span class="comment">无论文件夹是否有内容都会删除</span></span><br><span class="line"><span class="comment">如果删除目标是文件,则删除文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">err := os.RemoveAll(<span class="string">"D:/godir1/a.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"删除失败"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"删除成功"</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h1><ul><li><p>流(stream)是应用程序和外部资源进行数据交互的纽带</p></li><li><p>流分为输入流和输出流,输入和输出都是相对于程序,把外部数据传入到程序中叫做输入,反之叫做输出流</p></li><li><p>输入流(Input Stream),输入流(Output Stream) 平时所说的I/O流</p></li><li><p>在Go语言标准库中io包下是Reader接口表示输入流,只要实现这个接口就属于输入流</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reader is the interface that wraps the basic Read method.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Read reads up to len(p) bytes into p. It returns the number of bytes</span></span><br><span class="line"><span class="comment">// read (0 &lt;= n &lt;= len(p)) and any error encountered. Even if Read</span></span><br><span class="line"><span class="comment">// returns n &lt; len(p), it may use all of p as scratch space during the call.</span></span><br><span class="line"><span class="comment">// If some data is available but not len(p) bytes, Read conventionally</span></span><br><span class="line"><span class="comment">// returns what is available instead of waiting for more.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When Read encounters an error or end-of-file condition after</span></span><br><span class="line"><span class="comment">// successfully reading n &gt; 0 bytes, it returns the number of</span></span><br><span class="line"><span class="comment">// bytes read. It may return the (non-nil) error from the same call</span></span><br><span class="line"><span class="comment">// or return the error (and n == 0) from a subsequent call.</span></span><br><span class="line"><span class="comment">// An instance of this general case is that a Reader returning</span></span><br><span class="line"><span class="comment">// a non-zero number of bytes at the end of the input stream may</span></span><br><span class="line"><span class="comment">// return either err == EOF or err == nil. The next Read should</span></span><br><span class="line"><span class="comment">// return 0, EOF.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Callers should always process the n &gt; 0 bytes returned before</span></span><br><span class="line"><span class="comment">// considering the error err. Doing so correctly handles I/O errors</span></span><br><span class="line"><span class="comment">// that happen after reading some bytes and also both of the</span></span><br><span class="line"><span class="comment">// allowed EOF behaviors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementations of Read are discouraged from returning a</span></span><br><span class="line"><span class="comment">// zero byte count with a nil error, except when len(p) == 0.</span></span><br><span class="line"><span class="comment">// Callers should treat a return of 0 and nil as indicating that</span></span><br><span class="line"><span class="comment">// nothing happened; in particular it does not indicate EOF.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementations must not retain p.</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><ul><li>可以使用strings包下的NewReader创建字符串流<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r := strings.NewReader(<span class="string">"hello 世界"</span>)</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, r.Size())<span class="comment">//创建字节切片,存放流中数据,根据流数据大小创建切片大小</span></span><br><span class="line">n, err := r.Read(b)<span class="comment">//把流中数据读取到切片中</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"读取失败,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"读取数据长度,"</span>, n)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"流中数据"</span>,<span class="keyword">string</span>(b))<span class="comment">//以字符串形式输入切片中数据</span></span><br></pre></td></tr></table></figure></li><li>最常用的是文件流,把外部文件中数据读取到程序中<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"D:/go.txt"</span>)<span class="comment">//打开文件</span></span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"文件读取失败,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fileInfo, err := f.Stat()<span class="comment">//获取文件信息</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"文件信息获取失败,"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())<span class="comment">//根据文件中数据大小创建切片</span></span><br><span class="line">_, err = f.Read(b)<span class="comment">//读取数据到切片中</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"文件流读取失败:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件中内容为:"</span>, <span class="keyword">string</span>(b))<span class="comment">//以字符串形式输入切片中数据</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="输入流-1"><a href="#输入流-1" class="headerlink" title="输入流"></a>输入流</h1><ul><li>输入流就是把程序中数据写出到外部资源</li><li>Go语言标准库中输出流是Writer接口<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Writer is the interface that wraps the basic Write method.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Write writes len(p) bytes from p to the underlying data stream.</span></span><br><span class="line"><span class="comment">// It returns the number of bytes written from p (0 &lt;= n &lt;= len(p))</span></span><br><span class="line"><span class="comment">// and any error encountered that caused the write to stop early.</span></span><br><span class="line"><span class="comment">// Write must return a non-nil error if it returns n &lt; len(p).</span></span><br><span class="line"><span class="comment">// Write must not modify the slice data, even temporarily.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Implementations must not retain p.</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h2><ul><li>注意:输入流时不要使用<code>os.Open()</code>因为这种方式获取的文件是只读的<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">fp := <span class="string">"D:/go.txt"</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第三个参数表示文件权限</span></span><br><span class="line"><span class="comment">第 1 位在权限中总是为 0</span></span><br><span class="line"><span class="comment">第 2 位为 0 表示文件不可以被读， 为 1 表示可以被读</span></span><br><span class="line"><span class="comment">第 3 位为 0 表示文件不可以被写， 为 1 表示可以被写</span></span><br><span class="line"><span class="comment">第 4 位为 0 表示文件不可以被执行， 为 1 表示可以被执行</span></span><br><span class="line"><span class="comment">整理如下:</span></span><br><span class="line"><span class="comment">   0(0000): 不可读写,不能被执行</span></span><br><span class="line"><span class="comment">   1(0001): 不可读写,能被执行</span></span><br><span class="line"><span class="comment">   2(0010): 可写不可读,不能被执行</span></span><br><span class="line"><span class="comment">   3(0011): 可写不可读,能被执行</span></span><br><span class="line"><span class="comment">   4(0100): 可读不可写,不能被执行</span></span><br><span class="line"><span class="comment">   5(0101): 可读不可写,能被执行</span></span><br><span class="line"><span class="comment">   6(0110): 可读写,不能执行</span></span><br><span class="line"><span class="comment">   7(0111): 可读写,可执行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0666:</span></span><br><span class="line"><span class="comment">第一个 0 表示这个数是 八进制</span></span><br><span class="line"><span class="comment">第一个 6 表示文件拥有者有读写权限，但没有执行权限</span></span><br><span class="line"><span class="comment">第二个 6 表示文件拥有者同组用户有读写权限，但没有执行权限</span></span><br><span class="line"><span class="comment">第三个 6 表示其它用户有读写权限，但没有执行权限</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个参数表示文件内容追加</span></span><br><span class="line"><span class="comment">//第三个参数表示创建文件时文件权限</span></span><br><span class="line">f, err := os.OpenFile(fp, os.O_APPEND, <span class="number">0660</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"文件不存在,创建文件"</span>)</span><br><span class="line">f, _ = os.Create(fp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">内容中识别特殊字符</span></span><br><span class="line"><span class="comment">\r\n 换行</span></span><br><span class="line"><span class="comment">\t 缩进</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用文件对象重写的Writer接口,参数是[]byte</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">f.Write([]<span class="keyword">byte</span>(<span class="string">"使用Writer接口写数据\r\n"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用stringWriter接口的方法,参数是字符串,使用更方便</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">f.WriteString(<span class="string">"写了\t一段\r\n内容123"</span>)</span><br><span class="line">fmt.Println(<span class="string">"程序执行结束"</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="ioutil包"><a href="#ioutil包" class="headerlink" title="ioutil包"></a>ioutil包</h1><ul><li>ioutil包下提供了对文件读写的工具函数,通过这些函数快速实现文件的读写操作</li><li>ioutil包下提供的函数比较少,但是都是很方便使用的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">func NopCloser(r io.Reader) io.ReadCloser</span><br><span class="line">func ReadAll(r io.Reader) ([]byte, error)</span><br><span class="line">func ReadFile(filename string) ([]byte, error)</span><br><span class="line">func WriteFile(filename string, data []byte, perm os.FileMode) error</span><br><span class="line">func ReadDir(dirname string) ([]os.FileInfo, error)</span><br><span class="line">func TempDir(dir, prefix string) (name string, err error)</span><br><span class="line">func TempFile(dir, prefix string) (f *os.File, err error)</span><br></pre></td></tr></table></figure><h2 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h2></li><li>打开完文件后可以使用ReadAll把文件中所有内容都读取到<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"D:/go.txt"</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">b, err := ioutil.ReadAll(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"文件中内容:\n"</span>, <span class="keyword">string</span>(b))</span><br></pre></td></tr></table></figure></li><li>也可以直接读取文件中内容<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b, err := ioutil.ReadFile(<span class="string">"D:/go.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(b))</span><br></pre></td></tr></table></figure></li><li>写文件也很简单,直接使用WriteFile函数即可,但是源码中已经规定此文件只能是可写状态,且不是尾加数据<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err := ioutil.WriteFile(<span class="string">"D:/abc.txt"</span>, []<span class="keyword">byte</span>(<span class="string">"内容123123"</span>), <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"数据写入成功"</span>)</span><br></pre></td></tr></table></figure></li><li>还提供了快速获取某个文件夹中所有文件信息的函数<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs,_:=ioutil.ReadDir(<span class="string">"D:/"</span>)</span><br><span class="line"><span class="keyword">for</span> _,n := <span class="keyword">range</span> fs &#123;</span><br><span class="line">fmt.Println(n.Name())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>golang学习十五：错误异常处理</title>
    <link href="http://www.maishuren.top/posts/goalng/202006201059-index.html"/>
    <id>http://www.maishuren.top/posts/goalng/202006201059-index.html</id>
    <published>2020-06-20T02:59:08.000Z</published>
    <updated>2020-07-12T14:17:44.308Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><ul><li><p>在程序执行过程中出现的不正常情况称为错误</p></li><li><p>Go语言中使用builtin包下error接口作为错误类型,官方源码定义如下</p><ul><li>只包含了一个方法,方法返回值是string,表示错误信息<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The error built-in interface type is the conventional interface for</span></span><br><span class="line"><span class="comment">// representing an error condition, with the nil value representing no error.</span></span><br><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Go语言中错误都作为方法/函数的返回值,因为Go语言认为使用其他语言类似try…catch这种方式会影响到程序结构</p></li><li><p>在Go语言标准库的errors包中提供了error接口的实现结构体errorString,并重写了error接口的Error()方法.额外还提供了快速创建错误的函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> errors</span><br><span class="line"></span><br><span class="line"><span class="comment">// New returns an error that formats as the given text.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(text <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// errorString is a trivial implementation of error.</span></span><br><span class="line"><span class="keyword">type</span> errorString <span class="keyword">struct</span> &#123;</span><br><span class="line">s <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *errorString)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> e.s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果错误信息由很多变量(小块)组成,可以借助<code>fmt.Errorf(&quot;verb&quot;,...)</code>完成错误信息格式化,因为底层还是errors.New()</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Errorf formats according to a format specifier and returns the string</span></span><br><span class="line"><span class="comment">// as a value that satisfies error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Errorf</span><span class="params">(format <span class="keyword">string</span>, a ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(Sprintf(format, a...))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义错误"><a href="#自定义错误" class="headerlink" title="自定义错误"></a>自定义错误</h1></li><li><p>使用Go语言标准库创建错误,并返回</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">e = errors.New(<span class="string">"初始不能为0"</span>)</span><br><span class="line">d=<span class="number">0</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">d = i / k</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result,error:=demo(<span class="number">6</span>,<span class="number">0</span>)</span><br><span class="line">fmt.Println(result,error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果错误信息由多个内容组成,可以使用下面实现方式</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">e = fmt.Errorf(<span class="string">"%s%d和%d"</span>, <span class="string">"除数不能是0,两个参数分别是:"</span>, i, k)</span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">d = i / k</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result, error := demo(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(result, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Go语言中错误处理方式"><a href="#Go语言中错误处理方式" class="headerlink" title="Go语言中错误处理方式"></a>Go语言中错误处理方式</h1></li><li><p>可以忽略错误信息,使用占位符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">e = fmt.Errorf(<span class="string">"%s%d和%d"</span>, <span class="string">"除数不能是0,两个参数分别是:"</span>, i, k)</span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">d = i / k</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result, _ := demo(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用if处理错误,原则上每个错误都应该解决</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo</span><span class="params">(i, k <span class="keyword">int</span>)</span> <span class="params">(d <span class="keyword">int</span>, e error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">e = fmt.Errorf(<span class="string">"%s%d和%d"</span>, <span class="string">"除数不能是0,两个参数分别是:"</span>, i, k)</span><br><span class="line">d = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">d = i / k</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">result, error := demo(<span class="number">6</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"发生错误"</span>, error)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"程序执行成功,结果为:"</span>, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="defer使用"><a href="#defer使用" class="headerlink" title="defer使用"></a>defer使用</h1><ul><li>Go语言中defer可以完成延迟功能,当前函数执行完成后执行defer功能</li><li>defer最常用的就是关闭连接(数据库连接,文件等)可以打开连接后代码紧跟defer进行关闭,后面在执行其他功能<ul><li>在很多语言中要求必须按照顺序执行,也就是必须把关闭代码写在最后,但是经常会忘记关闭导致内存溢出,而Golang中defer很好的解决了这个问题.无论defer写到哪里都是最后执行<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开连接"</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"关闭连接"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"进行操作"</span>)</span><br><span class="line">   <span class="comment">//输出:打开连接 进行操作 关闭连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="多个defer"><a href="#多个defer" class="headerlink" title="多个defer"></a>多个defer</h1><ul><li><p>多重defer采用栈结构执行,先产生后执行</p></li><li><p>在很多代码结构中都可能出现产生多个对象,而程序希望这些对象倒序关闭,多个defer正好可以解决这个问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"打开连接A"</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"关闭连接A"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"打开连接B"</span>)</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"关闭连接B"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"进行操作"</span>)</span><br><span class="line">   <span class="comment">//输出:打开连接A 打开连接B 进行操作 关闭连接B 关闭连接A</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="defer和return结合"><a href="#defer和return结合" class="headerlink" title="defer和return结合"></a>defer和return结合</h1></li><li><p>defer与return同时存在时,要把return理解成两条执行结合(不是原子指令),一个指令是给返回值赋值,另一个指令返回跳出函数</p></li><li><p>defer和return时整体执行顺序</p><ul><li>先给返回值赋值</li><li>执行defer</li><li>返回跳出函数</li></ul></li><li><p>没有定义返回值接收变量,执行defer时返回值已经赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">i:=<span class="number">0</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">i=i+<span class="number">2</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f())<span class="comment">//输出:0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明接收返回值变量,执行defer时修改了返回值内容.</p><ul><li>由于return后面没有内容,就无法给返回值赋值,所以执行defer时返回值才有内容<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">i=i+<span class="number">2</span></span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(f())<span class="comment">//输出:2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h1><ul><li>panic是builtin中函数<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The panic built-in function stops normal execution of the current</span></span><br><span class="line"><span class="comment">// goroutine. When a function F calls panic, normal execution of F stops</span></span><br><span class="line"><span class="comment">// immediately. Any functions whose execution was deferred by F are run in</span></span><br><span class="line"><span class="comment">// the usual way, and then F returns to its caller. To the caller G, the</span></span><br><span class="line"><span class="comment">// invocation of F then behaves like a call to panic, terminating G's</span></span><br><span class="line"><span class="comment">// execution and running any deferred functions. This continues until all</span></span><br><span class="line"><span class="comment">// functions in the executing goroutine have stopped, in reverse order. At</span></span><br><span class="line"><span class="comment">// that point, the program is terminated and the error condition is reported,</span></span><br><span class="line"><span class="comment">// including the value of the argument to panic. This termination sequence</span></span><br><span class="line"><span class="comment">// is called panicking and can be controlled by the built-in function</span></span><br><span class="line"><span class="comment">// recover.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">panic</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br></pre></td></tr></table></figure></li><li>panic有点类似与其他编程语言的throw,抛出异常.当执行到panic后终止剩余代码执行.并打印错误栈信息<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">"panic执行了,哈哈"</span>)</span><br><span class="line">   fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>执行结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">panic: panic执行了,哈哈</span><br><span class="line"></span><br><span class="line">goroutine 1 [running]:</span><br><span class="line">main.main()</span><br><span class="line">D:&#x2F;gowork&#x2F;c&#x2F;main.go:7 +0x80</span><br></pre></td></tr></table></figure></li><li>注意panic不是立即停止程序(os.Exit(0)),defer还是执行的.</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">      fmt.Println(<span class="string">"defer执行"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line">   fmt.Println(<span class="string">"1"</span>)</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">"panic执行了,哈哈"</span>)</span><br><span class="line">   fmt.Println(<span class="string">"2"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="recover"><a href="#recover" class="headerlink" title="recover"></a>recover</h1><ul><li><p>recover()表示恢复程序的panic(),让程序正常运行</p></li><li><p>recover()是和panic(v)一样都是builtin中函数,可以接收panic的信息,恢复程序的正常运行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The recover built-in function allows a program to manage behavior of a</span></span><br><span class="line"><span class="comment">// panicking goroutine. Executing a call to recover inside a deferred</span></span><br><span class="line"><span class="comment">// function (but not any function called by it) stops the panicking sequence</span></span><br><span class="line"><span class="comment">// by restoring normal execution and retrieves the error value passed to the</span></span><br><span class="line"><span class="comment">// call of panic. If recover is called outside the deferred function it will</span></span><br><span class="line"><span class="comment">// not stop a panicking sequence. In this case, or when the goroutine is not</span></span><br><span class="line"><span class="comment">// panicking, or if the argument supplied to panic was nil, recover returns</span></span><br><span class="line"><span class="comment">// nil. Thus the return value from recover reports whether the goroutine is</span></span><br><span class="line"><span class="comment">// panicking.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recover</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>recover()一般用在defer内部,如果没有panic信息返回nil,如果有panic,recover会把panic状态取消</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> error:=<span class="built_in">recover</span>();error!=<span class="literal">nil</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"出现了panic,使用reover获取信息:"</span>,error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">"11111111111"</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"出现panic"</span>)</span><br><span class="line">fmt.Println(<span class="string">"22222222222"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">11111111111</span><br><span class="line">出现了panic,使用reover获取信息: 出现panic</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数调用过程中panic和recover"><a href="#函数调用过程中panic和recover" class="headerlink" title="函数调用过程中panic和recover()"></a>函数调用过程中panic和recover()</h1><ul><li>recover()只能恢复当前函数级或当前函数调用函数中的panic(),恢复后调用当前级别函数结束,但是调用此函数的函数可以继续执行.</li><li>panic会一直向上传递,如果没有recover()则表示终止程序,但是碰见了recover(),recover()所在级别函数表示没有panic,panic就不会向上传递<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"demo1上半部分"</span>)</span><br><span class="line">demo2()</span><br><span class="line">fmt.Println(<span class="string">"demo1下半部分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">recover</span>()<span class="comment">//此处进行恢复</span></span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">"demo2上半部分"</span>)</span><br><span class="line">demo3()</span><br><span class="line">fmt.Println(<span class="string">"demo2下半部分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo3</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"demo3上半部分"</span>)</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"在demo3出现了panic"</span>)</span><br><span class="line">fmt.Println(<span class="string">"demo3下半部分"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"程序开始"</span>)</span><br><span class="line">demo1()</span><br><span class="line">fmt.Println(<span class="string">"程序结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p><a href="http://www.maishuren.top/posts/golang/202006111106-index.html" target="_blank">golang学习一：从环境配置开始到HelloWorld入门</a><br><a href="http://www.maishuren.top/posts/golang/202006122229-index.html" target="_blank">golang学习二：golang自带的工具</a><br><a href="http://www.maishuren.top/posts/golang/202006122240-index.html" target="_blank">olang学习三：golang基础语法</a><br><a href="http://www.maishuren.top/posts/golang/202006131013-index.html" target="_blank">golang学习四：流程控制</a><br><a href="http://www.maishuren.top/posts/golang/202006131027-index.html" target="_blank">golang学习五：常用数学函数与数组</a><br><a href="http://www.maishuren.top/posts/golang/202006131031-index.html" target="_blank">golang学习六：for循环</a><br><a href="http://www.maishuren.top/posts/golang/202006131037-index.html" target="_blank">golang学习七：goto和label</a><br><a href="http://www.maishuren.top/posts/gloang/202006131039-index.html" target="_blank">golang学习八：切片</a><br><a href="http://www.maishuren.top/posts/golang/202006182323-index.html" target="_blank">golang学习九：sort包、map、双向链表、双向循环链表</a><br><a href="http://www.maishuren.top/posts/golang/202006182334-index.html" target="_blank">golang学习十：函数</a><br><a href="http://www.maishuren.top/posts/golang/202006182343-index.html" target="_blank">golang学习十一：包的访问权限、变量作用域、闭包</a><br><a href="http://www.maishuren.top/posts/gloang/202006182347-index.html" target="_blank">golang学习十二：值传递和引用传递</a><br><a href="http://www.maishuren.top/posts/golang/202006182349-index.html" target="_blank">golang学习十三：结构体</a><br><a href="http://www.maishuren.top/posts/golang/202006182355-index.html" target="_blank">golang学习十四：golang中的面向对象</a><br><a href="http://www.maishuren.top/posts/goalng/202006201059-index.html" target="_blank">golang学习十五：错误异常处理</a><br><a href="http://www.maishuren.top/posts/goalng/202006201116-index.html" target="_blank">golang学习十六：文件操作</a><br><a href="http://www.maishuren.top/posts/goalng/202006201120-index.html" target="_blank">golang学习十七：反射</a><br><a href="http://www.maishuren.top/posts/goalng/202006201125-index.html" target="_blank">golang学习十八：XML操作</a><br><a href="http://www.maishuren.top/posts/golang/202006201131-index.html" target="_blank">golang学习十九：日志</a><br><a href="http://www.maishuren.top/posts/golang/202006201134-index.html" target="_blank">golang学习二十：golang并发编程入门</a><br><a href="http://www.maishuren.top/posts/golang/202006201149-index.html" target="_blank">golang学习二十一：select和GC</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="后端" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="golang" scheme="http://www.maishuren.top/categories/%E5%90%8E%E7%AB%AF/golang/"/>
    
    
      <category term="golang" scheme="http://www.maishuren.top/tags/golang/"/>
    
      <category term="入门" scheme="http://www.maishuren.top/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
